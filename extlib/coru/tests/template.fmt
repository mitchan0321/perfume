/// AUTOGENERATED TEST ///
#define _POSIX_C_SOURCE 1
#include "coru.h"
#include <stdio.h>
#include <stdarg.h>

uintmax_t test_res;

void test_asserteqm(
        const char *file, unsigned line, const char *test,
        uintmax_t v, uintmax_t e) {{
    if (v != e) {{
        fprintf(stderr, "\033[31m%s:%u: assert %s failed with %jd, "
                "expected %jd\033[0m\n", file, line, test, v, e);
        exit(-2);
    }}
}}

#define test_asserteqm(v, e, m) test_asserteqm(__FILE__, __LINE__, m, v, e)
#define test_asserteq(v, e) test_asserteqm(v, e, #v)
#define test_assertm(v, m) test_asserteqm(v, true, m)
#define test_assert(v) test_asserteqm(v, true, #v)

FILE *test_expect_f;
void test_expect(const char *fmt, ...) {{
    if (!test_expect_f) {{
        return;
    }}

    va_list args;
    va_start(args, fmt);
    vfprintf(test_expect_f, fmt, args);
    va_end(args);
}}

void test(void);
int main() {{
    // create special descriptor for expect traffic
    test_expect_f = fdopen(3, "w");

    // run tests
    test();
}}

/// test code ///

{test}
