###
### Pmacs editor misc command definition.
###

defcommand send-to-task desc: "Send input line to Task's common Stream." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    str ::= $buff get-buffer-line $ey;
    $window apply-command $main $window "" bottom-of-buffer;
    $buff append-string "";
    $window move-down;
    TaskManager send-to-task $str;
    result SELF;
};

defcommand internal-stat desc: "Display interpriter internal status." {
    | main window |
    w :wide;
    println "";
    stack-trace : split sep: "\n" : each do: {| i | $stdout puts $i};
    println ["interp stat: " . [$PINTERP stat]];
    println ["interp busy: " . [$MainWindow is-interp-busy]];
    println "";
    println ["stdin stat:  " . [$stdin stat]];
    println ["stdout stat: " . [$stdout stat]];
    println ["stderr stat: " . [$stderr stat]];
    println "";
    println ["info global: " . [info global]];
    println ["PINTERP value: " . $PINTERP];
    slist;

    result ALL;
};

defcommand cancel-prefix desc: "Cancel prefix." {
    | main window |
    $window cancel-prefix;
    return ALL;
};

defcommand pop-prefix desc: "Pop last prefix." {
    | main window |
    $window pop-prefix;
    return ALL;
};

defcommand show-version desc: "Show pmacs version." {
    show-message "Version: " $VERSION ", Build: " $BUILD;
};

defcommand mini-move-message desc: "Demo background." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    str ::= $buff get-buffer-line $ey;
    if {and $str {[$str len] > 0}} {
        (y x) ::= $window get-screen-size;
        message ::= [" " repeat $x] . $str;
        body := {
            set message [$message sub 1];
            if {[$message len] > 0} {
                show-message $message;
                $main add-background $body after: 100;
            } {
                show-message "Done.";
            };
            return ALL;
        };
        $main add-background $body after: 100;
    };
    result SELF;
};

defcommand guru-guru desc: "Demo background." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    message := "-";
    i := 0;
    (y x) ::= $main get-screen-size;
    body := {
        set message [
            case $message
                "-"  "/"
                "/"  "|"
                "|"  "\\"
                "\\" "-"
            ;;
        ];
        show-message [[$message . " "] repeat [$x / 2]];
        $i ++;
        if {$i < 100} {
            $main add-background $body after: 100;
        };
        return ALL;
    };
    $main add-background $body after: 100;
    result SELF;
};

defcommand guru-wave desc: "Demo background." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    c := "-";
    i := 0;
    (y x) ::= $main get-screen-size;
    body := {
        set c [
            case $c
                "-"   "\\"
                "\\"  "|"
                "|"   "/"
                "/"   "-"
            ;;
        ];
        message := "";
        c1 := $c;
        1 each to: [$x / 2] do: {
            set c1 [
                case $c1
                    "-"   "\\"
                    "\\"  "|"
                    "|"   "/"
                    "/"   "-"
                ;;
            ];
            $message append! $c1 " ";
        };
        show-message $message;
        $i ++;
        if {$i < 100} {
            $main add-background $body after: 100;
        };
        return ALL;
    };
    $main add-background $body after: 100;
    result SELF;
};

defcommand guru-animal desc: "Demo background." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    c := "😺";
    i := 0;
    (y x) ::= $main get-screen-size;
    body := {
        set c [
            case $c
                "😺"  "🐾"
                "🐾"  "🐼"
                "🐼"  "🐣"
                "🐣"  "😺"
            ;;
        ];
        message := "";
        c1 := $c;
        1 each to: [$x / 2] do: {
            set c1 [
                case $c1
                    "😺"  "🐾"
                    "🐾"  "🐼"
                    "🐼"  "🐣"
                    "🐣"  "😺"
                ;;
            ];
            $message append! $c1 " ";
        };
        show-message $message;
        $i ++;
        if {$i < 100} {
            $main add-background $body after: 100;
        };
        return ALL;
    };
    $main add-background $body after: 100;
    result SELF;
};

defcommand para-alphabet desc: "Demo background." {
    | main window |

    f ::= fun (l) {
        if [$l null?] else: {
            c ::= $l >>;
            show-message $c;
            $main add-background {
                $f $l;
                result ALL;
            } after: 100;
        };
    };
    $f ["abcdefghijklmnopqrstuvwxyz" split sep: ""];
    result ALL;
};

defcommand make-command-pdoc desc: "Make command pdoc template." {
    | main window |
    buff ::= $window get-buffer;
    command-name ::= $buff get-buffer-name : split sep: "." : get 0;
    $buff append-string "....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+....0";
    $buff append-string "";
    $buff append-string "【コマンド名】";
    $buff append-string ["\t" . $command-name];
    $buff append-string "";
    $buff append-string "【概要】";
    $buff append-string ["\t" . [get-command-desc $command-name]];
    $buff append-string "";
    $buff append-string "【説明】";
    $buff append-string "";
    $buff append-string "【現在のキーバインドを表示する】";
    $buff append-string ["\t[[?" . $command-name "]]"];
    $buff append-string "";
    $buff append-string "【キーバインド一覧に戻る】";
    $buff append-string "\t[[&key-binding-list]]";
    $buff append-string "";
    $buff append-string "【ヘルプに戻る】";
    $buff append-string "\t[[&help]]";
    $buff append-string "";
    $buff append-string "....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+....0";
    return ALL;
};

defcommand .nop desc: "Not operation command." {
    result NONE;
};
