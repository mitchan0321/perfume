# exec external process

load-class PollingManager;

defun exec (
    proc-enc: enc
    pty: pty
    err-to: errout
    args: args
    background: bg
    pid-proc: pproc
    verbose: vbody;
) {
    args ::= $args map {| i | "" . $i};
    command ::= $args >>;
    if {! [set? vbody]} {vbody := {}};

    if {set? pty} {
        d ::= dict [fork-exec :pty $command $args];
    } {
        d ::= dict [fork-exec $command $args];
    };

    pid := $d,pid;
    yield $vbody ["[exec] pid= " . $pid];
    if {set? pproc} {
        yield $pproc $pid;
    };

    ttin := $stdin;

    if {set? enc} else: {
        set enc UTF-8F;
    };

    out := $d,left;
    OUT ::= new File;
    $OUT set! $out mode: o;
    $OUT set-newline <t>;
    $OUT set-nobuffer;
    if {set? enc} {
        $OUT set-output-encoding $enc;
    };

    in := $d,right;
    IN ::= new File;
    $IN set! $in mode: i;
    $IN set-newline <nil>;
    $IN set-nobuffer;
    $IN set-ignore-cr <t>;
    $IN set-noblock <t>;
    $IN set-readbuffer-max 1024;
    if {set? enc} {
        $IN set-input-encoding $enc;
    };

    err := $d,error;
    ERR ::= new File;
    $ERR set! $err mode: i;
    $ERR set-newline <nil>;
    $ERR set-nobuffer;
    $ERR set-ignore-cr <t>;
    $ERR set-noblock <t>;
    $ERR set-readbuffer-max 1024;
    if {set? enc} {
        $ERR set-input-encoding $enc;
    };

    if {true? PipeObject} then: {
	$PipeObject set-term-hook [fun () {$IN close; $OUT close; $ERR close}];
    };

    status := 255;
    try {
	poll ::= new PollingManager;

	$poll set-exit-condition-block {
            sts := <nil>;
            try {
                sts ::= or [$ttin eof?] [$IN eof?] [$ERR eof?];
                if $sts {
                    yield $vbody ["[exec] " . "stdin: " [$ttin eof?] ", stdout: " [$IN eof?] ", stderr: " [$ERR eof?]];
                };
                ### result [and [$IN eof?] [$ERR eof?]];
            } catch: {
                sts := <t>;
            };
            result $sts;
	};
        
	$poll set-wait-block {
            if [$ttin eof?] {
                $OUT close;
                yield $vbody "[exec] $stdin closed, delivery close to OUT.";
            };
            if [$IN eof?] {
                $IN close;
                yield $vbody "[exec] $IN closed.";
            };
            if [$ERR eof?] {
                $ERR close;
                yield $vbody "[exec] $ERR closed.";
            };
            sts := <nil>;
            if {or {$ttin ready?} {$IN ready?} {$ERR ready?}} {
                sts := <t>;
            } {
                try {
                    (in out exp) ::= select ([$IN fd?] [$ERR fd?]) () () 5;
                } catch: {}
            };
            result $sts;
        };
	
	$poll add-event-queue (
	    {and [$ttin ready?] [$OUT ready?]} {
                i ::= $ttin gets;
                
		if $i {
		    $OUT puts $i;
		    $OUT flush;
		} {
		    $OUT close;
		};
	    }
	);
	
	$poll add-event-queue (
	    {$IN ready?} {
		i := <nil>;
                i ::= $IN gets;
		if $i {
                    if {dict [$IN stat] : get early-exit} {
                        $stdout puts :nonewline $i;
                    } {
                        $stdout puts $i;
                    };
		    $stdout flush;
		};
	    }
	);
	
	$poll add-event-queue (
	    {$ERR ready?} {
		i := <nil>;
                i ::= $ERR gets;
		if $i {
                    if {dict [$ERR stat] : get early-exit} {
                        if {set? errout} {
                            $errout puts :nonewline $i;
                        } {
                            $stderr puts :nonewline $i;
                        }
                    } {
                        if {set? errout} {
                            $errout puts $i;
                        } {
                            $stderr puts $i;
                        }
                    };
                    if {set? errout} {
                        $errout flush;
                    } {
                        $stderr flush;
                    }
		};
	    }
	);
	
	$poll event-loop;
    }
    
    fin: {
	try {$OUT close} catch: {};
	try {$IN  close} catch: {};
	try {$ERR close} catch: {};
        if {true? bg} {
            status := 0;
        } {
            status ::= wait $pid;
            if {$status = 255} then: {
                throw ErrExecProgram "Can\'t execute program." #'
            };
        };
    };

    return $status;
};
