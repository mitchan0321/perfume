class Window;

Window method init (curs) {
    set-curs $curs;
    init-constructor;
};

Window method init-constructor () {
    sets INIT <t>;
    sets WindowList ();
    sets CursWinMini <nil>;
    sets CreateWindowHook <nil>;
    sets BufferBinding [dict];
    sets MiniInput <nil>;
    sets KeyEvent ();
    sets MiniWindow <nil>;
    sets MiniInputSave <nil>;

    ## Callback for MiniWindow input method.
    ## MiniInputCallback list form is: (window closure)
    sets MiniInputCallback ();

    ### mini-input-end-hook
    sets MiniInputEndHook <nil>;

    ## Event loop exit flag
    sets EventLoopDone <nil>;

    ### Background
    sets Background [dict];
    $Background set @id 0;
    sets BackgroundAfterRemain [dict];

    ### interp state
    sets InterpBusy <nil>;

    ### read keymap file
    sets KeyMaps [dict];
    read-keymaps;
    
    ### command repeat
    sets LastCommand <nil>;
    sets LastCharacter "";
    sets RepeatTimes 0;
    
    ### keyboard macro record
    sets Recording <nil>;
    sets RecordingBuffer <nil>;
    
    ### force update screen
    sets ForceUpdate <nil>;
    
    ### mouse event;
    sets MouseEvent <nil>;
    sets MouseEvent_y 0;
    sets MouseEvent_x 0;
    sets MouseLastEvent_window <nil>;
    sets MouseLastEvent_y 0;
    sets MouseLastEvent_x 0;
};

Window method get-curs () {
    return $CursWin;
};

Window method set-curs (curs) {
    sets RootWin $curs;
    (y x) ::= curs-get-screen-size $RootWin;
    sets CursWin [curs-create-window $RootWin 0 0 [$y - 1] [$x - $ROOT_WINDOW_RIGHT_MARGIN]];
};

Window method get-screen-size () {
    return [curs-get-screen-size $RootWin];
};

Window method get-curs-mini () {
    return $CursWinMini;
};

Window method active? (win) {
    return [eq? [$WindowList : car] $win];
};

Window method create-minibuffer-window (orig) {
    (y x) ::= curs-get-screen-size $RootWin;
    sets CursWinMini [curs-new-window $RootWin [$y - 1] 0 1 [$x - $ROOT_WINDOW_RIGHT_MARGIN]];

    (l c) ::= curs-get-screen-size $CursWinMini;
    win ::= new MiniWindow init: ([self] 0 0 $l $c);

    sets MiniWindow $win;
    $MiniWindow set-window-name "MiniBuffer";
    if $orig {
        ### copy original MiniWindow properties.
        $MiniWindow set! PromptMessage  $orig,PromptMessage;
        $MiniWindow set! InputValue     $orig,InputValue;
        $MiniWindow set! InputIndex     $orig,InputIndex;
    };
    $MiniWindow diactivate;
    $MiniWindow refresh;
};

Window method create-full-window (window-name: win-name) {
    if {set? win-name} else: {
        win-name := "Window#1";
    };
    main ::= self;
    hook := {$main create-full-window-sub $win-name};
    add-create-window-hook $hook;
    $hook eval;
};

Window method create-full-window-sub (win-name) {
    orig-win ::= $WindowList clone;
    sets WindowList ();

    (l c) ::= curs-get-screen-size $CursWin;
    win ::= new CombiWindow init: ([self] 0 0 $l $c);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    if [$orig-win null?] {
        buff ::= $win get-buffer;
    } {
        buff ::= $orig-win car : get-buffer;
        $buff ?? {buff ::= $win get-buffer};
    };
    $MainWindow bind-buffer [$win get-window-name] $buff;
    $WindowList car : activate;
};

Window method create-split-vertical-window (div: ndivs window-name: win-name) {
    if {set? ndivs} else: {set ndivs 2};
    if {$ndivs < 2} then: {set ndivs 2};
    if {$ndivs > $MAX_WINDOW_DIVS} then: {set ndivs $MAX_WINDOW_DIVS};

    if {set? win-name} else: {
        win-name := "Window#1";
    };

    main ::= self;
    hook := {$main create-split-vertical-window-sub $ndivs $win-name};
    add-create-window-hook $hook;
    $hook eval;
};

Window method create-split-vertical-window-sub (ndivs win-name) {
    buff-list ::= get-buffer-list $win-name;
    sets WindowList ();
    
    (l c) ::= curs-get-screen-size $CursWin;
    c-orig := $c;
    c ::= [$c / $ndivs] real : * $VERTICAL_DIV_RATIO : int;
    if {$c < $MIN_WINDOW_WIDTH} {c := $MIN_WINDOW_WIDTH};
    w := 0;
    1 each to: $ndivs do: {| win-ord |
	if {$win-ord != $ndivs}
	then: {
	    win ::= new CombiWindow init: (
                [self]
                0   $w
                $l  [[$c >= [$c-orig - $w]] ??? [$c-orig - $w] $c]
            );
	}
	else: {
	    win ::= new CombiWindow init: (
                [self]
                0  $w
                $l [$c-orig - [$c * [$ndivs - 1]]]
            );
	};
        $win set-window-name $win-name;
        $WindowList <<- $win;
        win-name ::= next-window-name $win-name;
	
	w ::= $w + $c;
        if {[$c-orig - $w] < $MIN_WINDOW_WIDTH} {break};
    };

    if {[$WindowList len] > 1} {
        $WindowList cdr : each do: {| i | $i diactivate};
    };

    $WindowList each do: {| w |
        buff ::= $buff-list >>;
        $buff ?? {buff ::= $w get-buffer};
	$MainWindow bind-buffer [$w get-window-name] $buff;
    };
    $WindowList car : activate;
};

Window method create-split-horizontal-window (div: ndivs window-name: win-name) {
    if {set? ndivs} else: {set ndivs 2};
    if {$ndivs < 2} then: {set ndivs 2};
    if {$ndivs > $MAX_WINDOW_DIVS} then: {set ndivs $MAX_WINDOW_DIVS};

    if {set? win-name} else: {
        win-name := "Window#1";
    };

    main ::= self;
    hook := {$main create-split-horizontal-window-sub $ndivs $win-name};
    add-create-window-hook $hook;
    $hook eval;
};

Window method create-split-horizontal-window-sub (ndivs win-name) {
    buff-list ::= get-buffer-list $win-name;
    sets WindowList ();
    
    (l c) ::= curs-get-screen-size $CursWin;
    l-orig := $l;
    l ::= [$l / $ndivs] real : * $HORIZONTAL_DIV_RATIO : int;
    if {$l < $MIN_WINDOW_HEIGHT} {l := $MIN_WINDOW_HEIGHT};
    if {$l > $l-orig} {l := $l-orig};
    w := 0;
    1 each to: $ndivs do: {| win-ord |
	if {$win-ord != $ndivs}
	then: {
	    win ::= new CombiWindow init: (
                [self]
                $w                                              0
                [[$l >= [$l-orig - $w]] ??? [$l-orig - $w] $l]  $c
            );
	}
	else: {
	    win ::= new CombiWindow init: (
                [self]
                $w                              0
                [$l-orig - [$l * [$ndivs - 1]]] $c
            );
	};
        $win set-window-name $win-name;
        $WindowList <<- $win;
        win-name ::= next-window-name $win-name;
	
	w ::= $w + $l;
        if {[$l-orig - $w] < $MIN_WINDOW_HEIGHT} {break};
    };

    if {[$WindowList len] > 1} {
        $WindowList cdr : each do: {| i | $i diactivate};
    };

    $WindowList each do: {| w |
        buff ::= $buff-list >>;
        $buff ?? {buff ::= $w get-buffer};
	$MainWindow bind-buffer [$w get-window-name] $buff;
    };
    $WindowList car : activate;
};

Window method create-split-cross-window (window-name: win-name) {
    if {set? win-name} else: {
        win-name := "Window#1";
    };

    main ::= self;
    hook := {$main create-split-cross-window-sub $win-name};
    add-create-window-hook $hook;
    $hook eval;
};

Window method create-split-cross-window-sub (win-name) {
    buff-list ::= get-buffer-list $win-name;
    sets WindowList ();

    (l c) ::= curs-get-screen-size $CursWin;
    y0 := 0;
    y1 ::= [$l / 2] real : * $HORIZONTAL_DIV_RATIO : int;
    if {$y1 < $MIN_WINDOW_HEIGHT} {y1 := $MIN_WINDOW_HEIGHT};
    x0 := 0;
    x1 ::= [$c / 2] real : * $VERTICAL_DIV_RATIO : int;
    if {$x1 < $MIN_WINDOW_WIDTH} {x1 := $MIN_WINDOW_WIDTH};

    win ::= new CombiWindow init: ([self] 0 0 $y1 $x1);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    win ::= new CombiWindow init: ([self] 0 $x1 $y1 [$c - $x1]);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    if {[$l - $y1] >= $MIN_WINDOW_HEIGHT} {
        win ::= new CombiWindow init: ([self] $y1 0 [$l - $y1] $x1);
        $win set-window-name $win-name;
        $WindowList <<- $win;
    };
    
    win-name ::= next-window-name $win-name;
    if {and {[$l - $y1] >= $MIN_WINDOW_HEIGHT} {[$c - $x1] >= $MIN_WINDOW_WIDTH}} {
        win ::= new CombiWindow init: ([self] $y1 $x1 [$l - $y1] [$c - $x1]);
        $win set-window-name $win-name;
        $WindowList <<- $win;
    };

    $WindowList cdr : each do: {| i | $i diactivate};

    $WindowList each do: {| w |
        buff ::= $buff-list >>;
        $buff ?? {buff ::= $w get-buffer};
	$MainWindow bind-buffer [$w get-window-name] $buff;
    };
    $WindowList car : activate;
};

Window method create-split-tridivide1-window (window-name: win-name) {
    if {set? win-name} else: {
        win-name := "Window#1";
    };

    main ::= self;
    hook := {$main create-split-tridivide1-window-sub $win-name};
    add-create-window-hook $hook;
    $hook eval;
};

Window method create-split-tridivide2-window (window-name: win-name) {
    if {set? win-name} else: {
        win-name := "Window#1";
    };

    main ::= self;
    hook := {$main create-split-tridivide2-window-sub $win-name};
    add-create-window-hook $hook;
    $hook eval;
};

Window method create-split-tridivide3-window (window-name: win-name) {
    if {set? win-name} else: {
        win-name := "Window#1";
    };

    main ::= self;
    hook := {$main create-split-tridivide3-window-sub $win-name};
    add-create-window-hook $hook;
    $hook eval;
};

Window method create-split-tridivide4-window (window-name: win-name) {
    if {set? win-name} else: {
        win-name := "Window#1";
    };

    main ::= self;
    hook := {$main create-split-tridivide4-window-sub $win-name};
    add-create-window-hook $hook;
    $hook eval;
};

Window method create-split-tridivide1-window-sub (win-name) {
    buff-list ::= get-buffer-list $win-name;
    sets WindowList ();

    (l c) ::= curs-get-screen-size $CursWin;
    y0 := 0;
    y1 ::= [$l / 2] real : * $HORIZONTAL_DIV_RATIO : int;
    if {$y1 < $MIN_WINDOW_HEIGHT} {y1 := $MIN_WINDOW_HEIGHT};
    x0 := 0;
    x1 ::= [$c / 2] real : * $VERTICAL_DIV_RATIO : int;
    if {$x1 < $MIN_WINDOW_WIDTH} {x1 := $MIN_WINDOW_WIDTH};

    win ::= new CombiWindow init: ([self] 0 0 $y1 $x1);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    win ::= new CombiWindow init: ([self] 0 $x1 $y1 [$c - $x1]);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    if {[$l - $y1] >= $MIN_WINDOW_HEIGHT} {
        win ::= new CombiWindow init: ([self] $y1 0 [$l - $y1] $c);
        $win set-window-name $win-name;
        $WindowList <<- $win;
    };

    $WindowList cdr : each do: {| i | $i diactivate};

    $WindowList each do: {| w |
        buff ::= $buff-list >>;
        $buff ?? {buff ::= $w get-buffer};
	$MainWindow bind-buffer [$w get-window-name] $buff;
    };
    $WindowList car : activate;
};

Window method create-split-tridivide2-window-sub (win-name) {
    buff-list ::= get-buffer-list $win-name;
    sets WindowList ();

    (l c) ::= curs-get-screen-size $CursWin;
    y0 := 0;
    y1 ::= [$l / 2] real : * $HORIZONTAL_DIV_RATIO : int;
    if {$y1 < $MIN_WINDOW_HEIGHT} {y1 := $MIN_WINDOW_HEIGHT};
    x0 := 0;
    x1 ::= [$c / 2] real : * $VERTICAL_DIV_RATIO : int;
    if {$x1 < $MIN_WINDOW_WIDTH} {x1 := $MIN_WINDOW_WIDTH};

    win ::= new CombiWindow init: ([self] 0 0 $l $x1);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    win ::= new CombiWindow init: ([self] 0 $x1 $y1 [$c - $x1]);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    if {[$l - $y1] >= $MIN_WINDOW_HEIGHT} {
        win ::= new CombiWindow init: ([self] $y1 $x1 [$l - $y1] [$c - $x1]);
        $win set-window-name $win-name;
        $WindowList <<- $win;
    };

    $WindowList cdr : each do: {| i | $i diactivate};

    $WindowList each do: {| w |
        buff ::= $buff-list >>;
        $buff ?? {buff ::= $w get-buffer};
	$MainWindow bind-buffer [$w get-window-name] $buff;
    };
    $WindowList car : activate;
};

Window method create-split-tridivide3-window-sub (win-name) {
    buff-list ::= get-buffer-list $win-name;
    sets WindowList ();

    (l c) ::= curs-get-screen-size $CursWin;
    y0 := 0;
    y1 ::= [$l / 2] real : * $HORIZONTAL_DIV_RATIO : int;
    if {$y1 < $MIN_WINDOW_HEIGHT} {y1 := $MIN_WINDOW_HEIGHT};
    x0 := 0;
    x1 ::= [$c / 2] real : * $VERTICAL_DIV_RATIO : int;
    if {$x1 < $MIN_WINDOW_WIDTH} {x1 := $MIN_WINDOW_WIDTH};

    win ::= new CombiWindow init: ([self] 0 0 $y1 $c);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    win ::= new CombiWindow init: ([self] $y1 0 [$l - $y1] $x1);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    if {[$l - $y1] >= $MIN_WINDOW_HEIGHT} {
        win ::= new CombiWindow init: ([self] $y1 $x1 [$l - $y1] [$c - $x1]);
        $win set-window-name $win-name;
        $WindowList <<- $win;
    };

    $WindowList cdr : each do: {| i | $i diactivate};

    $WindowList each do: {| w |
        buff ::= $buff-list >>;
        $buff ?? {buff ::= $w get-buffer};
	$MainWindow bind-buffer [$w get-window-name] $buff;
    };
    $WindowList car : activate;
};

Window method create-split-tridivide4-window-sub (win-name) {
    buff-list ::= get-buffer-list $win-name;
    sets WindowList ();

    (l c) ::= curs-get-screen-size $CursWin;
    y0 := 0;
    y1 ::= [$l / 2] real : * $HORIZONTAL_DIV_RATIO : int;
    if {$y1 < $MIN_WINDOW_HEIGHT} {y1 := $MIN_WINDOW_HEIGHT};
    x0 := 0;
    x1 ::= [$c / 2] real : * $VERTICAL_DIV_RATIO : int;
    if {$x1 < $MIN_WINDOW_WIDTH} {x1 := $MIN_WINDOW_WIDTH};

    win ::= new CombiWindow init: ([self] 0 0 $y1 $x1);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    win ::= new CombiWindow init: ([self] $y1 0 [$l - $y1] $x1);
    $win set-window-name $win-name;
    $WindowList <<- $win;

    win-name ::= next-window-name $win-name;
    if {[$l - $y1] >= $MIN_WINDOW_HEIGHT} {
        win ::= new CombiWindow init: ([self] 0 $x1 $l [$c - $x1]);
        $win set-window-name $win-name;
        $WindowList <<- $win;
    };

    $WindowList cdr : each do: {| i | $i diactivate};

    $WindowList each do: {| w |
        buff ::= $buff-list >>;
        $buff ?? {buff ::= $w get-buffer};
	$MainWindow bind-buffer [$w get-window-name] $buff;
    };
    $WindowList car : activate;
};

Window method get-buffer-list (win-name) {
    buff-list := ();
    orig-win ::= get-window-by-name $win-name;
    1 each to: $MAX_WINDOW_DIVS do: {
        w ::= get-window-by-name $win-name;
        if $w {
            $buff-list <<- [$w get-buffer];
        } {
            if {$BufferBinding set? $win-name} {
                $buff-list <<- [$BufferBinding get $win-name];
            } {
                if $orig-win {
                    $buff-list <<- [$orig-win get-buffer];
                } {
                    $buff-list <<- <nil>;
                };
            };
        };
        win-name ::= next-window-name $win-name;
    };
    
    return $buff-list;
};

Window method next-window-name (win) {
    n ::= $win split sep: "#" : get 1 : int : + 1;
    if {$n > $MAX_WINDOW_DIVS} {n := 1};
    return ["Window#" . $n];
};

Window method get-window-by-name (window-name) {
    window := <nil>;
    $WindowList each do: {| i |
	if {[$i get-window-name] = $window-name} {
	    window := $i;
	    break;
	};
    };
    return $window;
};

Window method refresh () {
    if $MiniInput {
	try {$WindowList each do: {| w | $w refresh}} catch: {};
	get-current-window : apply {set-cursor; refresh};
	$MiniWindow refresh;
    } {
	$MiniWindow refresh;
	try {$WindowList each do: {| w | $w refresh}} catch: {};
	get-current-window : apply {set-cursor; refresh};
    };
};

Window method refresh-without-mini-window () {
    try {$WindowList each do: {| w | $w refresh}} catch: {};
    get-current-window : apply {set-cursor; refresh};
};

Window method display-window-message (win msg) {
    $WindowList . $MiniWindow : each do: {| i |
	if {[$i get-window-name] = $win} {
	    $i display $msg;
	    refresh;
	    return;
	};
    };
    ##### throw ErrNoSuchWindow ["No such window name '" . $win "'"];
};

Window method clear-window (win) {
    $WindowList . $MiniWindow : each do: {| i |
	if {[$i get-window-name] = $win} {
	    $i clear;
	    return;
	};
    };
};

Window method wipe-window () {
    $WindowList . $MiniWindow : each do: {| i |
        $i wipe;
    };
};

Window method get-minibuffer-window () {
    return $MiniWindow;
};

Window method get-current-window () {
    if $MiniInput {return $MiniWindow};
    return [$WindowList car];
};

Window method roll-current-window () {
    win ::= $WindowList >>;
    $WindowList <<- $win;
    try {$WindowList cdr : each do: {| i | $i diactivate}} catch: {};
    $WindowList car : activate;
    return [$WindowList car];
};

Window method roll-current-window-backward () {
    win ::= $WindowList ->>;
    $WindowList << $win;
    try {$WindowList cdr : each do: {| i | $i diactivate}} catch: {};
    $WindowList car : activate;
    return [$WindowList car];
};

Window method roll-to-window (window-name) {
    n ::= $WindowList map {| i | $i get-window-name} : find $window-name;
    $n ?? {return};

    if {$n = 0} else: {
        1 each to: $n do: {
	    win ::= $WindowList >>;
	    $WindowList <<- $win;
	};
    };
    try {$WindowList cdr : each do: {| i | $i diactivate}} catch: {};
    $WindowList car : activate;
    return [$WindowList car];
};

Window method next-buffer () {
    win := $WindowList,0;

    buff ::= BufferManager get-next-buffer [$win get-buffer];
    win-name ::= $win get-window-name;
    bind-buffer $win-name $buff;
};

Window method previous-buffer () {
    win := $WindowList,0;

    buff ::= BufferManager get-previous-buffer [$win get-buffer];
    win-name ::= $win get-window-name;
    bind-buffer $win-name $buff;
};

Window method bind-buffer (window-name buffer) {
    window := <nil>;
    $WindowList each do: {| i |
	if {[$i get-window-name] = $window-name} {
	    window := $i;
	    break;
	};
    };
    $window ?? {return};

    $BufferBinding set $window-name $buffer;
    $buffer set-raise;
    
    # Save window buffer geometory
    orig-buff ::= $window get-buffer;
    if $orig-buff {
	BufferManager set-buffer-geom $window-name [$orig-buff get-buffer-name];
    };

    # Restore window buffer geometory
    $buffer ?? {return};

    $window set-buffer $buffer;
    #### geom ::= BufferManager get-buffer-geom $window-name [$buffer get-buffer-name];
    BufferManager set-buffer-geom $window-name [$buffer get-buffer-name];

    mode ::= mode-select
        $window
        [$buffer get @name]
        [$buffer get-buffer-name]
        [$buffer get-buffer-mode]
        [$buffer get-path]
    ;;
    $window set-mode $mode;
    $window set-buffer-tab-width;
};

Window method unbind-buffer () {
    win-name ::= get-current-window : get-window-name;
    kill-buff ::= get-current-window : get-buffer;
    kill-buff-name ::= $kill-buff get-buffer-name;
    ### next-buff ::= BufferManager get-next-buffer $kill-buff;
    $kill-buff unregist-buffer;

    $BufferBinding unset $win-name;

    $WindowList each do: {| i |
	if {[$i get-buffer : get-buffer-name] = $kill-buff-name} {
            ### bind-buffer [$i get-window-name] $next-buff;
	    bind-buffer [$i get-window-name] [
                ### l ::= BufferManager get-buffer-list-split-order-by-newer;
                l ::= BufferManager get-buffer-list-order-by-newer;
                if {$l null?} {
                    BufferManager get-buffer <nil>;
                } {
                    BufferManager get-buffer [$l car];
                };
            ];
	};
    };
};

Window method delete-buffer (kill-buff) {
    kill-buff-name ::= $kill-buff get-buffer-name;
    $kill-buff unregist-buffer;

    $WindowList each do: {| i |
	if {[$i get-buffer : get-buffer-name] = $kill-buff-name} {
            ### bind-buffer [$i get-window-name] $next-buff;
	    bind-buffer [$i get-window-name] [
                l ::= BufferManager get-buffer-list-split-order-by-newer;
                if {$l null?} {
                    BufferManager get-buffer <nil>;
                } {
                    BufferManager get-buffer [$l car];
                };
            ];
	};
    };
};

Window method render-all () {
    $WindowList each do: {| i |
	$i render;
    };
};

Window method render (window-name) {
    window := <nil>;
    $WindowList each do: {| i |
	if {[$i get-window-name] = $window-name} {
	    window := $i;
	    break;
	};
    };
    $window ?? {return};
    
    $window render;
};

Window method add-create-window-hook (hook) {
    sets CreateWindowHook $hook;
};

Window method resize-window () {
    atomic {
        set buffer-bind [dict ()];
        $MiniWindow destroy;
        curs-destroy-window $CursWinMini;
        $WindowList each do: {| w |
            $buffer-bind set [$w get-window-name] [$w get-buffer];
            $w destroy;
        };
        roll-to ::= $WindowList car : get-window-name;
        sets WindowList ();
        curs-destroy-window $CursWin;
        
        (y x) ::= curs-get-screen-size $RootWin;
        sets CursWin [curs-create-window $RootWin 0 0 [$y - 1] [$x - $ROOT_WINDOW_RIGHT_MARGIN]];
        create-minibuffer-window $MiniWindow;
        if {block? $CreateWindowHook} {
            $CreateWindowHook eval;
        } {
            create-full-window;
        };
        
        $WindowList each do: {| w |
            win ::= $w get-window-name;
            $win ?? {return};
            buff ::= $buffer-bind get $win;
            $buff ?? {return};
            bind-buffer $win $buff;
        };
        roll-to-window $roll-to;
        sets INIT <nil>;
    };
};

Window method key-event-loop () {
    main ::= self;
    
    while {true} do: {
	if $EventLoopDone {break};

	window ::= $main get-current-window;
        keyin-list ::= keyin-proc $window;
        keyin-apply $main $window $keyin-list;
    };
};

Window method keyin-proc (window) {
    if {$KeyEvent null?} {
        try {
            (rtime i) ::= curs-keyin [$window get-curs] $INPUT_TIMEOUT $INPUT_ENCODING
                          blink: $BLINK blink-fact: $BLINK_FACT
            ;;
        } catch: {| e |
            show-message :bell ["Error at curs-keyin: <" . [$e car] "># " [$e cdr]];
            continue;
        };
        if $KEY_REPEAT_ACCEL_OFF {
            setconf KEY_REPEAT_ACCEL 1;
        } {
            setconf KEY_REPEAT_ACCEL [
                if {$rtime <= $KEY_REPEAT_ACCEL_DELAY}
                then: 1
                else: {
                    if {$rtime >= [$KEY_REPEAT_ACCEL_DELAY + $KEY_REPEAT_ACCEL_DURING_TO_MAX]}
                    then: {
                        [$KEY_REPEAT_ACCEL_MAXLINE > 0.0] ??? [$KEY_REPEAT_ACCEL_MAXLINE int] 1;
                    }
                    else: {
                        [$rtime - $KEY_REPEAT_ACCEL_DELAY] / $KEY_REPEAT_ACCEL_DURING_TO_MAX : * [$KEY_REPEAT_ACCEL_MAXLINE - 1.0] : int : + 2;
                    };
                };
            ];
        };
       
	if {curs-mouse?} { 
            ###
            ### mouse escape?
            ###
            if {eq? [$i get 0] KEY_MOUSE} {
                ### It is mouse event !!
                e ::= curs-get-mouse;
                if $e else: {return ()};
            
                s ::= curs-get-event-window [get-window-list : map {| i | $i get-curs}] $e,1 $e,2;
                if $s {
                    if [window-focus-at $s,0] {
                        ### if <t> focus change.
                        apply {render-all; refresh};
                        return ();
                    };
                    set-mouse-event $e,0 $s,1 $s,2;
                    send-mouse-event;
                    ###show-message ["Mouse event: " . $e,0 "," $s];
                    ###apply {render-all; refresh};
                };
                return ();
            };
        };

        if [$KeyMaps set? $i] {
            i ::= $KeyMaps get $i;
        };
    } {
        i := $KeyEvent;
        sets KeyEvent ();
    };
    
    return $i;
};

Window method keyin-apply (main window keyin-list) {
    if {$keyin-list null?} {
        update := <nil>;
        if {background-exists?} {
            try {
                result ::= exec-background;
                cond
                {eq? $result ALL} {
                    update := <t>;
                }
		;;
            } catch: {| e |
                show-message :bell ["Error at background: <" . [$e car] "># " [$e cdr]];
            };
        };
        
        sets ForceUpdate <nil>;
        try {
            TaskManager dispatch;
        } catch: {| e |
            TaskManager panic ["Error at TaskManager::dispatch: " . $e];
            show-message :bell "Error at TaskManager::dispatch, see *Console* buffer.";
        };
        
        if {or $ForceUpdate $update} {
            $main apply {render-all; refresh};
        };
        return;
    };

    cursor-update := <t>;
    setconf SMART_INDENT_CANCEL <nil>;
    $keyin-list each do: {| k |
        if {eq? $k KEY_RESIZE} {
            $main mini-input-end;
            $main resize-window;
            $main apply {render-all; refresh};
            window ::= $main get-current-window;
            continue;
        };
		
        if {input-ready?} {
            cursor-update := <nil>;
            setconf SMART_INDENT_CANCEL <t>;
        };

        window ::= $main get-current-window;
        result ::= $window apply-keybind $main $window $k;
        window ::= $main get-current-window;

        cond
        $cursor-update {
            ### if do brackets-pair in background, uncomment this.
            ### REM {
                $main add-background job-id: "00-BRACKETS" {
                    _result := NONE;
                    if {! [$main mini-input?]} {
                        if {eq? [$window get @name] CombiWindow} {
                            if {$window active?} {
                                $window apply-command $main $window <nil> brackets-pair;
                                _result := ALL;
                            };
                        };
                    };
                    result $_result;
                };
            ### }; # END REM

            ### if do brackets-pair in on-time, uncomment this.
            REM {
                if {! [$main mini-input?]} {
                    if {eq? [$window get @name] CombiWindow} {
                        if {$window active?} {
                            $window apply-command $main $window <nil> brackets-pair;
                        };
                    };
                };
            }; ### END REM
        }

        {and $cursor-update {eq? $result ALL}} {
            $main apply {render-all; refresh};
            if $MiniInput {$MiniWindow apply {render; refresh}};
        }

        {and $cursor-update {eq? $result SELF}} {
            window ::= $main get-current-window;
            $window apply {render; refresh};
        }
        ;;
    };

    if $cursor-update {
        window ::= $main get-current-window;
        $window set-cursor;
    };
    setconf SMART_INDENT_CANCEL <nil>;
};

Window method send-key-event (event-list) {
    $KeyEvent concat! $event-list;
};

Window method mini-input-start (init-value prompt: p index: index) {
    sets MiniInput <t>;
    sets MiniInputSave ([$WindowList,0 get-window-name] [$WindowList,0 get-buffer]);
    if {! [set? index]} {
        index ::= $init-value len;
    };
    
    if {set? p} {
	$MiniWindow mini-input-start $p $init-value index: $index;
    } {
	$MiniWindow mini-input-start "" $init-value index: $index;
    };
    $MiniWindow activate;
};

Window method get-window-list () {
    return $WindowList;
};

Window method get-window-list-without-current () {
    c ::= get-current-window;
    return [$WindowList filter {| i | ! [eq? $i $c]}];
};
    
Window method mini-input-callback (in-key value) {
    result := SELF;
    if {! [$MiniInputCallback null?]} {
	try {
	    result ::= yield $MiniInputCallback,1 $MainWindow $MiniInputCallback,0 $in-key $value;
	}
	catch: {| e |
	    show-message :bell ["Error happend at mini window input callback, <" . [$e car] "># " [$e cdr]];
            result := <nil>;
	};
    };

    return $result;
};

Window method mini-input-end () {
    sets MiniInput <nil>;
    sets MiniInputCallback ();
    if {list? $MiniInputSave} {
	bind-buffer $MiniInputSave,0 $MiniInputSave,1;
    };
    sets MiniInputSave <nil>;
    $MiniWindow diactivate;
    $MiniWindow clear;

    if {block? $MiniInputEndHook} {
        _body_ := $MiniInputEndHook;
        add-background after: 100 {
            try {
                $_body_ eval;
            } catch: {| e |
                show-message :bell ["Error happend at mini-input-end-hook, <" . [$e car] "># " [$e cdr]];
            };
            result ALL;
        };
        sets MiniInputEndHook <nil>;
    };
};

Window method set-mini-input-end-hook (hook) {
    if {block? $hook} {
        sets MiniInputEndHook $hook;
    } {
        sets MiniInputEndHook <nil>;
    };
};

Window method mini-input? () {
    return $MiniInput;
};

Window method mini-input-value-override (val index) {
    $MiniWindow mini-input-value $val $index;
};

Window method set-mini-input-prompt (prompt) {
    $MiniWindow set-prompt $prompt;
};

Window method add-mini-input-callback (window block) {
    sets MiniInputCallback ($window $block);
};

Window method exit-event-loop () {
    sets EventLoopDone <t>;
};

Window method add-background (body job-id: id after: msec) {
    if {! [set? id]} {
	int-id ::= $Background get @id : + 1;
	$Background set @id $int-id ;
	id ::= "%010d" fmt $int-id;
    };

    if {block? $body} {
	$Background set $id $body;
    };
    
    if {and {set? msec} {integer? $msec}} {
        $BackgroundAfterRemain set $id $msec;
    };
};

Window method exec-background () {
    # execute background execute candidate is
    # the passed remain time BackgroundAfterRemain($id)
    if {sets? TimeOfDayN1} else: {
        sets TimeOfDayN1 [time-of-day :msec];
        return;
    };
    
    dt ::= [time-of-day :msec] - $TimeOfDayN1;
    sets TimeOfDayN1 [time-of-day :msec];
    $BackgroundAfterRemain each do: {| k v |
        remain ::= $v - $dt;
        if {$remain <= 0} {
            $BackgroundAfterRemain unset $k;
        } {
            $BackgroundAfterRemain set $k $remain;
        };
    };

    # execute only one background,
    # order is sorted ascending by Background key.
    key-list ::= msort [$Background keys :string] : filter {| i | $i != "@id"};
    key := <nil>;
    $key-list each do: {| k |
        if {$BackgroundAfterRemain set? $k} {continue};
        key := $k;
        break;
    };
    $key ?? {return};
    
    body ::= $Background get $key;
    $Background unset $key;
    if {block? $body} {
        try {
            result ::= yield $body [self] [get-current-window];
        }
        catch: {| e |
            show-message :bell ["Error happend at background: " . $command ", <" [$e car] "># " [$e cdr]];
	    return <nil>;
        };
        return $result;
    };
    show-message :bell ["Incorrect background at: " . $command];
    return <nil>;
};

Window method background-exists? () {
    if {[$Background len] > 1} {
	return <t>;
    };
    return <nil>;
};

Window method set-interp-idle () {
    sets InterpBusy <nil>;
    refresh;
};

Window method set-interp-busy () {
    sets InterpBusy <t>;
    refresh;
};

Window method is-interp-busy () {
    true? InterpBusy;
};

Window method read-keymaps () {
    $LIB_PATH each do: {| i |
	if {file exists? [$i . "/pmacs.keymap"]} {
	    try {load :notrace [$i . "/pmacs.keymap"]} catch: {};
	    break;
	};
    };
};

Window method get-keymap (k) {
    return [$KeyMaps get $k];
};

Window method suspend (*) {
    curs-terminate;
    e := <nil>;
    try {
        call spawn $*;
    } catch: {| e |}
    ;
    cur ::= curs-init;
    set-curs $cur;
    resize-window;
    if $e {show-message :bell ["Execute error" . $e]};
};

Window method refresh-screen () {
    sets INIT <t>;
    curs-terminate;
    cur ::= curs-init;
    set-curs $cur;
    resize-window;
};

Window method get-init () {
    return $INIT;
};

Window method set-input (fd) {
    sets InputFd $fd;
};

Window method input-ready? () {
    if [false? InputFd] {return <nil>};
    if [$InputFd ready? timeout: $INPUT_TIMEOUT] {return <t>};
    return <nil>;
};

Window method set-last-command (c) {
    if {$IGNORE_REPEAT get $c} {
        return;
    };
    sets LastCommand $c;
};

Window method get-last-command () {
    return $LastCommand;
};

Window method set-last-character (c) {
    sets LastCharacter $c;
};

Window method get-last-character () {
    return $LastCharacter;
};

Window method set-repeat-times (t) {
    sets RepeatTimes $t;
};

Window method get-repeat-times () {
    r := $RepeatTimes;
    sets RepeatTimes 0;
    return $r;
};

Window method start-recording () {
    sets Recording <t>;
    $RecordingBuffer ?? {
        sets RecordingBuffer [new EditStream];
        $RecordingBuffer open "*Recording*";
    };
    if {BufferManager get-buffer-list : find "*Recording*"} 
    else: {
        BufferManager regist-buffer [get-record-buffer : get-buffer] "*Recording*"
    };

    buff ::= $RecordingBuffer get-buffer;
    $buff clear-all;
    show-message "Start recording.";
};

Window method start-recording-for-append () {
    sets Recording <t>;
    $RecordingBuffer ?? {
        sets RecordingBuffer [new EditStream];
        $RecordingBuffer open "*Recording*";
    };
    if {BufferManager get-buffer-list : find "*Recording*"} 
    else: {
        BufferManager regist-buffer [get-record-buffer : get-buffer] "*Recording*"
    };

    show-message "Start recording for append.";
};

Window method end-recording () {
    show-message "End recording.";
    sets Recording <nil>;
};

Window method recording? () {
    return $Recording;
};

Window method key-record (k c) {
    $Recording ?? {return};
    
    if {$IGNORE_RECORD get $k} {
        return;
    };
    show-message "Recording ...";
    if {eq? $k insert-character} {
        $RecordingBuffer puts ["" . $k " " $c];
    } {
        $RecordingBuffer puts ["" . $k];
    };
};

Window method get-record-buffer () {
    return $RecordingBuffer;
};

Window method set-force-update () {
    sets ForceUpdate <t>;
};

if {curs-mouse?} {
Window method window-focus-at (idx) {
    l ::= get-window-list : map {| i | $i get-window-name};
    if {$l,$idx = [get-current-window : get-window-name]} {return <nil>};
    roll-to-window $l,$idx;
    set-last-mouse-event <nil> 0 0;
    return <t>;
};

Window method set-mouse-event (event y x) {
    sets MouseEvent $event;
    sets MouseEvent_y $y;
    sets MouseEvent_x $x;
};

Window method get-mouse-event () {
    return ($MouseEvent $MouseEvent_y $MouseEvent_x);
};

Window method set-last-mouse-event (window y x) {
    sets MouseLastEvent_window $window;
    sets MouseLastEvent_y $y;
    sets MouseLastEvent_x $x;
};

Window method get-last-mouse-event () {
    return ($MouseLastEvent_window $MouseLastEvent_y $MouseLastEvent_x);
};

Window method send-mouse-event () {
    (event y x) ::= get-mouse-event;
    button := "";
    cond 
        {$event find BUTTON1_PRESSED}  {$button append! "MOUSE_Prs_1"; break}
        {$event find BUTTON2_PRESSED}  {$button append! "MOUSE_Prs_2"; break}
        {$event find BUTTON3_PRESSED}  {$button append! "MOUSE_Prs_3"; break}
        {$event find BUTTON4_PRESSED}  {$button append! "MOUSE_Prs_4"; break}
        {$event find BUTTON5_PRESSED}  {$button append! "MOUSE_Prs_5"; break}
        {$event find BUTTON1_RELEASED} {$button append! "MOUSE_Rel_1"; break}
        {$event find BUTTON2_RELEASED} {$button append! "MOUSE_Rel_2"; break}
        {$event find BUTTON3_RELEASED} {$button append! "MOUSE_Rel_3"; break}
        {$event find BUTTON4_RELEASED} {$button append! "MOUSE_Rel_4"; break}
        {$event find BUTTON5_RELEASED} {$button append! "MOUSE_Rel_5"; break}
    ;;
    if {$button = ""} {return <nil>};
    
    cond
        {$event find BUTTON_CTRL}      {$button append! "_CTRL"}
        {$event find BUTTON_ALT}       {$button append! "_ALT"}
    ;;
    
    if {$button != ""} {
        send-key-event ([symbol $button]);
        return $button;
    };

    return <nil>;
};
}; ### end mouse
