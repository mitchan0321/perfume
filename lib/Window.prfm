load-class :force CombiWindow;
load-class :force MiniWindow;

class Window;

Window method init (curs) {
    sets RootWin $curs;
    init-constructor;
};

Window method init-constructor () {
    sets WindowList ();
    $WindowList method string () {
	s := "";
	[self] each do: {| i |
	    $s append! [$i string];
	    $s append! "/";
	};
    };
    (y x) ::= curs-get-screen-size $RootWin;
    sets CursWin [curs-create-window $RootWin 0 0 [$y - 1] $x];
    sets CursWinMini [curs-create-window $RootWin [$y - 1] 0 1 $x];
};

Window method get-curs () {
    return $CursWin;
};

Window method get-curs-mini () {
    return $CursWinMini;
};

Window method create-minibuffer-window () {
    (l c) ::= curs-get-screen-size $CursWinMini;
    win ::= new MiniWindow init: ([self] 0 0 $l $c);

    sets MiniWindow $win;
    $MiniWindow set-window-name "MiniBuffer";
    $MiniWindow activate;
};

Window method add-window-resize-hook () {
};

Window method create-full-window () {
    (l c) ::= curs-get-screen-size $CursWin;
    win ::= new CombiWindow init: ([self] 0 0 $l $c);
    $win set-window-name "Window#1";
    $WindowList <<- $win;
    $WindowList car : activate;
};

Window method create-split-vertical-window (div: ndivs) {
    if {set? ndivs} else: {set ndivs 2};
    if {$ndivs < 2} then: {set ndivs 2};
    if {$ndivs > $MAX_WINDOW_DIVS} then: {set ndivs $MAX_WINDOW_DIVS};
    
    (l c) ::= curs-get-screen-size $CursWin;
    c-orig := $c;
    c ::= $c / $ndivs;
    w := 0;
    1 each to: $ndivs do: {| win-ord |
	if {$win-ord != $ndivs}
	then: {
	    win ::= new CombiWindow init: ([self] 0 $w $l $c);
	}
	else: {
	    win ::= new CombiWindow init: ([self] 0 $w $l [$c-orig - [$c * [$ndivs - 1]]]);
	};
	$win set-window-name ["Window#" . $win-ord];
	$WindowList <<- $win;
	
	w ::= $w + $c;
    };
    $WindowList car : activate;
    $WindowList cdr : each do: {| i | $i diactivate};
};

Window method create-split-horizontal-window (div: ndivs) {
    if {set? ndivs} else: {set ndivs 2};
    if {$ndivs < 2} then: {set ndivs 2};
    if {$ndivs > $MAX_WINDOW_DIVS} then: {set ndivs $MAX_WINDOW_DIVS};
    
    (l c) ::= curs-get-screen-size $CursWin;
    l-orig := $l;
    l ::= $l / $ndivs;
    w := 0;
    1 each to: $ndivs do: {| win-ord |
	if {$win-ord != $ndivs}
	then: {
	    win ::= new CombiWindow init: ([self] $w 0 $l $c);
	}
	else: {
	    win ::= new CombiWindow init: ([self] $w 0 [$l-orig - [$l * [$ndivs - 1]]] $c);
	};
	$win set-window-name ["Window#" . $win-ord];
	$WindowList <<- $win;
	
	w ::= $w + $l;
    };
    $WindowList car : activate;
    $WindowList cdr : each do: {| i | $i diactivate};
};

Window method refresh () {
    $MiniWindow refresh;
    try {$WindowList cdr : each do: {| w | $w refresh}} catch: {};
    get-current-window : apply {set-cursor; refresh};
};

Window method display-window-message (win msg) {
    $WindowList . $MiniWindow : each do: {| i |
	if {[$i get-window-name] = $win} {
	    $i display $msg;
	    return;
	};
    };
    ##### throw ErrNoSuchWindow ["No such window name '" . $win "'"];
};

Window method clear-window (win) {
    $WindowList . $MiniWindow : each do: {| i |
	if {[$i get-window-name] = $win} {
	    $i clear;
	    return;
	};
    };
};

Window method get-minibuffer-window () {
    return $MiniWindow;
};

Window method get-current-window () {
    return [$WindowList car];
};

Window method roll-current-window () {
    win ::= $WindowList >>;
    $WindowList <<- $win;
    $WindowList car : activate;
    try {$WindowList cdr : each do: {| i | $i diactivate}} catch: {};
    return [$WindowList car];
};

Window method roll-buffer () {
    win := $WindowList,0;

    buff ::= BufferManager get-next-buffer [$win get-buffer];
    win-name ::= $win get-window-name;
    bind-buffer $win-name $buff;
};

Window method bind-buffer (window-name buffer) {
    buffer-name ::= $buffer get-buffer-name;
    window := <nil>;
    $WindowList each do: {| i |
	if {[$i get-window-name] = $window-name} {
	    window := $i;
	    break;
	};
    };
    ##### $window ?? {throw ErrNoSuchWindow ["No such window name '" . $window-name "'"]};
    $window ?? {return};

    $window set-buffer $buffer;
    BufferManager set-buffer-geom $window-name [$buffer get-buffer-name];
};

Window method render-all () {
    $WindowList each do: {| i |
	$i render;
    };
};

Window method render (window-name) {
    window := <nil>;
    $WindowList each do: {| i |
	if {[$i get-window-name] = $window-name} {
	    window := $i;
	    break;
	};
    };
    ##### $window ?? {throw ErrNoSuchWindow ["No such window name '" . $window-name "'"]};
    $window ?? {return};
    
    $window render;
};
