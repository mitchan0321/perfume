###
### Pmacs editor dired command definition.
###

defcommand dired desc: "Open dired buffer." {
    | main window |
    dired-open $main $window [pwd];
    return ALL;
};

defun dired-open (main window dir) {
    buff ::= BufferManager get-buffer-by-path $dir;
    if $buff {
        $buff update;
        $main bind-buffer [$window get-window-name] $buff;
        return $buff;
    };
    buff ::= new DiredBuffer;
    $buff load-content $dir;
    $main bind-buffer [$window get-window-name] $buff;
    return $buff;
};

defcommand dired-open desc: "Open file or directory at cursor point file on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            name ::= $l get 1;
            path ::= $buff get-path;
            path ::= $path ?? [pwd];
            if {$path = "/"} {
                path ::= path-adjust ["/" . $name];
            } {
                path ::= path-adjust [$path . "/" $name];
            };
            (stat path message) ::= get-path-condition $path;
            case $stat
                DIRECTORY {
                    new-buff ::= dired-open $main $window $path;
                    $new-buff set-previous-buffer [$buff get-buffer-name];
                    return ALL;
                }
                REGULAR  {
                    ### fall throw
                }
                NOEXISTS {
                    ### fall throw
                }
                default: {
                    show-message :bell ["File not open: " . $message];
                    return ALL;
                }
            ;;

            buff ::= BufferManager get-buffer-by-path $path;
            if $buff {
                $main bind-buffer [$window get-window-name] $buff;
                return SELF;
            };
            buff ::= new EditBuffer;
            (result err) ::= $buff load-content $path;
            if {$buff enc-error?} {
                show-message :bell "File decode error occured!! Try ALT-e and specify another encoding for re-load.";
            };
            $main bind-buffer [$window get-window-name] $buff;
            $result ?? {show-message :bell ["Open Failed, path: " . $path " ("  $err ")"]};
        };
    };
    return ALL;
};

defcommand dired-open-next-window desc: "Open file or directory at cursor point file with next window." {
    | main window |
    cwin ::= $main get-current-window;
    if {$main get-window-list : len : <= 1} {
        $main create-split-vertical-window window-name: [$cwin get-window-name];
    };
    owin ::= $main get-window-list-without-current : car;
    dired-open-other-window $main $window $owin <t>;
};

defcommand dired-open-previous-window desc: "Open file or directory at cursor point file with previous window." {
    | main window |
    cwin ::= $main get-current-window;
    if {$main get-window-list : len : <= 1} {
        $main create-split-vertical-window window-name: [$cwin get-window-name];
    };
    owin ::= $main get-window-list-without-current : last : car;
    dired-open-other-window $main $window $owin <nil>;
};

defun dired-open-other-window (main window owin forward) {
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            name ::= $l get 1;
            path ::= $buff get-path;
            path ::= $path ?? [pwd];
            if {$path = "/"} {
                path ::= path-adjust ["/" . $name];
            } {
                path ::= path-adjust [$path . "/" $name];
            };

            (stat path message) ::= get-path-condition $path;
            case $stat
                DIRECTORY {
                    ### fall throw
                }
                REGULAR  {
                    ### fall throw
                }
                NOEXISTS {
                    ### fall throw
                }
                default: {
                    show-message :bell ["File not open: " . $message];
                    return ALL;
                }
            ;;
            
            case $stat
                DIRECTORY {
                    new-buff ::= dired-open $main $owin $path;
                    $new-buff set-previous-buffer [$buff get-buffer-name];
                    if $forward {
                        $main roll-current-window;
                    } {
                        $main roll-current-window-backward;
                    };
                    return ALL;
                }
            ;;

            buff ::= BufferManager get-buffer-by-path $path;
            if $buff {
                $main bind-buffer [$owin get-window-name] $buff;
                if $forward {
                    $main roll-current-window;
                } {
                    $main roll-current-window-backward;
                };
                return ALL;
            };
            buff ::= new EditBuffer;
            (result err) ::= $buff load-content $path;
            if {$buff enc-error?} {
                show-message :bell "File decode error occured!! Try ALT-e and specify another encoding for re-load.";
            };
            $main bind-buffer [$owin get-window-name] $buff;
            $result ?? {
                show-message :bell ["Open Failed, path: " . $path " ("  $err ")"];
                return ALL;
            };
            if $forward {
                $main roll-current-window;
            } {
                $main roll-current-window-backward;
            };
        };
    };
    return ALL;
};

defcommand dired-link-back desc: "Back to previous dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    prev-buff-name ::= $buff get-previous-buffer;
    if $prev-buff-name {
        prev-buff ::= BufferManager find-buffer $prev-buff-name;
        if $prev-buff {
            $main bind-buffer [$window get-window-name] $prev-buff;
        } {
            show-message :bell ["No found previous buffer, \'" . $prev-buff-name "\'."];
        };
    } {
        show-message :bell "No set previous buffer.";
    };
    result ALL;
};

defcommand dired-cursor-up desc: "Move cursor up on dired buffer." {
    | main window |
    $window move-up;
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            $geom set! IndexColumn.SAVE [[$l get 0 : len] + 1];
            $window set-freecursor <nil>;
        };
    };
    return ALL;
};

defcommand dired-cursor-down desc: "Move cursor down on dired buffer." {
    | main window |
    $window move-down;
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            $geom set! IndexColumn.SAVE [[$l get 0 : len] + 1];
            $window set-freecursor <nil>;
        };
    };
    return ALL;
};

defcommand dired-sort-by-name-ascending desc: "Sort by file name ascending on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    $buff set-sort-order "n";
    $buff update;
    return ALL;
};

defcommand dired-sort-by-name-descending desc: "Sort by file name descending on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    $buff set-sort-order "N";
    $buff update;
    return ALL;
};

defcommand dired-sort-by-time-ascending desc: "Sort by file timestamp ascending on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    $buff set-sort-order "t";
    $buff update;
    return ALL;
};

defcommand dired-sort-by-time-descending desc: "Sort by file timestamp descending on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    $buff set-sort-order "T";
    $buff update;
    return ALL;
};

defcommand dired-sort-by-size-ascending desc: "Sort by file size ascending on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    $buff set-sort-order "s";
    $buff update;
    return ALL;
};

defcommand dired-sort-by-size-descending desc: "Sort by file size descending on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    $buff set-sort-order "S";
    $buff update;
    return ALL;
};

defcommand dired-filter desc: "Set dired file name filter." {
    | main window |
    buff ::= $window get-buffer;
    
    mini-input-until-enter $main $window 
        init-value: [$buff get-filter : string]
        prompt: "Filter: "
        enter-proc: {| value |
            $buff set-filter [$value rquote];
            $buff update;
            return ALL;
        }
    ;;
    
    return ALL;
};

defcommand dired-rename-file desc: "Rename file on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            name ::= $l get 1;
            path ::= $buff get-path;
            path ::= $path ?? [pwd];
            if {$path = "/"} {
                path ::= path-adjust ["/" . $name];
            } {
                path ::= path-adjust [$path . "/" $name];
            };
            mini-input-until-enter $main $window
                init-value: $path
                prompt: "Rename to: "
                enter-proc: {| value |
                    if [file exists? $value] {
                        mini-input-fully-yes-or-no $main $window
                            prompt: ["Target file (" . $value ") is exists. Really move? [yes or ESC]: "]
                            yes-proc: {
                                $buff clear-mark $name;
                                file rename $path $value;
                                $buff update;
                            }
                        ;;
                    } {
                        $buff clear-mark $name;
                        file rename $path $value;
                        $buff update;
                    };
                }
            ;;
        };
    };
    return ALL;
};

defcommand dired-delete-file desc: "Delete file on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            name ::= $l get 1;
            path ::= $buff get-path;
            path ::= $path ?? [pwd];
            if {$path = "/"} {
                path ::= path-adjust ["/" . $name];
            } {
                path ::= path-adjust [$path . "/" $name];
            };
            mini-input-fully-yes-or-no $main $window
                prompt: ["Really delete file? (" . [$path split sep: "/" : last : get 0] ") [yes or ESC]: "]
                yes-proc: {
                    $buff clear-mark $name;
                    file rm $path;
                    $buff update;
                }
            ;;
        };
    };
    return ALL;
};

defcommand dired-mark-file desc: "Mark specified file on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            name ::= $l get 1;
            $buff toggle-mark $name;
            $buff update;
        };
    };
    return ALL;
};

defcommand dired-delete-marked-files desc: "Delete marked files on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    files ::= $buff get-marked-files : filter {| i | [or {$i = "."} {$i = ".."}] ??? <nil> $i};
    if [$files null?] {
        show-message "No marked files.";
        return ALL;
    };
    dir ::= $buff get-path;
    $dir ?? {
        show-message "No set content path at Dired buffer.";
        return ALL;
    };
    
    mini-input-fully-yes-or-no $main $window
        prompt: ["Really delete marked " . [$files len] " files? [yes or ESC]: "]
        yes-proc: {
            cant-del := "";
            $files each do: {| i |
                try {
                    file rm [$dir . "/" $i];
                } catch: {
                    if {$cant-del != ""} {
                        $cant-del append! ", ";
                    };
                    $cant-del append! $i;
                };
            };
            $buff clear-mark-all;
            $buff update;
            if {$cant-del != ""} {
                show-message :bell ["Can't delete files: " . $cant-del];
            };
        }
        keyin-proc: {| value in-key |
            if {eq? $in-key KEY_DOWN} {
                $window apply-command $main $window "" smooth-scroll-down;
                return ALL;
            };
            if {or {eq? $in-key kDN5} {eq? $in-key KEY_NPAGE}} {
                $window apply-command $main $window "" half-next-page;
                return ALL;
            };
            if {eq? $in-key KEY_UP} {
                $window apply-command $main $window "" smooth-scroll-up;
                return ALL;
            };
            if {or {eq? $in-key kUP5} {eq? $in-key KEY_PPAGE}} {
                $window apply-command $main $window "" half-previous-page;
                return ALL;
            };
        }
    ;;
        
    return ALL;
};

defcommand dired-update-window desc: "Update dired window." {
    | main window |
    buff ::= $window get-buffer;
    $buff update;
    return ALL;
};

defcommand dired-clear-all-marks desc: "Clear dired all marks." {
    | main window |
    buff ::= $window get-buffer;
    $buff clear-mark-all;
    $buff update;
    return ALL;
};

defcommand dired-change-mode desc: "Change mode file on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            name ::= $l get 1;
            path ::= $buff get-path;
            path ::= $path ?? [pwd];
            if {$path = "/"} {
                path ::= path-adjust ["/" . $name];
            } {
                path ::= path-adjust [$path . "/" $name];
            };
            mode ::= [file rstat $path : assoc-value mode] && 0o7777;
            mini-input-until-enter $main $window
                prompt: ["Change file mode \"" . [$path split sep: "/" : last : get 0] "\" (Octal): "]
                init-value: ["%04o" fmt $mode]
                enter-proc: {| value |
                    try {
                        file chmod $path ["0o" .  $value : int];
                    } catch: {
                        show-message :bell "Bad mode specified.";
                    };
                    $buff update;
                }
            ;;
        };
    };
    return ALL;
};

defcommand dired-delete-dir desc: "Delete directory on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            name ::= $l get 1;
            path ::= $buff get-path;
            path ::= $path ?? [pwd];
            if {$path = "/"} {
                path ::= path-adjust ["/" . $name];
            } {
                path ::= path-adjust [$path . "/" $name];
            };
            mini-input-fully-yes-or-no $main $window
                prompt: ["Really delete directory? (" . [$path split sep: "/" : last : get 0] ") [yes or ESC]: "]
                yes-proc: {
                    file rmdir $path;
                    $buff update;
                }
            ;;
        };
    };
    return ALL;
};

defcommand dired-make-dir desc: "Make directory on dired buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    path ::= $buff get-path;
    path ::= $path ?? [pwd];
    mini-input-until-enter $main $window
    prompt: "New directory name: "
    enter-proc: {| value |
        file mkdir [$path . "/" $value] $DEFAULT_DIR_MODE;
        $buff update;
    };
    return ALL;
};

defcommand dired-copy-link desc: "Copy file path to copy buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    if $r {
        l ::= $r split sep: "|";
        if {[$l len] >= 2} {
            name ::= $l get 1;
            path ::= $buff get-path;
            path ::= $path ?? [pwd];
            if {$path = "/"} {
                path ::= path-adjust ["/" . $name];
            } {
                path ::= path-adjust [$path . "/" $name];
            };
            $window set-copy-buffer ["\"" . $path "\""];
            show-message "Copied.";
        };
    };
    return ALL;
};
