defcommand roll-current-window
{   | main window |
    $main roll-current-window;
    result ALL;
};

defcommand full-window
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-full-window window-name: $name};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-vertical-window
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-vertical-window window-name: $name};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-vertical-window-3
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-vertical-window window-name: $name div: 3};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-vertical-window-4
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-vertical-window window-name: $name div: 4};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-horizontal-window
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-horizontal-window window-name: $name};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-horizontal-window-3
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-horizontal-window window-name: $name div: 3};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-horizontal-window-4
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-horizontal-window window-name: $name div: 4};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-cross-window
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-cross-window window-name: $name};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand roll-buffer
{   | main window |
    $main roll-buffer;
    result ALL;
};

defcommand next-page
{   | main window |
    $window page-down;
    result SELF;
};

defcommand previous-page
{   | main window |
    $window page-up;
    result SELF;
};

defcommand cursor-down
{   | main window |
    $window move-down;
    result SELF;
};

defcommand cursor-up
{   | main window |
    $window move-up;
    result SELF;
};

defcommand cursor-right
{   | main window |
    $window move-right;
    result SELF;
};

defcommand cursor-left
{   | main window |
    $window move-left;
    result SELF;
};

defcommand move-half-up
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-screen-size;

    $window set-freecursor <t>;
    new-y ::= $geom,ViewLine + [$y / 2];
    if {$new-y > [[$buff get-buffer-length] - $y : + 1]} {new-y ::= [$buff get-buffer-length] - $y : + 1};
    if {$new-y < 0} {new-y := 0};
    $geom set! ViewLine $new-y;
    
    result SELF;
};

defcommand move-half-down
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-screen-size;

    $window set-freecursor <t>;
    new-y ::= $geom,ViewLine - [$y / 2];
    if {$new-y < 0} {
        new-y := 0;
    };
    $geom set! ViewLine $new-y;
    
    result SELF;
};

defcommand move-half-right
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-screen-size;

    $window set-freecursor <t>;
    new-x ::= $geom,ViewColumn + [$x / 4];
    $geom set! ViewColumn $new-x;

    result SELF;
};

defcommand move-half-left
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-screen-size;

    $window set-freecursor <t>;
    new-x ::= $geom,ViewColumn - [$x / 4];
    if {$new-x < 0} {new-x := 0};
    $geom set! ViewColumn $new-x;

    result SELF;
};

defcommand cursor-top-of-line
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;

    $window set-freecursor <nil>;
    $geom set! ViewColumn 0;
    $geom set! CursorColumn 0;
    $geom set! IndexColumn.SAVE 0;
    (y x) ::= $window get-screen-size;
    $window fit-to-cursor $geom $y $x;    

    result SELF;
};

defcommand cursor-end-of-line
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (cy cx) ::= $window get-source-index $buff $geom;
    cx ::= $buff get-buffer-line $cy : len;
    (line col) ::= $window get-cursor-index $buff $cy $cx;

    $window set-freecursor <nil>;
    $geom set! CursorColumn [$col - $geom,ViewColumn];
    $geom set! IndexColumn.SAVE $col;
    (y x) ::= $window get-screen-size;
    $window fit-to-cursor $geom $y $x;
    
    result SELF;
};

defcommand show-character-code
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (cy cx) ::= $window get-source-index $buff $geom;
    s ::= $buff get-buffer-line $cy;
    $s ?? {
	show-message "No character.";
	return SELF;
    };
    c ::= $s sub $cx [$cx + 1];
    if {$c != ""} {
	i ::= $c uexport : car;
	show-message ["Code: %v[u+%x]" fmt $i $i];
    } {
	show-message "No character."
    };
    
    result SELF;
};

defcommand input-character-code
{   | main window |
    $main mini-input-start "" prompt: "Input character code: u+";
    $main add-mini-input-callback $window {| main window in-key value |
        if {eq? $in-key KEY_ESC} {
	    $main mini-input-end;
	    show-message "Canceled.";
	};
        if {eq? $in-key CTRL_M} {
	    $main mini-input-end;
	    try {i ::= ["0x" . $value] int} catch: {
		show-message "Bad hexadecimal.";
		return SELF;
	    };
	    $window insert-string ["" uimport! ($i)];
	};
    };
    result SELF;
};

defcommand insert-character
{   | main window key |
    $window insert-string $key;
    result ALL;
};

defcommand insert-tab
{   | main window |
    $window insert-string "\t";
    result ALL;
};

defcommand insert-return
{   | main window |
    $window insert-string "\r";
    result ALL;
};

defcommand delete-character
{   | main window |
    $window delete-character;
    result ALL;
};

defcommand backdelete-character
{   | main window |
    $window backdelete-character;
    result ALL;
};

defcommand execute-command
{   | main window |
    $main mini-input-start "" prompt: "Command: ";
    $main add-mini-input-callback $window {| main window in-key value |
        if {eq? $in-key KEY_ESC} {
	    $main mini-input-end;
	    show-message "Canceled.";
	};
        if {eq? $in-key CTRL_M} {
	    $main mini-input-end;
	    try {
	        result ::= $value eval;
	        show-message ["Command result: " . [$result string]];
            } catch: {| e |
		show-message ["<" . [$e car ] "># " [$e cdr]];
	    };
	};
    };
    result ALL;
};

defcommand refresh-screen
{   | main window |
    $main send-key-event (KEY_RESIZE);
};

defcommand open-file
{   | main window |
    $main mini-input-start "" prompt: "Open file: ";
    $main add-mini-input-callback $window {| main window in-key value |
        if {eq? $in-key KEY_ESC} {
	    $main mini-input-end;
	    show-message "Canceled.";
	};
        if {eq? $in-key CTRL_M} {
	    $main mini-input-end;
	    if {[$value len] = 0} {
		show-message "No file name specified.";
	    };
	    buff ::= new EditBuffer;
	    result ::= $buff load-content [pwd : . "/" $value];
	    $MainWindow bind-buffer [$window get-window-name] $buff;
	    $result ?? {show-message ["New file: " . $value]};
	};
    };
    result ALL;
};

defcommand miniwindow-input-sample
{   | main window |
    $main mini-input-start "" prompt: "test prompt: ";
    $main add-mini-input-callback $window {| main window in-key value |
        if {eq? $in-key KEY_ESC} {
	    $main mini-input-end;
	    debug-message ["input data: " . $value];
	};
    };
    result ALL;
};

###
### REMARK, Spare for new editor command making.
REM {

defcommand 
{   | main window |
};

};
### END REMARK
###

