defcommand roll-current-window
{   | main window |
    $main roll-current-window;
    result ALL;
};

defcommand full-window
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-full-window window-name: $name};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-vertical-window
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-vertical-window window-name: $name};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-vertical-window-3
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-vertical-window window-name: $name div: 3};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-vertical-window-4
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-vertical-window window-name: $name div: 4};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-horizontal-window
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-horizontal-window window-name: $name};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-horizontal-window-3
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-horizontal-window window-name: $name div: 3};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-horizontal-window-4
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-horizontal-window window-name: $name div: 4};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand split-cross-window
{   | main window |
    name ::= $window get-window-name;
    $main add-create-window-hook {$main create-split-cross-window window-name: $name};
    $main send-key-event (KEY_RESIZE);
    result ALL;
};

defcommand roll-buffer
{   | main window |
    $main roll-buffer;
    result ALL;
};

defcommand next-page
{   | main window |
    $window page-down;
    result SELF;
};

defcommand previous-page
{   | main window |
    $window page-up;
    result SELF;
};

defcommand cursor-down
{   | main window |
    $window move-down;
    result SELF;
};

defcommand cursor-up
{   | main window |
    $window move-up;
    result SELF;
};

defcommand cursor-right
{   | main window |
    $window move-right;
    result SELF;
};

defcommand cursor-left
{   | main window |
    $window move-left;
    result SELF;
};

defcommand move-half-up
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-screen-size;

    $window set-freecursor <t>;
    new-y ::= $geom,ViewLine + [$y / 2];
    if {[$new-y + $y] > [$buff get-buffer-length]} {
	new-y ::= [$buff get-buffer-length] - $y;
    };
    $geom set! ViewLine $new-y;

    result SELF;
};

defcommand move-half-down
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-screen-size;

    $window set-freecursor <t>;
    new-y ::= $geom,ViewLine - [$y / 2];
    if {$new-y < 0} {
        new-y := 0;
    };
    $geom set! ViewLine $new-y;

    result SELF;
};

defcommand move-half-right
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-screen-size;

    $window set-freecursor <t>;
    new-x ::= $geom,ViewColumn + [$x / 3];
    $geom set! ViewColumn $new-x;

    result SELF;
};

defcommand move-half-left
{   | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-screen-size;

    $window set-freecursor <t>;
    new-x ::= $geom,ViewColumn - [$x / 3];
    if {$new-x < 0} {new-x := 0};
    $geom set! ViewColumn $new-x;

    result SELF;
};


defcommand insert-character
{   | main window key |
    $window insert-string $key;
    result ALL;
};

defcommand insert-tab
{   | main window |
    $window insert-string "\t";
    result ALL;
};

defcommand insert-return
{   | main window |
    $window insert-string "\r";
    result ALL;
};

defcommand delete-character
{   | main window |
    $window delete-character;
    result ALL;
};

defcommand backdelete-character
{   | main window |
    $window backdelete-character;
    result ALL;
};

defcommand execute-command
{   | main window |
    $main mini-input-start "" prompt: "Command: ";
    $main add-mini-input-callback $window {| main window in-key value |
        if {eq? $in-key CTRL_M} {
	    $main mini-input-end;

	    try {
	        result ::= $value eval;
	        show-message ["Command result: " . [$result string]];
            } catch: {| e |
		show-message ["<" . [$e car ] "># " [$e cdr]];
	    };
	};
    };
    result ALL;
};

defcommand refresh-screen
{   | main window |
    $main send-key-event (KEY_RESIZE);
};

defcommand miniwindow-input-sample
{   | main window |
    $main mini-input-start "" prompt: "test prompt: ";
    $main add-mini-input-callback $window {| main window in-key value |
        if {eq? $in-key KEY_ESC} {
	    $main mini-input-end;
	    debug-message ["input data: " . $value];
	};
    };
    result ALL;
};


###
### START REMARK, for spare
###
REM {
defcommand 
{   | main window |
};

defcommand 
{   | main window |
};

defcommand 
{   | main window |
};

defcommand 
{   | main window |
};

defcommand 
{   | main window |
};
};
###
### END REMARK
###
