load-class :force BufferManager;
load-class :force EditBuffer;
load-class :force Window;
load-class :force WindowBase;
load-class :force WUtil;
load-class :force BufferGeom;

defun pmacs () {
    try {
	defvar MainWindow [new Window init: ([curs-init])];
	WUtil init;
	
	$MainWindow create-minibuffer-window;
	
#        $MainWindow create-full-window;
#        $MainWindow create-split-vertical-window;
        $MainWindow create-split-vertical-window div: 3;
#        $MainWindow create-split-horizontal-window;
#        $MainWindow create-split-horizontal-window div: 2;

	$MainWindow roll-current-window;

        $MainWindow display-window-message "MiniBuffer" "Hello";
#	$MainWindow display-window-message "Window#1" "Hello Window#1\nabcdeあいうえお";
#	$MainWindow display-window-message "Window#2" "Hello Window#2\nabcdeあいうえお";
#	$MainWindow display-window-message "Window#3" "Hello Window#3\nabcdeあいうえお";
#	$MainWindow display-window-message "Window#1" [$MainWindow get WindowList : string];

        $MainWindow bind-buffer "Window#1" [new EditBuffer];

	$MainWindow refresh;
	sleep 100000;
    }
    fin: {
	curs-terminate;
	undef MainWindow;
    }
    catch: {| e |
	__error_info__ ::= "ERROR: <" . [$e car] "># " [$e cdr] "\n\n" $@stack-trace;
    }
    ;

    if {set? __error_info__} then: {println file: $stderr $__error_info__};
};
