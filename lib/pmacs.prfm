load-class :force BufferManager;
load-class :force EditBuffer;
load-class :force Window;
load-class :force WindowBase;
load-class :force WUtil;
load-class :force BufferGeom;

defun pmacs () {
    try {
	defvar MainWindow [new Window init: ([curs-init])];
	BufferManager init;
	WUtil init;
	
	$MainWindow create-minibuffer-window;
	
	# $MainWindow create-full-window;
	# $MainWindow create-split-vertical-window;
        $MainWindow create-split-vertical-window div: 2;
	# $MainWindow create-split-horizontal-window;
	# $MainWindow create-split-horizontal-window div: 4;

	$MainWindow roll-current-window;

        $MainWindow display-window-message "MiniBuffer" "Hello";
	# $MainWindow display-window-message "Window#1" "Hello Window#1\nabcdeあいうえお";
	# $MainWindow display-window-message "Window#2" "Hello Window#2\nabcdeあいうえお";
	# $MainWindow display-window-message "Window#3" "Hello Window#3\nabcdeあいうえお";
	# $MainWindow display-window-message "Window#1" [$MainWindow get WindowList : string];

	# USE CASE: "file open"

	b ::= new EditBuffer;
	$b load-content "/home/mit-sato/perfume/eval.c";
        $MainWindow bind-buffer "Window#1" $b;

	b ::= new EditBuffer;
	$b load-content "/home/mit-sato/perfume/methods.c";
	$MainWindow bind-buffer "Window#2" $b;

	b ::= new EditBuffer;
	$b load-content "/home/mit-sato/eval.c";
	$MainWindow bind-buffer "Window#3" $b;

	#b ::= new EditBuffer;
	#$b load-content "/home/mit-sato/eval.c";
	$MainWindow bind-buffer "Window#4" $b;

	$MainWindow render-all;
	$MainWindow refresh;
	sleep 1000;
        key := "";
	exit ::= vector("" "" "" "");
	while {true} do: {
	    i ::= curs-keyin [$MainWindow get-current-window : get-curs] 100;
	    if {nil? $i} {continue};
	    if {[$key len] > 80} {key := ""};
	    if {integer? $i} {
		$exit set 0 [$exit get 1]; $exit set 1 [$exit get 2]; $exit set 2 [$exit get 3];
		$exit set 3 ["" uimport! ($i)];
		if {[$exit list : join] = "exit"} {break};
	    };
	    $key append! ["" . [[integer? $i] ??? ["%02x" fmt $i] [result $i]] " "];
	    $MainWindow display-window-message "MiniBuffer" ["%-89v" fmt $key];
	    # $MainWindow render-all;
	    $MainWindow refresh;
	};

REM {
	$MainWindow roll-current-window;
	$MainWindow roll-current-window;
	$MainWindow bind-buffer
	    [$MainWindow get-current-window : get-window-name]
	    [BufferManager get-buffer "eval.c[2]"];
	
	$MainWindow render-all;
	$MainWindow refresh;
	sleep 500000;
};
	
    }
    fin: {
	curs-terminate;
    }
    catch: {| e |
	__error_info__ ::= "ERROR: <" . [$e car] "># " [$e cdr] "\n\n" $@stack-trace;
    }
    ;

    if {set? __error_info__} then: {println file: $stderr $__error_info__};
};
