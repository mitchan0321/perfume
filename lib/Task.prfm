class Task;

Task method init () {
    sets Name "";
    sets Coro <nil>;
    sets Last 0;
    sets Sleep 0;
    sets Since 0;
    sets Elapsed 0;
    sets Tick 0;
    sets ExitStatus 0;

    #
    # Task status:
    #   I ... Initial
    #   A ... Active
    #   R ... Running
    #   S ... Sleep
    #   Z ... zap
    #   X ... eXit
    #   W ... Wait
    sets State I;
};

Task method set-name (name) {
    sets Name $name;
};

Task method get-name () {
    return $Name;
};

Task method proc (name body args: arg) {
    if $Coro {
        throw ErrCreated "Already created task.";
    };
    sets Coro [coro $body];
    $Coro eval {
        defvar ARGS $arg;
        defvar SELF [self];
        enable-itimer;
    };
    TaskManager add [self] $name;
    sets State A;
    sets Since [time-of-day :msec];
    return $Name;
};

Task method set-stdio (in out err) {
    $Coro ?? {return};

    sets __stdin $in;
    sets __stdout $out;
    sets __stderr $err;
    $Coro eval {
        setvar stdin $__stdin;
        setvar stdout $__stdout;
        setvar stderr $__stderr;
    };
};

Task method release () {
    if $Coro {$Coro release};
};

Task method time-elapsed (msec) {
    return [$Sleep -- $msec];
};

Task method run () {
    if {eq? $State Z} {
	# Zap from other process.
        sets State X;
	sets ExitStatus (ZAP 0);
        release;
	return;
    };
    sets State R;
    b ::= time-of-day :msec;
    try {unset e} catch: {};
    try {sts ::= $Coro next} catch: {| e |};
    sets Last [time-of-day :msec];
    $Elapsed ++ [$Last - $b];
    $Tick ++;
    sets Sleep 0;
    
    if {set? e} {
        sets State X;
        sets ExitStatus (ERROR $e);
        release;
        return;
    };
    if {intr? $sts} {
        sets State A;
        return;
    };
    if {eq? [$Coro stat] DONE} {
        sets State X;
        sets ExitStatus (NORMAL 0);
        release;
        return;
    };

    if {list? $sts} {
        case [$sts car]
        SLEEP {
            sets State S;
            sets Sleep [$sts get 1];
        }
        EXIT {
            sets State X;
            sets ExitStatus (NORMAL [$sts get 1]);
        }
        default {
            State A;
        }
        ;;
        return;
    } {
        case $sts
        @READ {
            sets State W;
        }
        @WRITE {
            sets State W;
        }
        default: {
            sets State A;
        }
    };
};

Task method tickable? () {
    if {or {eq? $State A} {eq? $State S} {eq? $State Z}} <t> <nil>;
};

Task method exit? () {
    if {eq? $State X} <t> <nil>;
};

Task method get-name () {
    return $Name
};

Task method get-state () {
    return $State;
};

Task method get-exit-status () {
    return $ExitStatus;
};

Task method get-sleep () {
    return $Sleep;
};

Task method get-total () {
    return $Elapsed;
};

Task method get-elapsed () {
    return [time-of-day :msec : - $Since];
};

Task method get-tick () {
    return $Tick;
};

Task method set-zap () {
    sets State Z;
    sets Sleep 0;
};

