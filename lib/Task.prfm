class Task;

Task method init () {
    sets Name "";
    sets Coro <nil>;
    sets Last 0;
    sets Sleep 0;
    sets Since [time-of-day :msec];
    sets Elapsed 0;
    sets Tick 0;
    sets ExitStatus 0;

    #
    # Task status:
    #   I ... Initial
    #   A ... Active
    #   R ... Running
    #   S ... Sleep
    #   P ... Pause
    #   Z ... zap
    #   X ... eXit
    #   W ... Wait
    sets State I;
    
    sets SysReqStat ();
    
    sets Parent <nil>;
    
    sets ChildList ();
    sets ChildStatus ();
    
    sets CWD [pwd];
    
    sets __stdin <nil>;
    sets __stdout <nil>;
    sets __stderr <nil>;
    
    sets TerminateProc <nil>;
};

Task method string () {
    "<Task> name=" . $Name ", state=" $State ", parent=" [$Parent ??? [$Parent get-name] <nil>];
};

Task method set-name (name) {
    sets Name $name;
};

Task method get-name () {
    return $Name;
};

Task method proc (name body args: arg) {
    if $Coro {
        throw ErrCreated "Already created task.";
    };
    try {
        sets Coro [coro $body];
        $Coro eval {
            defvar ARGS $arg;
            defvar SELF [self];
            enable-itimer;
        };
        TaskManager add [self] $name;
        sets State A;
        sets Since [time-of-day :msec];
        return $Name;
    } catch: {| e |
        terminate;
        throw $e;
    };
};

Task method set-stdio (in out err) {
    $Coro ?? {return};

    if $in  {sets __stdin $in};
    if $out {sets __stdout $out};
    if $err {sets __stderr $err};
    $Coro eval {
        setvar stdin $__stdin;
        setvar stdout $__stdout;
        setvar stderr $__stderr;
    };
};

Task method get-stdio () {
    return ($__stdin $__stdout $__stderr);
};

Task method set-stdin (in) {
    sets __stdin $in;
};

Task method set-stdout (out) {
    sets __stdout $out;
};

Task method set-stderr (err) {
    sets __stderr $err;
};

Task method delivery-stdin (r) {
    $__stdin puts $r;
};

Task method time-elapsed (msec) {
    return [$Sleep -- $msec];
};

Task method run () {
    if {eq? $State P} {
        return;
    };
    if {eq? $State Z} {
	# Zap from other process.
        sets State X;
	sets ExitStatus (ZAP 0);
        terminate;
	return;
    };
    sets State R;
    b ::= time-of-day :msec;

    ### unset error indicate variable e
    try {unset e} catch: {};

    ### Call task one tick
    try {
        ### restore task current working directory
        cd $CWD;
        
        ### dispatch!!!
        sts ::= $Coro next

    } catch: {| e |
        ### set error indicate variable e
    } fin: {
        ### save task current working directory
        sets CWD [pwd];
    };
    
    sets Last [time-of-day :msec];
    $Elapsed ++ [$Last - $b];
    $Tick ++;
    sets Sleep 0;
    
    if {set? e} {
        sets State X;
        sets ExitStatus (ERROR $e);
        terminate;
        return;
    };
    if {intr? $sts} {
        sets State A;
        return;
    };
    if {eq? [$Coro stat] DONE} {
        sets State X;
        sets ExitStatus (NORMAL 0);
        terminate;
        return;
    };

    if {list? $sts} {
        case [$sts car]
        SLEEP {
            sets State S;
            sets Sleep [$sts get 1];
        }
        EXIT {
            sets State X;
            sets ExitStatus (NORMAL [$sts get 1]);
            terminate;
        }
        WAIT {
            sets State W;
        }
        default {
            State A;
        }
        ;;
        return;
    } {
        case $sts
        @READ {
            sets State W;
        }
        @WRITE {
            sets State W;
        }
        default: {
            sets State A;
        }
        ;;
    };
};

Task method tickable? () {
    if {or {eq? $State A} {eq? $State S} {eq? $State Z}} <t> <nil>;
};

Task method exit? () {
    if {eq? $State X} <t> <nil>;
};

Task method get-name () {
    return $Name
};

Task method get-state () {
    return $State;
};

Task method get-exit-status () {
    return $ExitStatus;
};

Task method get-sleep () {
    return $Sleep;
};

Task method get-total () {
    return $Elapsed;
};

Task method get-elapsed () {
    return [time-of-day :msec : - $Since];
};

Task method get-tick () {
    return $Tick;
};

Task method set-zap () {
    sets State Z;
    sets Sleep 0;
};

Task method set-exit () {
    sets State X;
    sets Sleep 0;
};

Task method set-sleep () {
    sets State S;
    sets Sleep 0;
};

Task method set-pause () {
    sets State P;
};

Task method set-resume () {
    sets State S;
};

Task method clear-syscall () {
    sets SysReqStat ();
};

Task method add-request-stat (s) {
    $SysReqStat append! $s;
};

Task method get-stat () {
    return $SysReqStat;
};

Task method set-parent (parent-task) {
    sets Parent $parent-task;
};

Task method get-parent () {
     return $Parent;
};

Task method add-child (child) {
    $ChildList append! $child;
};

Task method get-child-list () {
    return $ChildList;
};

Task method get-child (task) {
    i ::= $ChildList find $task;
    if $i {return $ChildList,$i};
    return <nil>;
};

Task method remove-child (task) {
    i ::= $ChildList find $task;
    $ChildList delete! $i;
};

Task method add-child-exit-status (child-status) {
    $ChildStatus append! $child-status;
};

Task method child-avail? (child) {
    i ::= $ChildList find $child;
    if $i {return <t>};
    return <nil>;
};

Task method child-avail-any? () {
    if {$ChildList null?}
    {
        return <nil>
    };
    return <t>;
};

Task method child-exited? (child) {
    n := 0;
    $ChildStatus each do: {| i |
        if {eq? $i,0 $child} {
            return <t>;
        };
        $n ++;
    };
    return <nil>;
};

Task method child-exited-any? () {
    if {$ChildStatus null?} {
        return <nil>
    };
    return <t>;
};
#
# call by Task inside service functions.
#
Task method get-result () {
    if {e ::= get-error} {
        throw $e;
    };
    return [__get-sys-call-stat RESULT];
};

Task method get-task () {
    if {e ::= get-error} {
        throw $e;
    };
    return [__get-sys-call-stat TASK];
};

Task method get-error () {
    return [__get-sys-call-stat ERROR];
};

Task method __get-sys-call-stat (cause) {
    atomic {
        n := 0;
        p := <nil>;
        result := <nil>;
        $SysReqStat each do: {| i |
            if {eq? $i,0 $cause} {
                p := $i;
                break;
            };
            $n ++;
        };
        if $p {
            $SysReqStat delete! $n;
            result := $p,1;
        };
    };
    
    return $result;
};

Task method get-child-exit-status (task) {
    atomic {
        n := 0;
        p := <nil>;
        result := <nil>;
        $ChildStatus each do: {| i |
            if {eq? $i,0 $task} {
                p := $i;
                break;
            };
            $n ++;
        };
        if $p {
            $ChildStatus delete! $n;
            result := $p,1;
        };
    };
    return $result;
};

Task method get-child-exit-status-any () {
    atomic {
        result ::= $ChildStatus >>;
    };
    return $result;
};

Task method set-terminate-proc (proc) {
    sets TerminateProc $proc;
};

Task method terminate () {
    try {
        if $Coro {$Coro release};
    } catch: {};

    if $TerminateProc {
        SysCall apply-editor $TerminateProc;
    };
};
