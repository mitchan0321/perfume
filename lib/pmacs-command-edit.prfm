###
### Pmacs editor edit command definition.
###

defcommand insert-character desc: "Insert pressed character into current buffer at cursor point." {
    | main window key |
    $window insert-string $key;
    result ALL;
};

defcommand insert-tab desc: "Insert TAB character into current buffer at cursor point." {
    | main window |
    $window insert-string "\t";
    result ALL;
};

defcommand insert-return desc: "Insert carriage return into current buffer at cursor point." {
    | main window |
    $window insert-string "\r";
    result ALL;
};

defcommand insert-new-line desc: "Insert new line into current buffer over line at cursor point." {
    | main window |
    $window apply-command $main $window "" cursor-top-of-line;
    $window insert-string "\r";
    $window apply-command $main $window "" cursor-up;
    result ALL;
};

defcommand delete-character desc: "Delete character from current buffer at cursor point." {
    | main window |
    $window delete-character;
    result ALL;
};

defcommand delete-word desc: "Delete word from current buffer at cursor point word." {
    | main window |
    $window apply-command $main $window "" select-region-word;
    [$window in-region?] ?? {
        show-message "Word not found.";
        return ALL;
    };
    $window apply-command $main $window "" cut-region;
    result ALL;
};

defcommand delete-word-after-current-point desc: "Delete word from current buffer after current cursor point." {
    | main window |
    if {! [$window get-region]} {
        $window apply-command $main $window "" start-region;
    };
    $window apply-command $main $window "" smart-move-forward;
    $window apply-command $main $window "" cut-region;
    result ALL;
};

defcommand delete-to-end-of-line desc: "Delete character from current buffer cursor point to end of line." {
    | main window |
    if {! [$window get-region]} {
        $window apply-command $main $window "" start-region;
    };
    $window apply-command $main $window "" cursor-end-of-line;
    $window apply-command $main $window "" cut-region;
    result ALL;
};

defcommand backdelete-character desc: "Delete character from current buffer before cursor point." {
    | main window |
    $window backdelete-character;
    result ALL;
};

defcommand undo-buffer desc: "Undo buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (new-y new-x) ::= $buff undo;
    if [$buff undo-empty?] {$buff no-modify};
    $new-y ?? {
        ###$buff no-modify;
	show-message :bell "Undo buffer is empty.";
	return SELF;
    };
    (line col) ::= $window get-cursor-index $buff $new-y $new-x;
    $window set-freecursor <nil>;
    $geom set! IndexColumn.SAVE $col;
    $geom set! CursorLine [$line - $geom,ViewLine];
    $geom set! CursorColumn [$col - $geom,ViewColumn];

    (y x) ::= $window get-screen-size;
    $window fit-to-cursor $geom $y $x;
    result ALL;
};

defcommand redo-buffer desc: "Redo buffer." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (new-y new-x) ::= $buff redo;
    $new-y ?? {
	show-message :bell "Redo buffer is empty.";
	return SELF;
    };
    (line col) ::= $window get-cursor-index $buff $new-y $new-x;
    $window set-freecursor <nil>;
    $geom set! IndexColumn.SAVE $col;
    $geom set! CursorLine [$line - $geom,ViewLine];
    $geom set! CursorColumn [$col - $geom,ViewColumn];

    (y x) ::= $window get-screen-size;
    $window fit-to-cursor $geom $y $x;
    result ALL;
};

defcommand start-region desc: "Start region select at cursor point." {
    | main window |
    buff ::= $window get-buffer;
    if [$window get-region] {
	show-message "End region.";
	$window end-region;
	return SELF;
    };
    geom ::= $window get-geom;
    (cy cx) ::= $window get-source-index $buff $geom;
    $window start-region $cy $cx;
    show-message "Start region.";
    result SELF;
};

defcommand exchange-region desc: "Exchange region current to start point." {
    | main window |
    $window exchange-region;
};

defcommand copy-region desc: "Copy selected region characters to copy buffer." {
    | main window |
    buff ::= $window get-buffer;
    [$window get-region] ?? {
	show-message :bell "Not start region. Press Ctrl+[SPACE] to start region.";
	$window end-region;
	return SELF;
    };
    geom ::= $window get-geom;
    (sy sx) ::= $window end-region;
    (ey ex) ::= $window get-source-index $buff $geom;
    $window copy-region $sy $sx $ey $ex;
    show-message "Copied.";
    result SELF;
};

defcommand cut-region desc: "Delete selected region characters from current buffer." {
    | main window |
    buff ::= $window get-buffer;
    [$window get-region] ?? {
	show-message :bell "Not start region. Press Ctrl+[SPACE] to start region.";
	$window end-region;
	return SELF;
    };
    geom ::= $window get-geom;
    (sy sx) ::= $window end-region;
    (ey ex) ::= $window get-source-index $buff $geom;
    (line col) ::= $window cut-region $sy $sx $ey $ex;
    (line col) ::= $window get-cursor-index $buff $line $col;
    show-message "Cut.";
    $window set-freecursor <nil>;
    $geom set! IndexColumn.SAVE $col;
    $geom set! CursorLine [$line - $geom,ViewLine];
    $geom set! CursorColumn [$col - $geom,ViewColumn];

    (y x) ::= $window get-screen-size;
    $window fit-to-cursor $geom $y $x;
    result ALL;
};

defcommand select-region-all desc: "Select region at current buffers all character." {
    | main window |
    $window mark;
    if {$window get-region} {
        $window apply-command $main $window "" start-region;
    };
    $window apply-command $main $window "" top-of-buffer;
    $window apply-command $main $window "" start-region;
    $window apply-command $main $window "" bottom-of-buffer;
    result ALL;
};

defcommand select-region-paragraph desc: "Select region in current buffer at paragraph near cursor point." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    $window mark;
    $window end-region;
    $window apply-command $main $window "" cursor-top-of-line;
    (ey ex) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $ey;
    r ::= $r ?? "";
    if {or {[$r at 0] = " "} {[$r at 0] = ""} {[$r at 0] = "\t"}} {
        $window apply-command $main $window "" move-previous-paragraph;
    };
    if {! [$window get-region]} {
        $window apply-command $main $window "" start-region;
    };
    $window apply-command $main $window "" move-next-paragraph;
    $window apply-command $main $window "" cursor-down;
    result SELF;
};

defcommand select-region-word desc: "Select region in current buffer at word near cursor point." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (y x) ::= $window get-source-index $buff $geom;
    r ::= $buff get-buffer-line $y;

    $window end-region;
    $r ?? {return ALL};
    
    i := 0;
    if {or {[$r at $x] alphanumeric?} {[$r at $x] = "-"}} {
        found := <t>;
        s ::= [$x = 0] ??? $x [$x - 1];
        i := $s;
        $s each to: 0 do: {| i |
            if {! [or {[$r at $i] alphanumeric?} {[$r at $i] = "-"}]} {
                i ::= $i + 1;
                break;
            };
        };
    } {
        found := <nil>;
        s ::= $x + 1;
        i := $s;
        $s each to: [$r len] do: {| i |
            if {or {[$r at $i] alphanumeric?} {[$r at $i] = "-"}} {
                found := <t>;
                break;
            };
        };
    };
    $found ?? {return ALL};
    
    $window cursor-move-to $geom $y $i;
    $window apply-command $main $window "" start-region;

    $i each to: [$r len] do: {| j |
        if {! [or {[$r at $j] alphanumeric?} {[$r at $j] = "-"}]} {
            break;
        };
    };
    $window cursor-move-to $geom $y $j;

    result SELF;
};

defcommand paste-buffer desc: "Paste characters from copy buffer into current buffer at cursor point."{
    | main window |
    buff ::= $window get-buffer;
    str ::= $window get-copy-buffer;
    if {$str = ""} {
	show-message :bell "Copy buffer is empty.";
	return SELF;
    };
    geom ::= $window get-geom;
    if [$window get-region] {
        (sy sx) ::= $window end-region;
        (ey ex) ::= $window get-source-index $buff $geom;
        if {$sy > $ey} {
            (sy ey) := ($ey $sy);
            (sx ex) := ($ex $sx);
        } {
            if {$sx > $ex} {
                (sx ex) := ($ex $sx);
            };
        };
        (line col) ::= $window delete-region $sy $sx $ey $ex;
    } {
        (sy sx) ::= $window get-source-index $buff $geom;
    };
    (cy cx) ::= $buff insert-string-at $str $sy $sx;
    $window set-copy-buffer $str;
    show-message "Paste.";
    (line col) ::= $window get-cursor-index $buff $cy $cx;
    $window set-freecursor <nil>;
    $geom set! IndexColumn.SAVE $col;
    $geom set! CursorLine [$line - $geom,ViewLine];
    $geom set! CursorColumn [$col - $geom,ViewColumn];

    (y x) ::= $window get-screen-size;
    $window fit-to-cursor $geom $y $x;
    result ALL;
};

defcommand smart-newline desc: "Formed indent at current cursor point, insert carriage return and insert indent at new line." {
    | main window |
    if $SMART_INDENT_CANCEL {
        ### insert newline
        $window apply-command $main $window "\r" insert-character;
        return SELF;
    };

    $window set-freecursor <nil>;
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    str-cur ::= $buff get-buffer-line $ey;
    if {and $str-cur {$ex >= [$str-cur len]}} {
        ### current line smart indent
        str-prev := "";
        if {$ey > 0} {
            idx-y := 1;
            loop do: {
                str-prev ::= $buff get-buffer-line [$ey - $idx-y];
                if $str-prev else: {
                    str-prev := "";
                    break;
                };
                if {! [$str-prev =~ '^[ \t]*$']} {break};
                $idx-y ++;
            };
        };
        cur-level ::= get-next-indent-count-backward $str-cur;
        if {$cur-level < 0} {
            prev-level ::= get-indent-level $str-prev;
            prev-indent ::= get-next-indent-count $str-prev;
            cur-level-count ::= $cur-level + $prev-indent;
            if [$cur-level-count < 0] {cur-level-count := -1};
            if {or {$cur-level-count < 0}
                   {and {$cur-level-count = 0} {$prev-indent > 0}}} {
                cur-indent ::= $prev-level + [$cur-level-count * $INDENT_WIDTH];
                cur-indent ::= [$cur-indent < 0] ??? 0 $cur-indent;
                new-str ::= [" " repeat $cur-indent] . [$str-cur clean];
                $buff line-update $new-str $ey;
                $geom set! IndexColumn.SAVE [$new-str len];
            };
        };
    };
    
    ### insert newline
    $window apply-command $main $window "\r" insert-character;
    
    ### next line smart indent
    (ey ex) ::= $window get-source-index $buff $geom;
    str-prev := "";
    if {$ey > 0} {
        idx-y := 1;
        loop do: {
            str-prev ::= $buff get-buffer-line [$ey - $idx-y];
            if $str-prev else: {
                str-prev := "";
                break;
            };
            if {! [$str-prev =~ '^[ \t]*$']} {break};
            $idx-y ++;
        };
    };
    cur-level ::= get-indent-level $str-prev;
    next-level-count ::= get-next-indent-count $str-prev;

    if {$cur-level > 0} {
        $window apply-command $main $window "" smart-indent;
    } {
        if {$next-level-count > 0} {
            $window apply-command $main $window "" smart-indent;
        };
    };
    
    result ALL;
};

defcommand smart-indent desc: "Formed indent at line or insert more indent." {
    | main window |
    if $SMART_INDENT_CANCEL {
        ### insert indent
        $window apply-command $main $window "\t" insert-character;
        return SELF;
    };

    $window set-freecursor <nil>;
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    str ::= $buff get-buffer-line $ey;
    str ::= $str ?? "";
    str-prev := "";
    if {$ey > 0} {
        idx-y := 1;
        loop do: {
            str-prev ::= $buff get-buffer-line [$ey - $idx-y];
            if $str-prev else: {
                str-prev := "";
                break;
            };
            if {! [$str-prev =~ '^[ \t]*$']} {break};
            $idx-y ++;
        };
    };
    cur-level ::= get-indent-level $str-prev;
    next-level-count ::= get-next-indent-count $str-prev;
    next-level-count ::= [$next-level-count > 0] ??? 1 0;
    next-indent ::= $cur-level + [$next-level-count * $INDENT_WIDTH];
    next-level-count ::= get-next-indent-count-backward $str;
    if {$next-level-count < 0} {
        next-indent ::= $next-indent - $INDENT_WIDTH;
    };

    cur-pos ::= curs-index-to-pos $str $ex $DEFAULT_TAB_WIDTH;
    if {or $ALWAYS_SMART_INDENT {$cur-pos < $next-indent}} {
        last-pos ::= curs-index-to-pos $str [$str len] $DEFAULT_TAB_WIDTH;
        if {and {$cur-pos >= $last-pos} {$str =~ '[ \t]+$'}} {
            # insert indent
            in ::= $INDENT_WIDTH - [$cur-pos % $INDENT_WIDTH];
            $buff insert-string-at [" " repeat $in] $ey $ex;
            $geom set! IndexColumn.SAVE [$geom get IndexColumn.SAVE : + $in];
        } {
            # smart indent
            new-str ::= [" " repeat $next-indent] . [$str clean];
            $buff line-update $new-str $ey;
            $geom set! IndexColumn.SAVE $next-indent;
        };
    } {
        # insert indent
        in ::= $INDENT_WIDTH - [$cur-pos % $INDENT_WIDTH];
        $buff insert-string-at [" " repeat $in] $ey $ex;
        $geom set! IndexColumn.SAVE [$geom get IndexColumn.SAVE : + $in];
    };
    
    result ALL;
};

defun get-indent-level (str) {
    if {$str = ""} {return 0};

    str ::= $str . "x";
    0 each to: [$str len : - 1] do: {| i |
	c ::= $str at $i;
	if {! [or [$c = " "] [$c = "\t"]]} {break};
    };
    return [curs-index-to-pos $str $i $DEFAULT_TAB_WIDTH];
};

defun get-next-indent-count (str) {
    kakko-maru := 0; ### '(' ')' balance count
    kakko-nami := 0; ### '{' '}' balance count
    kakko-kaku := 0; ### '[' ']' balance count

    if {[[$str clean] at -1] = ":"} {return 1};
    
    [$str len : - 1] each to: 0 do: {| i |
	c ::= $str at $i;
	case $c
	  "(" {$kakko-maru ++}
	  "{" {$kakko-nami ++}
	  "[" {$kakko-kaku ++}
	  ")" {$kakko-maru --}
	  "}" {$kakko-nami --}
	  "]" {$kakko-kaku --}
	;
        if {or {$kakko-maru > 0} {$kakko-nami > 0} {$kakko-kaku > 0 }} {break};
    };

    i ::= $kakko-maru + $kakko-nami : + $kakko-kaku;
    return [cond
        {$i = 0} {break  0}
        {$i > 0} {break  1}
        {$i < 0} {break -1}
    ];
};

defun get-next-indent-count-backward (str) {
    kakko-maru := 0; ### '(' ')' balance count
    kakko-nami := 0; ### '{' '}' balance count
    kakko-kaku := 0; ### '[' ']' balance count

    if {[[$str clean] at -1] = ":"} {return -1};

    0 each to: [$str len : - 1] do: {| i |
	c ::= $str at $i;
	case $c
	  "(" {$kakko-maru ++}
	  "{" {$kakko-nami ++}
	  "[" {$kakko-kaku ++}
	  ")" {$kakko-maru --}
	  "}" {$kakko-nami --}
	  "]" {$kakko-kaku --}
	;
        if {or {$kakko-maru < 0} {$kakko-nami < 0} {$kakko-kaku < 0 }} {break};
    };

    i ::= $kakko-maru + $kakko-nami : + $kakko-kaku;
    return [cond
        {$i = 0} {break  0}
        {$i > 0} {break  1}
        {$i < 0} {break -1}
    ];
};

defcommand smart-dedent desc: "De-indent at current line." {
    | main window |
    $window set-freecursor <nil>;
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    str ::= $buff get-buffer-line $ey;
    str ::= $str ?? "";
    cur-level ::= get-indent-level $str;
    next-indent ::= [$cur-level / $INDENT_WIDTH] - 1 : * $INDENT_WIDTH;
    if {$next-indent < 0} {return ALL};
    new-str ::= [" " repeat $next-indent] . [$str clean];
    $buff line-update $new-str $ey;
    $geom set! IndexColumn.SAVE $next-indent;
    
    result ALL;
};

defcommand replace-buffer desc: "Replace regex string to specified string at current buffer overall." {
    | main window |

    mini-input-until-enter $main $window
        prompt: "Replace string: "
        enter-proc: {| value |
	    froms := $value;
            mini-input-until-enter $main $window
                prompt: ["Replace string [" . $froms "] to: "]
                enter-proc: {| value |
                    count ::= [$window get-buffer] replace-buffer $froms $value;
                    show-message ["Replace [" . $froms "] to [" $value "] " $count " times completed."];
                    return ALL;
	        }
            ;;
        }
    ;;
    
    result SELF;
};

defcommand replace-region desc: "Replace regex string to specified string at current buffers selected region."  {
    | main window |
    [$window get-region] ?? {
        show-message "Please select a region first.";
        return SELF;
    };

    mini-input-until-enter $main $window 
        prompt: "Region replace string: "
        enter-proc: {| value |
	    froms := $value;
            mini-input-until-enter $main $window
                prompt: ["Region replace string [" . $froms "] to: "]
                enter-proc: {| value |
                    if [$window get-region] {
                        buff ::= $window get-buffer;
                        geom ::= $window get-geom;
                        (sy sx) ::= $window end-region;
                        (ey ex) ::= $window get-source-index $buff $geom;
                    };
                    if {$sy > $ey} {(sy ey) := ($ey $sy)};
                    count ::= [$window get-buffer] replace-region $froms $value $sy $ey;
                    show-message ["Region replace [" . $froms "] to [" $value "] " $count " times completed in region (" $sy "," $ey ")."];
                    return ALL;
	        }
            ;;
        }
    ;;

    result ALL;
};

defcommand replace-buffer-with-query desc: "Replace regex string to specified string with query."  {
    | main window |

    mini-input-until-enter $main $window
        prompt: "Query replace string: "
        enter-proc: {| value |
	    froms := $value;
            mini-input-until-enter $main $window
                prompt: ["Query replace string [" . $froms "] to: "]
                enter-proc: {| value |
                    repvalue := $value;
                    buff ::= $window get-buffer;
                    geom ::= $window get-geom;
                    (y x) ::= $window get-source-index $buff $geom;
                    end ::= $buff get-buffer-length;
                    c := 0;
                    sts ::= get-next-search-length $y $x [$froms rquote] $buff regex;
                    if $sts {
                        (y x len) := $sts;
                        $window cursor-move-to-fit-center $geom $y $x;
                        $window set-spot-color-item REPLACE $y $x $len SEARCH_CURRENT_HILIGHT;
                    } {
                        show-message "No replace string.";
                        return ALL;
                    };
                    
                    mini-input-until-cancel $main $window
                        prompt: "Replace? y(replace) / n(no replace) / [ESC](cancel): "
                        cancel-proc: {
                            $window remove-spot-color-item REPLACE;
                            show-message ["Replace [" . $froms "] to [" $repvalue "] " $c " times completed."];
                            result ALL;
                        }
                        keyin-proc: {| value in-key term |
                            procf := <nil>;
                            cond
                            {nil? $sts} {
                                $term <t>;
                                $window remove-spot-color-item REPLACE;
                                break;
                            }
                            <t> {
                                (y x len) := $sts;
                                if {$y >= $end} {
                                    $term <t>;
                                    $window remove-spot-color-item REPLACE;
                                    break;
                                };
                            }
                            {and {string? $in-key} {$in-key at 0 : = "y"}} {
                                src ::= $buff get-buffer-line $y;
                                (result n) ::=  $src replace-return-times-with-start [$froms rquote] $repvalue $x;
                                $buff line-update $result $y;
                                $c ++ $n;
                                $x ++ [$repvalue len];
                                procf := <t>;
                                break;
                            }
                            {and {string? $in-key} {$in-key at 0 : = "n"}} {
                                $x ++ $len;
                                procf := <t>;
                                break;
                            }
                            ;;
                            
                            if $procf {
                                _sts ::= get-next-search-length $y $x [$froms rquote] $buff regex;
                                setc sts $_sts;
                                if $sts {
                                    (y x len) := $sts;
                                    $window cursor-move-to-fit-center $geom $y $x;
                                    $window set-spot-color-item REPLACE $y $x $len SEARCH_CURRENT_HILIGHT;
                                } {
                                    $term <t>;
                                    $window remove-spot-color-item REPLACE;
                                    show-message ["Replace [" . $froms "] to [" $repvalue "] " $c " times completed."];
                                    result ALL;
                                };
                                procf := <nil>;
                            };
                        }
                    ;;
                    
                    result ALL;
	        }
            ;;
        }
    ;;
    
    result ALL;
};

defcommand show-character-code desc: "Display cursors point character code at mini-window." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (cy cx) ::= $window get-source-index $buff $geom;
    s ::= $buff get-buffer-line $cy;
    $s ?? {
	show-message "No character.";
	return SELF;
    };
    c ::= $s sub $cx [$cx + 1];
    if {$c != ""} {
	i ::= $c uexport : car;
	show-message ["Code: %v[u+%06x]" fmt $i $i];
    } {
	show-message "No character."
    };
    
    result SELF;
};

defcommand input-character-code desc: "Insert specified unicode code point character into current buffer at cursor point." {
    | main window |

    mini-input-until-enter $main $window
        prompt: "Input character code: u+"
        enter-proc: {| value |
            try {
                i ::= ["0x" . $value] int;
            } catch: {
                show-message :bell "Bad hexadecimal.";
                return ALL;
            };
            if {or {$i < 0} {$i >= 0x200000}} {
                show-message :bell "Bad range unicode codepoint.";
                return ALL;
            };
            $window insert-string ["" uimport! ($i)];
        }
    ;;

    result SELF;
};
