#
# constant value define
#
if {defvar? PI} else: {defvar PI 3.14159265358979323846};
if {defvar? E}  else: {defvar E 2.7182818284590452354};

#
# utilitie functions and methods
#

#
# apply constructor delegate chain
# Using: xx method () init {apply-constructor}
#
defun apply-constructor () {
    [[self] delegate?] each do: {| i |
	apply-constructor-sub $i;
    };
};

defun apply-constructor-sub (o) {
    set s [symbol ["__init__" . $o]];
    if [sets? $s] then: {return};
    sets $s t;

    set l [$o delegate?];
    if {$l null?} then: {return};

    $l each do: {| i |
	apply-constructor-sub $i;
	try {
	    [$i var? init];
	}
        catch: {};
    };
};

#
# block eval and input/output redirect from/to specified file.
#
Block method >> (file) {
    pipe out: $file [self];
};

Block method << (file) {
    pipe in: $file [self];
};

#
# List utility
#
List method clone () {
    set result ();
    [self] each do: {| l |
	$result append! $l;
    };
    return $result;
};

List method insert! (pos obj) {
    [seek $pos] << $obj;
    return [self];
};

List method delete! (pos) {
    if [$pos >= [[len] - 1]]
    then: {->>}
    else: {[seek $pos] >>};
    return [self];
};

List method insert (pos obj) {
    set result [[self] clone];
    [$result seek $pos] << $obj;
    return $result;
};

List method delete (pos) {
    set result [[self] clone];
    if [$pos >= [[len] - 1]]
    then: {$result ->>}
    else: {[$result seek $pos] >>};
    return $result;
};

List method find (obj) {
    set i 0;
    [self] each do: {| f |
	if [eq? $f $obj] then: {return $i};
	$i ++;
    };
    return nil;
};

List method find* (obj) {
    set i 0;
    set result ();
    [self] each do: {| f |
	if [eq? $f $obj] then: {$result append! $i};
	set i [$i + 1];
    };
    return $result;
};

List method reverse () {
    set a [vector [self]];
    set result ();
    set r $result;
    
    if [[$a len] = 0] then: {return $result};

    [[$a len] - 1] .. 0 : each do: {| i |
        set r [$r append! $a,$i];
    };

    return $result;
};

#
# Object::?
#
Object method ? () {self};

#
# File::each
#
File method each (do: body) {
    while {! [eof?]} do: {
	s ::= gets;
	if [nil? $s] then: {break};
	yield $body $s;
    };
};

File method string () {
    x ::= dict [stat];
    name := $x,path;
    if {nil? $name} then: {name := ""};
    "File::" . $name "#" [stat];
};

#
# Dict util methods
#
Dict method each (do: body) {
    if {set? body} else: {throw ErrNoBlock "No specified block."};
    [keys] each do: {| k | yield $body $k [self],$k};
};

Dict method string () {
    "[dict " . [pairs] "]";
};

#
# Vector util method
#

Vector method string () {
    "[vector " . [list] "]";
};

#
# Integer util method
#
Integer method ! () {
    1 .. [self] : inject 1 do: {| s i | $s * $i}
};

Integer method isprime () {
    if {[[self] - 1 : nextprime] = [self]}
        t
	nil
    ;
};

#
# IPv4 utils
#

# Using: resolv-host host-name or ip-addr-string.
defun resolv-host (host) {
    try {
	set a [[[resolv-in-addr $host] split sep: "."] map {| i | $i int}];

	if [[$a len] != 4] then: {
	    throw ErrBadAddrSpec "Bad inet address spec.";
	};

	$a each do: {| i |
	    if [$i > 255] then: {
		throw ErrBadAddrSpec "Bad inet address spec.";
	    };
	};

	return [([$a,0 << 24] [$a,1 << 16] [$a,2 << 8] $a,3)
		inject 0 do: {| s i | $s + $i}];

    } catch: {| e |
	throw $e;
    };
};

defun host-address-string (addr) {
    "%d.%d.%d.%d" fmt [[$addr >> 24] && 0xff] [[$addr >> 16] && 0xff] [[$addr >> 8] && 0xff] [$addr && 0xff];
};


# String number operation

String method + (a) {
    [[self] number] + $a;
};

String method - (a) {
    [[self] number] - $a;
};

String method * (a) {
    [[self] number] * $a;
};

String method / (a) {
    [[self] number] / $a;
};

String method % (a) {
    [[self] int] % $a;
};

String method ^ (a) {
    [[self] int] ^ $a;
};

String method && (a) {
    [[self] int] && $a;
};

String method || (a) {
    [[self] int] || $a;
};

String method ^^ (a) {
    [[self] int] ^^ $a;
};

String method ~~ () {
    [[self] int] ~~;
};

String method sin () {
    [[self] real] sin;
};

String method cos () {
    [[self] real] cos;
};

String method tan () {
    [[self] real] tan;
};

String method asin () {
    [[self] real] asin;
};

String method acos () {
    [[self] real] acos;
};

String method atan () {
    [[self] real] atan;
};

String method sqrt () {
    [[self] real] sqrt;
};

String method pow (a) {
    [[self] real] pow $a;
};

String method exp10 () {
    [[self] real] exp10;
};

String method exp () {
    [[self] real] exp;
};

String method log10 () {
    [[self] real] log10;
};

String method log () {
    [[self] real] log;
};

#
# for load function / class by symbol name
#
defun load-func (s force: force) {
    if {! [set? force]} then: {
	if [dict-func : set? $s] then: {return nil};
    };

    dict-func : unset $s;
    $LIB_PATH each do: {| f |
	try {unset p; alias up: 1 __fname__ p};
	set p [$f . "/" $s ".prfm"];
	uplevel {try {load $__fname__} catch: {}; unset __fname__};
	if [dict-func : set? $s] then: {return t};
    };
    throw ErrNoFunction ["No such function, '" . $s "'."];
};

defun load-class (s force: force) {
    if {! [set? force]} then: {
	if [dict-class : set? $s] then: {return nil};
    };
    
    dict-class : unset $s;
    $LIB_PATH each do: {| f |
	try {unset p; alias up: 1 __fname__ p};
	set p [$f . "/" $s ".prfm"];
	uplevel {try {load $__fname__} catch: {}; unset __fname__};
	if [dict-class : set? $s] then: {return t};
    };
    throw ErrNoClass ["No such class, '" . $s "'."];
};

#
# Wrap tag? command.
#
defun tag (*) {
    tag? [$* car];
};

#
# RPN expr
#
begin {
    2opsyms := (+ - * / % ^ && || ^^ = != > >= < <= [symbol "."]);
    defun expr (args: expr) {
        help := "Syntax Error, syntax: expr rpn-expr";
        if [$expr null?] then: {throw ErrSyntax $help};

        lstack := ();
    	$expr each do: {| item |
            case [type? $item]
	    SYMBOL {
	        cond
	    	[$2opsyms find $item] {
		    if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		    i2 ::= $lstack >>;
		    if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		    i1 ::= $lstack >>;
		    $lstack << [$i1 $item $i2];
		    break;
                }
	    
	        [eq? $item pop] {
		    if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		    $lstack >>;
		    break;
	        }
	    
	        [eq? $item exchg] {
		    if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		    i2 ::= $lstack >>;
		    if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		    i1 ::= $lstack >>;
		    $lstack << $i2;
		    $lstack << $i1;
		    break;
	        }
	    
	        [eq? $item dup] {
		     if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		     i1 ::= $lstack >>;
		     $lstack << $i1;
		     $lstack << $i1;
		     break;
	        }

	        [eq? $item if] {
	       	    if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		    c ::= $lstack >>;
	            if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		    fv ::= $lstack >>;
	            if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
		    tv ::= $lstack >>;
		    if $c {$lstack << $tv} {$lstack << $fv};
		    break;
	        }

	        [eq? $item list] {
	            return $lstack;
                }
		
	        [eq? $item top] {
	            return [$lstack >>];
                }
	    
	        t {
		    if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
	            i1 ::= $lstack >>;
		    $lstack << [$i1 $item];
	    	}
	    	;
	    }
	
	    LIST {
	        $lstack << [call expr $item];
	    }
	
	    * {
	        $lstack << $item;
	    }
	    ;
	
        };

        if [$lstack null?] {throw ErrStackUnderflow "No stack data."};
        $lstack >>;
    };
};

#
# for statement
#
defun for (init cond incr do: body) {
    $init eval;
    while {$cond eval} do: {
	try {
            $body eval
        }
        fin: {
            $incr eval;
        };
    };
};
