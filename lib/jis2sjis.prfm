#
# convert JIS <-> Shift-JIS code conversion
#   x: 1st byte
#   y: 2nd byte
#
# Reference URL: http://www.unixuser.org/~euske/doc/kanjicode/index.html
#
# Check script: convert JIS -> Shift-JIS result range check.
#
REM {
    xdic ::= dict;
    ydic ::= dict;
    0x21 each to: 0x7e do: {| x |
        0x21 each to: 0x7e do: {| y |
            (sx sy) ::= jis2sjis $x $y;
            $xdic set ["%02x" fmt $sx] 1;
            $ydic set ["%02x" fmt $sy] 1;
        };
    };
    println [lsort [[$xdic keys] map {| x | "" . $x}]];    # 0x81 .. 0x9f, 0xe0 .. 0xef
    println [lsort [[$ydic keys] map {| x | "" . $x}]];    # 0x40 .. 0x7e, 0x80 .. 0xfc
};

#
# Check script: check re-convert result Shift-JIS -> JIS after convert JIS -> Shift-JIS.
#
REM {
    0x21 each to: 0x7e do: {| x |
        0x21 each to: 0x7e do: {| y |
            (sx sy) ::= jis2sjis $x $y;
            (jx jy) ::= sjis2jis $sx $sy;
            if [$x != $jx] {println "*x=" $x ",  y=" $y};
            if [$y != $jy] {println " x=" $x ", *y=" $y};
        };
    };
};

defun jis2sjis (x y) {
    x1 ::= $x - 0x21;
    x2 ::= $x1 >> 1;
    x3 ::= $x1 && 0x01;
    if [$x2 <= 0x1e] 
    then: {
	Xres ::= $x2 + 0x81;
    }
    else: {
	Xres ::= $x2 + 0xC1;
    };

    if [$x3 = 1]
    then: {
	Yres ::= $y + 0x7e;
    }
    else: {
	y1 ::= $y + 0x1f;
	if [$y1 <= 0x7e]
	then: {
	    Yres := $y1;
	}
	else: {
	    Yres ::= $y1 + 0x01;
	};
    };

    return ($Xres $Yres);
};

defun sjis2jis (x y) {
    if [$y >= 0x9f]
    then: {
	Yres ::= $y - 0x7e;
	x3 := 1;
    }
    else: {
	if [$y >= 0x80]
	then: {
	    y1 ::= $y - 0x01;
	}
	else: {
	    y1 := $y;
	};
	Yres ::= $y1 - 0x1f;
	x3 := 0;
    };

    if [$x >= 0xe0]
    then: {
	x2 ::= $x - 0xc1;
    }
    else: {
	x2 ::= $x - 0x81;
    };
    x1 ::= [$x2 << 1] + $x3;
    Xres ::= $x1 + 0x21;

    return ($Xres $Yres);
};
