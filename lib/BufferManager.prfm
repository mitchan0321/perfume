class BufferManager;

BufferManager method init () {
    [sets? BufferList] ?? {sets BufferList [dict ()]};
    [sets? BufferGeom] ?? {sets BufferGeom [dict ()]};
};

BufferManager method regist-buffer (buff name) {
    i := 1;
    if {$name = ""} {name := "*no named*"};
    name ::= $name clean;
    name ::= $name replace :all '<' "(";
    name ::= $name replace :all '>' ")";
    name-orig := $name;
    while {$BufferList set? $name} do: {
	$i ++;
	name ::= $name-orig . "[" $i "]";
    };
    $buff set-buffer-name $name;
    $BufferList set $name $buff;
};

BufferManager method unregist-buffer (name) {
    if {$name = "*Scratch*"} {return [$BufferList get $name]};
    buff ::= $BufferList unset $name;
    if $buff {
        proc ::= $buff get-unregist-proc;
        if {true? proc} {
            try {$proc eval} catch: {| e |
                show-message :bell "Error at BufferManager::unregist-buffer, bad unregist-proc.";
            };
        };
    };
    return $buff;
};

BufferManager method buffer-order-list () {
    msort [$BufferList keys :string : filter {| i | [$i at 0] != "*"}] :
    concat
    [msort [$BufferList keys :string : filter {| i | [$i at 0] = "*"}]];
};

BufferManager method get-buffer-list () {
    return [buffer-order-list];
};

BufferManager method get-buffer-list-order-by-newer () {
    l1 ::= $BufferList keys :string : map {| i |
        result ([get-buffer $i : get-raise-timestamp] $i)
    };
    l2 ::= msort $l1 order: < getter: {| i | $i get 0};
    return [$l2 map {| i | $i get 1}];
};

BufferManager method get-buffer-list-split-order-by-newer () {
    l1 ::= $BufferList keys :string : map {| i |
        result ([get-buffer $i : get-raise-timestamp] $i)
    };
    l2 ::= msort $l1 order: < getter: {| i | $i get 0};
    l3 ::= [$l2 filter {| i | [[$i get 1] at 0] != "*"}] concat [$l2 filter {| i | [[$i get 1] at 0] = "*"}];
    return [$l3 map {| i | $i get 1}];
};

BufferManager method get-buffer (name) {
    buff ::= $BufferList get $name;
    $buff ?? {
	buff ::= $BufferList get "*Scratch*";
	$buff ?? {
	    buff ::= new ScratchBuffer;
	    regist-buffer $buff "*Scratch*";
	};
    };
    return $buff;
};

BufferManager method find-buffer (name) {
    buff ::= $BufferList get $name;
    return $buff;
};

BufferManager method get-buffer-by-path (path) {
    buff := <nil>;
    $BufferList each do: {| name buffer |
	$buffer ?? {continue};
        if {$path = [$buffer get-path]} {
            buff := $buffer;
            break;
        };
    };
    return $buff;
};

BufferManager method get-buffer-create (name) {
    buff ::= $BufferList get $name;
    $buff ?? {
	buff ::= new EditBuffer;
    };
    return $buff;
};

BufferManager method get-next-buffer (buff) {
    if {[$BufferList len] = 0} {
	buff ::= new ScratchBuffer;
	regist-buffer $buff "*Scratch*";
	return $buff;
    };
    l ::= buffer-order-list;
    i ::= $l find [$buff get-buffer-name];
    if $i {
        r ::= $l get [$i + 1];
    } {
        r := "*Scratch*";
    };
    $BufferList get [$r ?? $l,0];
};

BufferManager method get-previous-buffer (buff) {
    if {[$BufferList len] = 0} {
	buff ::= new ScratchBuffer;
	regist-buffer $buff "*Scratch*";
	return $buff;
    };
    l ::= buffer-order-list : reverse;
    i ::= $l find [$buff get-buffer-name];
    if $i {
        r ::= $l get [$i + 1];
    } {
        r := "*Scratch*";
    };
    $BufferList get [$r ?? $l,0];
};

BufferManager method set-buffer-geom (window-name buffer-name) {

    [$BufferGeom set? ($window-name $buffer-name)] ?? {
	geom := <nil>;
	$BufferGeom each do: {| k v |
	    (w b g) := $v;
	    if {$b = $buffer-name} {
		geom ::= $g clone;
		break;
	    };
	};
	if $geom {
	    $BufferGeom set
		($window-name $buffer-name)
		($window-name $buffer-name $geom);
	    return;
	};

	$BufferGeom set
	    ($window-name $buffer-name)
	    ($window-name $buffer-name [new BufferGeom]);
	return;
    };
};

BufferManager method get-buffer-geom (window-name buffer-name) {
    geom ::= $BufferGeom get ($window-name $buffer-name);
    if $geom {
	return $geom,2;
    };

    $BufferGeom each do: {| k v |
	(w b g) := $v;
	if {$b = $buffer-name} {
	    geom ::= $g clone;
	    ### debug-message ["*** geom clone: " . $buffer-name ", " $window-name ", " [$geom string]];
	    return $geom;
	};
    };

    return [new BufferGeom];
};
