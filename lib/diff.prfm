defun diff (bpath
	    apath
            display-graph: disp
	    heuristic: heuristic
	    costbase: costbase
	   )

{
    b-src ::= vector(-1);     # before file id array and append never match mark every source
    a-src ::= vector(-2);     # after file id array and append never match mark every source
    src-id ::= dict;          # source -> id dict
    id-src ::= dict;          # id -> source dict

    # read before file
    bpath ::= "" . $bpath;
    if [$bpath = "-"] {bpath := "/dev/tty"};
    bfile := `File($bpath);
    $bfile each do: {| r |
        if [$src-id set? $r] {
            id ::= $src-id get $r;
            $b-src append! $id;
        } {
            id ::= [$src-id len] + 1;
            $src-id set $r $id;
            $id-src set $id $r;
            $b-src append! $id;
        };
    };
    $bfile close;

    # read after file
    apath ::= "" . $apath;
    if [$apath = "-"] {apath := "/dev/tty"};
    afile := `File($apath);
    $afile each do: {| r |
        if [$src-id set? $r] {
            id ::= $src-id get $r;
            $a-src append! $id;
        } {
            id ::= [$src-id len] + 1;
            $src-id set $r $id;
            $id-src set $id $r;
            $a-src append! $id;
        };
    };
    $afile close;
 
    # display edit graph
    if [set? disp] {
        _dsw := nil;
        println "# Before source list(b): " $b-src;
        println "# After source list(a):  " $a-src;
        println "# Edit graph:";
        println "#   \\ (a)";
        0 each to: [[$b-src len] - 1] do: {| bidx |
            if $_dsw {print "#     "} {print "# (b) "; _dsw := t};
            0 each to: [[$a-src len] - 1] do: {| aidx |
                print [if [diff-has-slant $bidx $aidx $b-src $a-src] {result "\\"} {result "."}];
            };
            println;
        };
    };

    bmax ::= [$b-src len] - 1;
    amax ::= [$a-src len] - 1;
    path := ();                         # collect walked path

    if [true? heuristic] {goto diff-heuristic};
    if [true? costbase]  {goto diff-cost-base};
    
    if [[$bmax * $amax] >= 250000] {goto diff-heuristic};
    goto diff-cost-base;
};

defun diff-heuristic () {

    println "# Use heuristic algorithm";
    
    # walk throw edit graph
    bcost := -1;                        # cost for down move, -1 is slant not found
    acost := -1;                        # cost for right move, -1 is slant not founc
    broot := 0;                         # root for b-axis, start point is 0
    aroot := 0;                         # root for a-axis, start point is 0
    if [[$bmax - $broot] >= [$amax - $aroot]] {basedir := b} {basedir := a};
    bcost-avail := nil;
    acost-avail := nil;
    
    while {or [$broot < $bmax] [$aroot < $amax]} do: {
        if [$broot = $bmax] {
            # position is bottom, move right to end
            $aroot ++;
            $path append! (a $a-src,$aroot);
            continue;
        };
        if [$aroot = $amax] {
            # position is right, move down to end
            $broot ++;
            $path append! (b $b-src,$broot);
            continue;
        };

        if [$b-src,[$broot + 1] = $a-src,[$aroot + 1]] {
            # has slant ($broot, $aroot), move slant and cost clear
            $broot ++;
            $aroot ++;
            $path append! (s $a-src,$aroot);
	    if [[$bmax - $broot] >= [$amax - $aroot]] {basedir := b} {basedir := a};
            acost := -1;
            bcost := -1;
            continue;
        };

        # compute cost down move and right move
        if [or [false? bcost-avail] [$bcost <= -1]] {
            bcost ::= diff-down-cost $broot $bmax $aroot $amax $b-src $a-src;
        };
        if [or [false? acost-avail] [$acost <= -1]] {
            acost ::= diff-right-cost $broot $bmax $aroot $amax $b-src $a-src;
        };

        bcost-avail := nil;
        acost-avail := nil;

	# adjust direction
	fixdir := $basedir;
	cond
        [or [$bcost = $acost] [and [$bcost <= -1] [$acost <= -1]]] {
            # if same cost (or -1), keep previous direction.
	    if [$bcost = -1] {
	        bcost-avail := nil;
		acost-avail := nil;
	    }
	    break;
        }
        [$acost <= -1] {
	    fixdir := b;
	    break;
	}
        [$bcost <= -1] {
	    fixdir := a;
	    break;
	}
        [$bcost < $acost] {
	    fixdir := b;
	    break;
	}
        [$bcost > $acost] {
	    fixdir := a;
	    break;
	};

	case $fixdir
	b {
            $broot ++;
            $path append! (b $b-src,$broot);
            acost-avail := nil;
	    bcost-avail := t;
	    $bcost --;
	}
	a {
            $aroot ++;
            $path append! (a $a-src,$aroot);
            acost-avail := t;
	    bcost-avail := nil;
	    $acost --;
        };
    };

    goto diff-display;
};

defun diff-cost-base () {

    println "# Use cost base algorithm";

    costarray ::= dict;
    $amax each to: 0 do: {| a |
        $costarray set ($bmax $a) [$amax - $a];
    };
    $bmax each to: 0 do: {| b |
    	$costarray set ($b $amax) [$bmax - $b];
    };

    if {! [or [$amax = 0] [$bmax = 0]]} {
        [$amax - 1] each to: 0 do: {| a |
            [$bmax - 1] each to: 0 do: {| b |
                if [$b-src,[$b + 1] = $a-src,[$a + 1]] {
	            $costarray set ($b $a) $costarray,([$b + 1] [$a + 1]);
                } {
                    a1 := $costarray,($b [$a + 1]);
                    b1 := $costarray,([$b + 1] $a);
	            if [or [nil? $a1] [nil? $b1]] {break};
		
                    if [$a1 < $b1] {
		        $costarray set ($b $a) [$a1 + 1];
		    } {
		        $costarray set ($b $a) [$b1 + 1];
		    };
	        };
	    };
	};
    };

    if [set? disp] {
        println "# Cost array is:";
    	0 each to: $bmax do: {| b |
            print "# ";
            0 each to: $amax do: {| a |
	        print ["%4d" fmt $costarray,($b $a)];
	    };
	    println;
        };
    };

    broot := 0;                         # root for b-axis, start point is 0
    aroot := 0;                         # root for a-axis, start point is 0
    
    while {or [$broot < $bmax] [$aroot < $amax]} do: {
        if [$broot = $bmax] {
            # position is bottom, move right to end
            $aroot ++;
            $path append! (a $a-src,$aroot);
            continue;
        };
        if [$aroot = $amax] {
            # position is right, move down to end
            $broot ++;
            $path append! (b $b-src,$broot);
            continue;
        };

	if [$b-src,[$broot + 1] = $a-src,[$aroot + 1]] {
            # has slant ($broot, $aroot), move slant
            $broot ++;
            $aroot ++;
            $path append! (s $a-src,$aroot);
            continue;
        };
	
	a1 := $costarray,($broot [$aroot + 1]);
	b1 := $costarray,([$broot + 1] $aroot);

	if [$b1 <= $a1] {
	    # if down move cost less than or equel, then move down
	    $broot ++;
	    $path append! (b $b-src,$broot);
	} {
	    # if right move cost less than, then move right
	    $aroot ++;
	    $path append! (a $a-src,$aroot);
	};
    };

    goto diff-display;
};

defun diff-display () {
    # display path
    if [set? disp] {
        println "# Path: " $path;
    };

    # display diff source
    $path each do: {| i |
        (c s) := $i;
        case $c
            b {println "- " $id-src,$s}
            a {println "+ " $id-src,$s}
            s {println "  " $id-src,$s}
        ;
    };
};

defun diff-has-slant (bidx aidx b-src a-src) {
    try {
        if [$b-src,[$bidx + 1] = $a-src,[$aidx + 1]] {
            return t;
        };
        return nil;
    } catch: {return nil};
};

defun diff-down-cost (broot bmax aroot amax b-src a-src) {
    cost := 1;
    if [[$broot + 1] >= $bmax] {return -1};
    [$broot + 1] each to: [$bmax - 1] do: {| bidx |
        if [$b-src,[$bidx + 1] = $a-src,[$aroot + 1]] {return $cost};
        $cost ++;
    };
    return -1;
};

defun diff-right-cost (broot bmax aroot amax b-src a-src) {
    cost := 1;
    if [[$aroot + 1] >= $amax] {return -1};
    [$aroot + 1] each to: [$amax - 1] do: {| aidx |
        if [$b-src,[$broot + 1] = $a-src,[$aidx + 1]] {return $cost};
        $cost ++;
    };
    return -1;
};
