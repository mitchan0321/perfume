defun diff (bpath apath display-graph: disp) {
    b-src ::= vector(-1);     # before file id array and append never match mark every source list top
    a-src ::= vector(-2);     # after file id array and append never match mark every source list top
    src-id ::= dict;  	      # source -> id dict
    id-src ::= dict;  	      # id -> source dict

    # read before file
    bpath ::= "" . $bpath;
    if [$bpath = "-"] {bpath := "/dev/tty"};
    bfile := `File($bpath);
    $bfile each do: {| r |
        if [$src-id set? $r] {
	    id ::= $src-id get $r;
	    $b-src append! $id;
	} {
	    id ::= [$src-id len] + 1;
	    $src-id set $r $id;
	    $id-src set $id $r;
	    $b-src append! $id;
	};
    };
    $bfile close;

    # read after file
    apath ::= "" . $apath;
    if [$apath = "-"] {apath := "/dev/tty"};
    afile := `File($apath);
    $afile each do: {| r |
        if [$src-id set? $r] {
	    id ::= $src-id get $r;
	    $a-src append! $id;
	} {
	    id ::= [$src-id len] + 1;
	    $src-id set $r $id;
	    $id-src set $id $r;
	    $a-src append! $id;
	};
    };
    $afile close;
 
    # display edit graph
    if [set? disp] {
        _dsw := nil;
        println "# Before source list: " $b-src;
        println "# After source list:  " $a-src;
	println "# Edit graph:";
	println "#   \\ (a)";
        0 each to: [[$b-src len] - 1] do: {| bidx |
	    if $_dsw {print "#     "} {print "# (b) "; _dsw := t};
            0 each to: [[$a-src len] - 1] do: {| aidx |
	        print [if [diff-has-slant $bidx $aidx $b-src $a-src] {result "\\"} {result "."}];
	    };
	    println;
        };
    };

    # walk throw edit graph
    bmax ::= [$b-src len] - 1;
    amax ::= [$a-src len] - 1;
    bcost := -1;			# cost for down move, -1 is slant not found
    acost := -1;			# cost for right move, -1 is slant not founc
    broot := 0;				# root for b-axis, start point is 0
    aroot := 0;				# root for a-axis, start point is 0
    path := ();				# collect walked path
    
    while {or [$broot < $bmax] [$aroot < $amax]} do: {
        if [$broot = $bmax] {
	    # position is bottom, move right to end
	    $aroot ++;
	    $path append! (a $a-src,$aroot);
	    continue;
	};
        if [$aroot = $amax] {
	    # position is right, move down to end
	    $broot ++;
	    $path append! (b $b-src,$broot);
	    continue;
	};

	if [diff-has-slant $broot $aroot $b-src $a-src] {
	    # has slant ($broot, $aroot), move slant and cost clear
	    $broot ++;
	    $aroot ++;
	    $path append! (s $a-src,$aroot);
	    acost := -1;
	    bcost := -1;
	    continue;
	};

	# compute cost down move and right move
	if [$bcost <= -1] {
	    bcost ::= diff-down-cost $broot $bmax $aroot $amax $b-src $a-src;
	};
	if [$acost <= -1] {
	    acost ::= diff-right-cost $broot $bmax $aroot $amax $b-src $a-src;
	};

	if [$bcost = $acost] {
	    # if down cost equal right cost, then move down.
	    $broot ++;
	    $path append! (b $b-src,$broot);
	    acost := -1;
	    bcost ::= $bcost - 1;
	    continue;
	};
	
	if [$acost <= -1] {
	    # right move cost unavailable, move down
	    $broot ++;
	    $path append! (b $b-src,$broot);
	    acost := -1;
	    bcost ::= $bcost - 1;
	    continue;
	};
	
	if [$bcost <= -1] {
	    # down move cost unavailable, move right
	    $aroot ++;
	    $path append! (a $a-src,$aroot);
	    acost ::= $acost - 1;
	    bcost := -1;
	    continue;
	};

       if [$bcost < $acost] {
	    # right move cost weak than down move cost, move down
	    $broot ++;
	    $path append! (b $b-src,$broot);
	    acost := -1;
	    bcost ::= $bcost - 1;
	    continue;
	} {
	    # down move cost weak than right move cost, move right
	    $aroot ++;
	    $path append! (a $a-src,$aroot);
	    acost ::= $acost - 1;
	    bcost := -1;
	    continue;
	};
    };

    # display path
    if [set? disp] {
        println "# Path: " $path;
    };

    # display diff source
    $path each do: {| i |
        (c s) := $i;
	case $c
	    b {println "- " $id-src,$s}
	    a {println "+ " $id-src,$s}
	    s {println "  " $id-src,$s}
	;
    };
};

defun diff-has-slant (bidx aidx b-src a-src) {
    try {
        if [$b-src,[$bidx + 1] = $a-src,[$aidx + 1]] {
            return t;
        };
        return nil;
    } catch: {return nil};
};

defun diff-down-cost (broot bmax aroot amax b-src a-src) {
    cost := 1;
    [$broot + 1] each to: $bmax do: {| bidx |
        if [diff-has-slant $bidx $aroot $b-src $a-src] {return $cost};
	$cost ++;
    };
    return -1;
};

defun diff-right-cost (broot bmax aroot amax b-src a-src) {
    cost := 1;
    [$aroot + 1] each to: $amax do: {| aidx |
        if [diff-has-slant $broot $aidx $b-src $a-src] {return $cost};
	$cost ++;
    };
    return -1;
};
