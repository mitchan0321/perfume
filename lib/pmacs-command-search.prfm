###
### Pmacs editor search command definition.
###

defcommand search-forward desc: "Start search text/regex forward." {
    | main window |
    return [search-sub $main $window <t>];
};

defcommand search-backward desc: "Start search text/regex backward." {
    | main window |
    return [search-sub $main $window <nil>];
};

defun search-prompt (dir mode) {
    $dir ??? ["Search " . $mode " [forward]: "] ["Search " . $mode " [backward]: "];
};

defun search-sub (main window dir) {
    __buff_in_clojure__ ::= $window get-buffer;

    str := "";
    if [$window get-region] {
        buff ::= $window get-buffer;
        geom ::= $window get-geom;
        (sy sx) ::= $window end-region;
        (ey ex) ::= $window get-source-index $buff $geom;
        $window copy-region $sy $sx $ey $ex;
        str ::= $window get-copy-buffer;
        setvar SearchString $str;
    };

    $window start-search;
    $window reset-search;
    $window set-search-result [$__buff_in_clojure__ search $str];
    $window stay-search;
    if {$str != ""} {
        $main send-key-event (KEY_UP);
    };

    mini-input-until-enter $main $window 
        init-value: $str
        prompt: [search-prompt $dir $SEARCH_MODE]
        cancel-proc: {
	    $window cancel-search [$window get-search-string];
	    show-message "Canceled.";
	    return ALL;
        }
        enter-proc: {| value |
	    $window end-search $value;
	    show-message "Search complite.";
            return ALL;
        }
        keyin-proc: {| value in-key |
            if {eq? $in-key KEY_DOWN} {
                $window move-to-next-search;
                return ALL;
            };
            if {eq? $in-key KEY_UP} {
                $window move-to-previous-search;
                return ALL;
            };
            if {eq? $in-key KEY_SF} {
                buff ::= $window get-buffer;
                geom ::= $window get-geom;
                (sy sx) ::= $window get-source-index $buff $geom;
                $window apply-command $main $window "" smooth-scroll-down;
                (ey ex) ::= $window get-source-index $buff $geom;
                $geom set! CursorLine [$geom,CursorLine - [$ey - $sy]];
                $window stay-search;
                return ALL;
            };
            if {eq? $in-key KEY_SR} {
                buff ::= $window get-buffer;
                geom ::= $window get-geom;
                (sy sx) ::= $window get-source-index $buff $geom;
                $window apply-command $main $window "" smooth-scroll-up;
                (ey ex) ::= $window get-source-index $buff $geom;
                $geom set! CursorLine [$geom,CursorLine - [$ey - $sy]];
                $window stay-search;
                return ALL;
            };
            if {eq? $in-key KEY_SRIGHT} {
                buff ::= $window get-buffer;
                geom ::= $window get-geom;
                (sy sx) ::= $window get-source-index $buff $geom;
                $window apply-command $main $window "" smooth-scroll-right;
                (ey ex) ::= $window get-source-index $buff $geom;
                $geom set! CursorColumn [$geom,CursorColumn - [$ex - $sx]];
                $window stay-search;
                return ALL;
            };
            if {eq? $in-key KEY_SLEFT} {
                buff ::= $window get-buffer;
                geom ::= $window get-geom;
                (sy sx) ::= $window get-source-index $buff $geom;
                $window apply-command $main $window "" smooth-scroll-left;
                (ey ex) ::= $window get-source-index $buff $geom;
                $geom set! CursorColumn [$geom,CursorColumn - [$ex - $sx]];
                $window stay-search;
                return ALL;
            };
            if {eq? $in-key CTRL_F} {
                str ::= $window get-search-string;
                if [$value = ""] {
                    $main mini-input-value-override $str [$str len];
                    $window set-search-result [$__buff_in_clojure__ search $str];
                } {
                    $window set-search-result [$__buff_in_clojure__ search $value];
                };
                $window stay-search;
                $main send-key-event (KEY_DOWN);
                return ALL;
            };
            if {eq? $in-key CTRL_R} {
                str ::= $window get-search-string;
                if [$value = ""] {
                    $main mini-input-value-override $str [$str len];
                    $window set-search-result [$__buff_in_clojure__ search $str];
                } {
                    $window set-search-result [$__buff_in_clojure__ search $value];
                };
                $window stay-search;
                $main send-key-event (KEY_UP);
                return ALL;
            };
            if {eq? $in-key CTRL_V} {
                $window set-search-result [$__buff_in_clojure__ search $value];
                $window move-to-next-search;
                return ALL;
            };
            if {eq? $in-key CTRL_T} {
                case $SEARCH_MODE
                    regex {setconf SEARCH_MODE text}
                    text  {setconf SEARCH_MODE regex}
                ;;
                $MainWindow set-mini-input-prompt [search-prompt $dir $SEARCH_MODE];
                $window reset-search;
                $window set-search-result [$__buff_in_clojure__ search $value];
                $window stay-search;
                if $dir {
                    $main send-key-event (KEY_DOWN);
                } {
                    $main send-key-event (KEY_UP);
                };
                return ALL;
            };
            if {or {eq? $in-key CTRL_H} {eq? $in-key KEY_DC}
	           {eq? $in-key KEY_BACKSPACE} {eq? $in-key kDC5}} {
                $window reset-search;
                $window set-search-result [$__buff_in_clojure__ search $value];
                $window move-to-next-search;
                return ALL;
            };
            if {string? $in-key} {
                $window reset-search;
                $window set-search-result [$__buff_in_clojure__ search $value];
                $window stay-search;
                if $dir {
                    $main send-key-event (KEY_DOWN);
                } {
                    $main send-key-event (KEY_UP);
                };
                return ALL;
            };
        }
    ;;

    return SELF;
};

defcommand search-next desc: "Search forward for previous text/regex." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    str ::= $window get-search-string;
    if {$str = ""} {
        show-message :bell "No set search string, execute 'search' command first.";
        return SELF;
    };
    $window mark;
    (y x) ::= case $SEARCH_MODE
        regex    {get-next-search      $ey $ex [$str rquote] $buff;}
        default: {get-next-search-text $ey $ex [$str rquote] $buff;}
    ;

    $window cursor-move-to-fit-center $geom $y $x;
    sts ::= get-next-search-length $y $x [$str rquote] $buff $SEARCH_MODE;
    if $sts {
        (dummyy dummyx len) := $sts;
        $window set-spot-color-item SEARCH $y $x $len SEARCH_CURRENT_HILIGHT;
        $main add-background after: 3000 job-id: "00-SEARCH" {
            $window remove-spot-color-item SEARCH;
        };
    };
    
    return SELF;
};

defcommand search-previous desc: "Search backward for previous text/regex." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    (ey ex) ::= $window get-source-index $buff $geom;
    str ::= $window get-search-string;
    if {$str = ""} {
        show-message :bell "No set search string, execute 'search' command first.";
        return SELF;
    };
    $window mark;
    (y x) ::= case $SEARCH_MODE
        regex    {get-previous-search      $ey $ex [$str rquote] $buff;}
        default: {get-previous-search-text $ey $ex [$str rquote] $buff;}
    ;

    $window cursor-move-to-fit-center $geom $y $x;
    sts ::= get-next-search-length $y $x [$str rquote] $buff $SEARCH_MODE;
    if $sts {
        (dummyy dummyx len) := $sts;
        $window set-spot-color-item SEARCH $y $x $len SEARCH_CURRENT_HILIGHT;
        $main add-background after: 3000 job-id: ["00-SEARCH" . [$buff get-buffer-name]] {
            $window remove-spot-color-item SEARCH;
        };
    };

    return SELF;
};

defun get-next-search (y x str buff) {
    r ::= $buff get-buffer-line $y;
    $r ?? {return ($y $x)};

    sl ::= $r =~ :all $str;
    if $sl {
        sl ::= $sl filter {| el | [$el get 0] > $x};
        if {$sl null?} else: {
            return ($y [$sl car : car]);
        };
    };
    
    result := <nil>;
    $buff buffer-select [$y + 1] [$buff get-buffer-length] {
        | src l |
        sl ::= $src =~ :all $str;
        if $sl {
            result := ($l [$sl car : car]);
        };
        if $result {break};
    };
    if $result {
        return $result;
    };
    return ($y $x);
};

defun get-next-search-length (y x str buff mode) {
    r ::= $buff get-buffer-line $y;
    $r ?? {return <nil>};

    sl ::= case $mode
        regex    {$r =~ :all $str}
        default: {$r =~ :all :text :nocase $str}
    ;;
    
    if $sl {
        sl ::= $sl filter {| el | [$el get 0] >= $x};
        if {$sl null?} else: {
            return ($y [$sl car : car] [[$sl car : get 1] - [$sl car : get 0]]);
        };
    };
    
    result := <nil>;
    $buff buffer-select [$y + 1] [$buff get-buffer-length] {
        | src l |
        sl ::= case $mode
            regex    {sl ::= $src =~ :all $str}
            default: {sl ::= $src =~ :all :text :nocase $str}
        ;;

        if $sl {
            result := ($l [$sl car : car] [[$sl car : get 1] - [$sl car : get 0]]);
        };
        if $result {break};
    };
    if $result {
        return $result;
    };
    return <nil>;
};

defun get-next-search-text (y x str buff) {
    r ::= $buff get-buffer-line $y;
    $r ?? {return ($y $x)};

    sl ::= $r =~ :all :text :nocase $str;
    if $sl {
        sl ::= $sl filter {| el | [$el get 0] > $x};
        if {$sl null?} else: {
            return ($y [$sl car : car]);
        };
    };
    
    result := <nil>;
    $buff buffer-select [$y + 1] [$buff get-buffer-length] {
        | src l |
        sl ::= $src =~ :all :text :nocase $str;
        if $sl {
            result := ($l [$sl car : car]);
        };
        if $result {break};
    };
    if $result {
        return $result;
    };
    return ($y $x);
};

defun get-previous-search (y x str buff) {
    if {and {$y = 0} {$x = 0}} {return ($y $x)};
        
    r ::= $buff get-buffer-line $y;
    if $r {
        sl ::= $r =~ :all $str;
        if $sl {
            sl ::= $sl reverse;
            sl ::= $sl filter {| el | [$el get 0] < $x};
            if {$sl null?} else: {
                return ($y [$sl car : car]);
            };
        };
    };
    
    if {$y = 0} {return ($y $x)};
    result := <nil>;
    $buff buffer-select [$y - 1] 0 {
        | src l |
        sl ::= $src =~ :all $str;
        if $sl {
            sl ::= $sl reverse;
            result := ($l [$sl car : car]);
        };
        if $result {break};
    };
    if $result {
        return $result;
    };
    return ($y $x);
};

defun get-previous-search-text (y x str buff) {
    if {and {$y = 0} {$x = 0}} {return ($y $x)};
        
    r ::= $buff get-buffer-line $y;
    if $r {
        sl ::= $r =~ :all :text :nocase $str;
        if $sl {
            sl ::= $sl reverse;
            sl ::= $sl filter {| el | [$el get 0] < $x};
            if {$sl null?} else: {
                return ($y [$sl car : car]);
            };
        };
    };
    
    if {$y = 0} {return ($y $x)};
    result := <nil>;
    $buff buffer-select [$y - 1] 0 {
        | src l |
        sl ::= $src =~ :all :text :nocase $str;
        if $sl {
            sl ::= $sl reverse;
            result := ($l [$sl car : car]);
        };
        if $result {break};
    };
    if $result {
        return $result;
    };
    return ($y $x);
};

defcommand grep desc: "Run grep on the entered text." {
    | main window |
    buff ::= $window get-buffer;
    dir ::= [$buff get-content-dir] . "/";

    mini-input-file-chooser $main $window 
        init-value: $dir
        prompt: "Directory: "
        enter-proc: {| value |
            if {[$value len] = 0} {
                show-message :bell "No directory specified.";
                return ALL;
            };
            directory := $value;
            if {file dir? $directory} else: {
                show-message :bell ["Not directory: " . $directory];
                return ALL;
            };

            str := "";
            buff ::= $window get-buffer;
            geom ::= $window get-geom;
            if [$window get-region] {
                ### eval region
                (sy sx) ::= $window end-region;
                (ey ex) ::= $window get-source-index $buff $geom;
                str ::= $window get-region-string $sy $sx $ey $ex;
            };
            
            mini-input-until-enter $main $window
                init-value: ["grep -rnHe '" . $str "' *"]
                prompt: "grep command line: "
                index: 12
                enter-proc: {| value |
                    if {[$value len] = 0} {
                        show-message :bell "No grep command line specified.";
                        return ALL;
                    };

                    do-command-async $window "*Grep*" $directory $value;
                    return ALL;
                }
            ;;
            return ALL;
        }
    ;;
    
    result ALL;
};

defcommand grep-current-word desc: "Run grep on the near cursor point word." {
    | main window |
    buff ::= $window get-buffer;
    geom ::= $window get-geom;
    dir ::= [$buff get-content-dir] . "/";

    orig_geom ::= $geom clone;
    $window apply-command $main $window "" select-region-word;

    [$window in-region?] ?? {
        show-message "Word not found.";
        return ALL;
    };
    
    (sy sx) ::= $window end-region;
    (ey ex) ::= $window get-source-index $buff $geom;
    str ::= $window get-region-string $sy $sx $ey $ex;
    $geom restore-geom $orig_geom;
    command ::= "grep -nHe '" . $str "' *";

    do-command-async $window "*Grep*" $dir $command;
    return ALL;
};

defcommand grep-next desc: "Jump next *Grep* buffer line." {
    | main window |
    grep-buff ::= BufferManager find-buffer "*Grep*";
    $grep-buff ?? {
        show-message :bell "No *Grep* buffer, execute 'grep' command first.";
        return ALL;
    };
    dir ::= chdir-cwd $grep-buff;
    
    w1 ::= $main get-window-by-name "Window#1";
    w2 ::= $main get-window-by-name "Window#2";
    if {and $w1 $w2} else: {
        $main create-split-vertical-window;
    };
    $main bind-buffer "Window#1" $grep-buff;
    grep-window ::= $main get-window-by-name "Window#1";
    grep-geom ::= $grep-window get-geom;
    (ey ex) ::= $grep-window get-source-index $grep-buff $grep-geom;
    str := <nil>;
    while {true} do: {
        $ey ++;
        str ::= $grep-buff get-buffer-line $ey;
        if {nil? $str} {
            break;
        };
        l ::= $str split sep: ":";
        f ::= $l >>;
        $f ?? {continue};
        n ::= $l >>;
        $n ?? {continue};

        if {and {$f != ""} {$n != ""} {$n numeric?}} {break};
    };
    if {$ey >= [$grep-buff get-buffer-length]} {ey ::= $grep-buff get-buffer-length : - 1};
    $window cursor-move-to-fit-center $grep-geom $ey 0;
    $window cursor-fit-to-top $grep-geom;
    $str ?? {
        show-message :bell "Bottom of *Grep* buffer.";
        return ALL;
    };

    ### show-message ["File: " . $f ", line: " $n];
    f ::= $f split : last : car;
    f ::= $f ?? "";
    if {[$f at 0] = "/"} {
        show-file-at "Window#2" [path-adjust $f] $n;
    } {
        show-file-at "Window#2" [path-adjust [$dir . $f]] $n;
    };

    return ALL;
};

defcommand grep-previous desc: "Jump previous *Grep* buffer line." {
    | main window |
    grep-buff ::= BufferManager find-buffer "*Grep*";
    $grep-buff ?? {
        show-message :bell "No *Grep* buffer, execute 'grep' command first.";
        return ALL;
    };
    dir ::= chdir-cwd $grep-buff;
    
    w1 ::= $main get-window-by-name "Window#1";
    w2 ::= $main get-window-by-name "Window#2";
    if {and $w1 $w2} else: {
        $main create-split-vertical-window;
    };
    $main bind-buffer "Window#1" $grep-buff;
    grep-window ::= $main get-window-by-name "Window#1";
    grep-geom ::= $grep-window get-geom;
    (ey ex) ::= $grep-window get-source-index $grep-buff $grep-geom;
    str := <nil>;
    while {true} do: {
        $ey --;
        str ::= $grep-buff get-buffer-line $ey;
        if {$ey < 0} {
            str := <nil>; 
            break;
        };
        if {nil? $str} {
            str := <nil>; 
            break;
        };
        l ::= $str split sep: ":";
        f ::= $l >>;
        $f ?? {continue};
        n ::= $l >>;
        $n ?? {continue};

        if {and {$f != ""} {$n != ""} {$n numeric?}} {break};
    };
    if {$ey < 0} {ey := 0};
    $window cursor-move-to-fit-center $grep-geom $ey 0;
    $window cursor-fit-to-top $grep-geom;
    $str ?? {
        show-message :bell "Top of *Grep* buffer.";
        return ALL;
    };

    ### show-message ["File: " . $f ", line: " $n];
    f ::= $f split : last : car;
    f ::= $f ?? "";
    if {[$f at 0] = "/"} {
        show-file-at "Window#2" [path-adjust $f] $n;
    } {
        show-file-at "Window#2" [path-adjust [$dir . $f]] $n;
    };
    
    return ALL;
};

defun chdir-cwd (buff) {
    r ::= $buff get-buffer-line 0;
    if $r {
        l ::= $r split sep: ":";
        if {[$l len] < 2} {return "./"};
        if {[$l get 0] = "CWD"} {
            cwd ::= $l get 1;
            if $cwd {
                try {
                    result ::= $cwd clean;
                    if {[$result at -1] != "/"} {
                        $result append! "/";
                    };
                    return $result;
                } catch: {| e |
                    show-message :bell ["Bad CWD line: " . $r];
                };
            };
        };
    };
    return "./";
};

defun show-file-at (window-name path line) {
    buff ::= BufferManager get-buffer-by-path $path;
    $buff ?? {
        buff ::= new EditBuffer;
        (result err) ::= $buff load-content $path;
        $result ?? {
            show-message :bell ["Open Failed, path: " . $path " ("  $err ")"];
            return;
        };
        if {$buff enc-error?} {
            show-message :bell "File decode error occured!! Try ALT-e and specify another encoding for re-load.";
        };
    };
    $MainWindow bind-buffer $window-name $buff;
    $MainWindow roll-to-window $window-name;
    win ::= $MainWindow get-current-window;
    geom ::= $win get-geom;
    $win cursor-move-to-fit-center $geom [$line - 1] 0;
};
