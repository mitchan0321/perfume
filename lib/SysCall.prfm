class SysCall;

SysCall method sleep (msec) {
    __checkEnv;
    pause (SLEEP $msec);
    return <nil>;
};

SysCall method exit (status) {
    __checkEnv;
    pause (EXIT $status);
    ### never reach
    return <nil>;
};

SysCall method apply-editor (body) {
    __checkEnv;
    TaskManager enqueue (APPLY_EDITOR $body $SELF);
    pause (SLEEP 0);
    return [$SELF get-result];
};

SysCall method new-task (name body args) {
    __checkEnv;
    TaskManager enqueue (NEW_TASK $name $body $args $SELF);
    pause (SLEEP 0);
    return [$SELF get-task];
};

SysCall method wait (child) {
    __checkEnv;
    if {$SELF child-avail? $child} {
        set __self__ $SELF;
        TaskManager add-wait-hook [$SELF get-name] ($SELF $child {$__self__ child-exited? $child});
        pause (WAIT 0);
        TaskManager delete-wait-hook [$SELF get-name];
        return [$SELF get-child-exit-status $child];
    };
    if {$SELF child-exited? $child} {
        return [$SELF get-child-exit-status $child];
    };
    return <nil>;
};

SysCall method wait-any () {
    __checkEnv;
    if {$SELF child-exited-any?} {
        return [$SELF get-child-exit-status-any];
    };
    if {$SELF child-avail-any?} {
        set __self__ $SELF;
        TaskManager add-wait-hook [$SELF get-name] ($SELF $SELF {$__self__ child-exited-any?});
        pause (WAIT 0);
        TaskManager delete-wait-hook [$SELF get-name];
        return [$SELF get-child-exit-status-any];
    };
    return <nil>;
};

SysCall method gets (f) {
    __checkEnv;
    TaskManager add-wait-hook [$SELF get-name] ($SELF "Q>" {$f ready?});
    r ::= $f gets;
    TaskManager delete-wait-hook [$SELF get-name];
    return $r;
};

SysCall method puts (f r) {
    __checkEnv;
    TaskManager add-wait-hook [$SELF get-name] ($SELF "Q<" {$f ready-write?});
    sts ::= $f puts $r;
    TaskManager delete-wait-hook [$SELF get-name];
    return $sts;
};

SysCall method __checkEnv () {
    if {! [defvar? SELF]}         {throw ErrNotTask "Not a Task Environment."};
    if {! [$SELF instance? Task]} {throw ErrNotTask "Not a Task Environment."};
};

