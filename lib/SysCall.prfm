class SysCall;

SysCall method sleep (msec) {
    __checkEnv;
    pause (SLEEP $msec);
    return <nil>;
};

SysCall method exit (status) {
    __checkEnv;
    pause (EXIT $status);
    ### never reach
    return <nil>;
};

SysCall method apply-editor (body) {
    __checkEnv;
    TaskManager enqueue (APPLY_EDITOR $body $SELF);
    pause (SLEEP 0);
    return [$SELF get-result];
};

SysCall method new-task (name body args: arg) {
    __checkEnv;
    TaskManager enqueue (NEW_TASK $name $body $arg $SELF);
    pause (SLEEP 0);
    return [$SELF get-task];
};

SysCall method wait (child) {
    __checkEnv;
    if {$SELF child-avail? $child} {
        set __self__ $SELF;
        TaskManager add-wait-hook [$SELF get-name] ($SELF $child {$__self__ child-exited? $child});
        pause (WAIT 0);
        TaskManager delete-wait-hook [$SELF get-name];
        return [$SELF get-child-exit-status $child];
    };
    if {$SELF child-exited? $child} {
        return [$SELF get-child-exit-status $child];
    };
    return <nil>;
};

SysCall method wait-any () {
    __checkEnv;
    if {$SELF child-exited-any?} {
        return [$SELF get-child-exit-status-any];
    };
    if {$SELF child-avail-any?} {
        set __self__ $SELF;
        TaskManager add-wait-hook [$SELF get-name] ($SELF $SELF {$__self__ child-exited-any?});
        pause (WAIT 0);
        TaskManager delete-wait-hook [$SELF get-name];
        return [$SELF get-child-exit-status-any];
    };
    return <nil>;
};

SysCall method gets (f) {
    __checkEnv;
    case [$f get-tag]
    STDIN {
        set __self__ $SELF;
        TaskManager add-wait-hook [$SELF get-name] ($SELF "C>" {
            if {TaskManager stdin-ready?} {
                ### delivery common standard in to task standard in.
                r ::= TaskManager recv-from-stdin;
                $__self__ delivery-stdin $r;
                result <t>;
            } {
                result <nil>;
            };
        });
        r ::= $f gets;
        TaskManager delete-wait-hook [$SELF get-name];
        return $r;
    }
    SOCK {
        TaskManager add-wait-hook [$SELF get-name] ($SELF "S>" {
            (ifds ofds efds) ::= select ([$f fd?]) () () 0;
            if {$ifds null?} {
                return <nil>;
            } {
                return <t>;
            };
        });
        pause (WAIT 0);
        TaskManager delete-wait-hook [$SELF get-name];
        return [$f gets];
    }
    default: {
        TaskManager add-wait-hook [$SELF get-name] ($SELF "Q>" {$f ready?});
        r ::= $f gets;
        TaskManager delete-wait-hook [$SELF get-name];
        return $r;
    }
    ;;
};

SysCall method puts (f args: arg) {
    __checkEnv;
    r ::= $arg join sep: "";
    if {$f instance? Stream} {
        TaskManager add-wait-hook [$SELF get-name] ($SELF "Q<" {$f ready-write?});
        sts ::= $f puts $r;
        TaskManager delete-wait-hook [$SELF get-name];
        return $sts;
    } {
        return [$f puts $r];
    };
};

SysCall method accept (fd) {
    __checkEnv;
    TaskManager add-wait-hook [$SELF get-name] ($SELF "A>" {
        (ifds ofds efds) ::= select ($fd) () () 0;
        if {$ifds null?} {
            return <nil>;
        } {
            return <t>;
        };
    });
    pause (WAIT 0);
    TaskManager delete-wait-hook [$SELF get-name];
    (fd addr port) ::= accept $fd;
    f ::= new File;
    $f set! $fd mode: io;
    $f set-encoding UTF-8;
    $f set-newline <t>;
    $f set-noblock <t>;
    $f set-readbuffer-max 4096;
    $f set-tag SOCK;
    return ($f $addr $port);
};

SysCall method connect (host port) {
    __checkEnv;
    fd ::= connect $host $port :noblock;
    __err_in_syscall__ := <nil>;
    TaskManager add-wait-hook [$SELF get-name] ($SELF "A<" {
        sts := <nil>;
        try {
            sts ::= connect? $fd;
        } catch: {| e |
            setc __err_in_syscall__ $e;
            sts := <t>;
        };
    });
    pause (WAIT 0);
    TaskManager delete-wait-hook [$SELF get-name];
    if $__err_in_syscall__ {
        $SELF add-request-stat (ERROR $__err_in_syscall__);
        return <nil>;
    };
    f ::= new File;
    $f set! $fd mode: io;
    $f set-encoding UTF-8;
    $f set-newline <t>;
    $f set-noblock <t>;
    $f set-readbuffer-max 4096;
    $f set-tag SOCK;
    return $f;
};

SysCall method recv (f) {
    __checkEnv;
    TaskManager add-wait-hook [$SELF get-name] ($SELF "S>" {
        (ifds ofds efds) ::= select ([$f fd?]) () () 0;
        if {$ifds null?} {
            return <nil>;
        } {
            return <t>;
        };
    });
    pause (WAIT 0);
    TaskManager delete-wait-hook [$SELF get-name];
    return [$f gets];
};

SysCall method update-screen () {
    $MainWindow set-force-update;
};

SysCall method __checkEnv () {
    if {! [defvar? SELF]}         {throw ErrNotTask "Not a Task Environment."};
    if {! [$SELF instance? Task]} {throw ErrNotTask "Not a Task Environment."};
};

