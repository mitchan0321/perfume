# Class name: Stream
#
# Description:
#   This class is internal input/output object like the File class object.
#
#   Impliment methods are:
#     Stream::eof?   --- is eof?
#     Stream::close  --- close stream object.
#     Stream::ready? --- if available internal buffer then return <t>.
#     Stream::puts   --- put string.
#     Stream::gets   --- get string.
#     Stream::flush  --- flush internal buffer.
#     Stream::stat   --- return status list.
#     Stream::each   --- each all queue.
#     Stream::clear  --- clear error.
#     Stream::set-newline  --- set newline mode.
#     -- Thease methods are File clases same name methods specification.
#
#     Stream::set-comode --- set co-routine mode.
#     Stream::set-limit ---- set buffer length limit.
#     Stream::set-nolimit -- set buffer length nolimit.
#     Stream::get-count ---- get buffer length.
#     Stream::set-itemlimit -- set buffer item limit.
#     -- Thease methods are Stream clases special methods.
#

class Stream;

Stream method init (args: a) {
    sets queue ();
    sets eof <nil>;
    sets co <nil>;
    sets name "";
    if [and [set? a] [! [$a null?]]] then: {sets name [$a item]};
    sets limit 2048;
#    sets limit 5;	# for debug
    sets count 0;
    sets newline <nil>;
    sets itemlimit 512;
    sets itemcount 0;
    sets tag <nil>;
};

Stream method eof? () {
    if [! [$queue null?]] then: {return <nil>};
    return $eof;
};

Stream method close () {
    sets itemcount 0;
    sets eof <t>;
};

Stream method clear-eof () {
    sets eof <nil>;
};

Stream method clear () {
    atomic {
        sets queue ();
        sets count 0;
        sets itemcount 0;
        try {unsets shortcut};
        sets eof <nil>;
    };
};

Stream method ready? (timeout: timeout) {
    if [$queue null?] {
        return <nil>;
    };
    return <t>;
};

Stream method ready-write? () {
    if {and {$itemcount < $itemlimit} {$count < $limit}} {
        return <t>;
    };
    return <nil>;
};

Stream method puts (nonewline: nonewline args: r) {
    lnewline := <t>;
    if {set? nonewline} {lnewline := <nil>};
    if {[$r len] = 0} {
        throw ErrSyntax "Syntax error at 'puts', syntax: Stream puts [:nonewline] val ...";
    };
    $r each do: {| i | puts-sub $i $lnewline};
};

Stream method puts-sub (i lnewline) {
    if [eof?] {
        throw ErrFileAccess "Stream is closed.";
    };

    while {or {$itemcount >= $itemlimit} {$count >= $limit}} do: {
	if $co then: {
	    pause @WRITE;
        } else: {
	    throw ErrFileAccess "Stream is full.";
        };
	if [eof?] then: {throw ErrFileAccess "Stream is closed."};
    };
   
    atomic {
        if {sets? shortcut} {
	    if $lnewline {
                sets shortcut [$shortcut append! $i];
                $count ++;
                sets itemcount 0;
	    } {
	        if {string? [$shortcut last : car]} {
		    $shortcut last : car : append! $i;
		    $itemcount ++;
	        } {
                    sets shortcut [$shortcut append! ["" . $i]];
                    $count ++;
                    sets itemcount 1;
	        };
	    };
        } {
	    if $lnewline {
	        sets shortcut [$queue append! $i];
	        $count ++;
                sets itemcount 0;
	    } {
	        sets shortcut [$queue append! ["" . $i]];
	        $count ++;
                sets itemcount 1;
	    };
        };
    };

    return <t>;
};

Stream method in-pooling? () {
    and {$itemcount > 0} {$itemcount < $itemlimit};
};

Stream method gets (nonewline: nonewline) {
    if [eof?] then: {return <nil>};
    
    while {$queue null?} do: {
	if $co then: {
	    pause @READ;
	} else: {
	    throw ErrFileAccess "Stream is no data.";
        };
	if [eof?] then: {return <nil>};
    };
    
    r := <nil>;
    atomic {
        $count --;
        itemcount := 0;
        if {$count <= 0} {
            unsets shortcut;
            r ::= $queue car;
            sets queue ();
        } {
            r ::= $queue car;
            sets queue [$queue cdr];
        };
    };
    return $r;
};

Stream method gets-nowait () {
    if [eof?] then: {return <nil>};
    
    if {$queue null?} {
        return <nil>;
    };
    
    r := <nil>;
    atomic {
        $count --;
        itemcount := 0;
        if {$count <= 0} {
            unsets shortcut;
            r ::= $queue car;
            sets queue ();
        } {
            r ::= $queue car;
            sets queue [$queue cdr];
        };
    };
    return $r;
};

Stream method flush () {
    return <t>;
};

Stream method stat () {
    return (
	    (fd . <nil>) (mode . io) (path . $name) (eof . $eof)
	    (limit . $limit) (count . $count) (newline . $newline)
	    (itemlimit . $itemlimit) (itemcount . $itemcount)
            (comode . $co) (tag . $tag)
	   );
};

Stream method each (do: body) {
    while {! [eof?]} do: {
	r ::= gets;
	if [nil? $r] then: {break};
	yield $body $r;
    };
};

Stream method set-comode () {
    sets co <t>;
};

Stream method set-nocomode () {
    sets co <nil>;
};

Stream method set-limit (l) {
    sets limit $l;
};

Stream method set-nolimit () {
    sets limit [2 ^ 64 : - 1];
};

Stream method set-itemlimit (l) {
    sets itemlimit $l;
};

Stream method get-count () {
    return $count;
};

Stream method string () {
    "Stream::" . $name "#" [stat];
};

Stream method set-newline (m) {
    sets newline $m;
    return $m;
};

Stream method set-tag (t) {
    sets tag $t;
};

Stream method get-tag () {
    return $tag;
};
