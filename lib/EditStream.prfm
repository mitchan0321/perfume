class EditStream;

EditStream method init (args: args) {
    sets Buffer <nil>;
    sets Name <nil>;
    sets Locate 0;
    sets Newline <t>;
    sets ColLimit 80;
    sets Prompt "";
};

EditStream method open (name) {
    sets Buffer [new EditBuffer];
    $Buffer load-content $name :init-only buffer-name: $name;
    sets Name [$Buffer get-buffer-name];
    return $Buffer;
};

EditStream method get-buffer () {
    return $Buffer;
};

EditStream method eof? () {
    $Buffer ?? {return <t>};
    
    [[$Buffer get-buffer-length] <= $Locate] ??? <t> <nil>;
};

EditStream method close () {
    return <t>;
};

EditStream method clear () {
    sets Locate 0;
};

EditStream method ready? (timeout: timeout) {
    $Buffer ?? {return <nil>};
    
    [eof?] ??? <nil> <t>;
};

EditStream method puts (nonewline: nonewline args: r) {
    $Buffer ?? {throw FileNotOpen "EditBuffer stream not open."};

    r ::= $r join sep: "";
    atomic {
        len ::= $Buffer get-buffer-length;
        if {$len > 0} {$len --};
        cur ::= $Buffer get-buffer-line $len;
        cur ::= $cur ?? "";
        col ::= $cur len;
        if {$col >= $ColLimit} {
            $Buffer append-string "";
            $len ++;
            col := 0;
        };
        r ::= $r . [[true? Newline] ??? [[true? nonewline] ??? "" "\r"] ""]; 
        while {[$r len : + $col] >= $ColLimit} do: {
            $Buffer insert-string-at [$r sub 0 [$ColLimit - $col]] $len $col;
            r ::= $r sub [$ColLimit - $col];
            $Buffer append-string "";
            $len ++;
            col := 0;
        };
        $Buffer insert-string-at $r $len $col;
    };
    return <t>;
};

EditStream method gets (nonewline: nonewline) {
    $Buffer ?? {throw FileNotOpen "EditBuffer stream not open."};

    atomic {
        r ::= $Buffer get-buffer-line $Locate;
        $Locate ++;
    };
    return $r;
};

EditStream method ungets (n) {
    atomic {
        $Locate -- $n;
        if {$Locate < 0} {Locate := 0};
    };
};

EditStream method flush () {
    return <t>;
};

EditStream method stat () {
    return (
        (fd . <nil>) (mode . io) (path . $Name) (eof . [eof?]) (newline . $Newline)
    );
};

EditStream method each (do: body) {
    while {! [eof?]} do: {
        yield $body [gets];
    };
};

EditStream method string () {
    $Buffer ?? {return ""};
    return ["<" . $Name ">"];
};

EditStream method set-newline (m) {
    sets Newline $m;
    return $m;
};

EditStream method set-columnlimit (l) {
    if {$l <= 0} {l := 80};
    sets ColLimit $l;
    return $l;
};

EditStream method set-prompt (p) {
    sets Prompt $p;
};

EditStream method get-prompt () {
    return $Prompt;
};
