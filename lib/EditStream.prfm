class EditStream;

EditStream method init (args: args) {
    sets Buffer <nil>;
    sets Name <nil>;
    sets Locate 0;
    sets Newline <t>;
};

EditStream method open (name) {
    sets Buffer [new EditBuffer];
    $Buffer load-content $name :init-only buffer-name: $name;
    sets Name [$Buffer get-buffer-name];
    return $Buffer;
};

EditStream method eof? () {
    $Buffer ?? {return <t>};
    
    [[$Buffer get-buffer-length] <= $Locate] ??? <t> <nil>;
};

EditStream method close () {
    return <t>;
};

EditStream method clear () {
    sets Locate 0;
};

EditStream method ready? (timeout: timeout) {
    $Buffer ?? {return <nil>};
    
    [eof?] ??? <nil> <t>;
};

EditStream method puts (nonewline: nonewline args: r) {
    $Buffer ?? {throw FileNotOpen "EditBuffer stream not open."};
    
    $r each do: {| i |
        len ::= $Buffer get-buffer-length;
        $len --;
        len ::= {$len < 0} ??? 0 $len;
        cur ::= $Buffer get-buffer-line $len;
        col ::= $cur ??? {$cur len} 0;
        $Buffer insert-string-at 
            ["" . $i [[true? Newline] ??? [[true? nonewline] ??? "" "\r"] ""]]
            $len $col
        ;;
    };
    return <t>;
};

EditStream method gets (nonewline: nonewline) {
    $Buffer ?? {throw FileNotOpen "EditBuffer stream not open."};

    r ::= $Buffer get-buffer-line $Locate;
    $Locate ++;
    return $r;
};

EditStream method flush () {
    return <t>;
};

EditStream method stat () {
    return (
        (fd . <nil>) (mode . io) (path . $Name) (eof . [eof?]) (newline . $Newline)
    );
};

EditStream method each (do: body) {
    while {! [eof?]} do: {
        yield $body [gets];
    };
};

EditStream method string () {
    $Buffer ?? {return ""};
    return ["<" . $Name ">"];
};

EditStream method set-newline (m) {
    sets Newline $m;
    return $m;
};
