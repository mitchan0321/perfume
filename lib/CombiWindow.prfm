class CombiWindow WindowBase;

CombiWindow method init (main y x line column) {
    apply {WindowBase method? init :};
    
    curs ::= $main get-curs;

    top_offset ::= $TOP_OF_STATUS_BAR ??? 1 0;

    case $VERTICAL_WINDOW_SIDE
    LEFT {
        sets BufferCurs [
            curs-new-window
            $curs
            [$y + $top_offset]  [$x + 1]                ### Left side Vertical Line
            [$line - 1]         [$column - 1]
        ];
    }
    RIGHT {
        sets BufferCurs [
            curs-new-window
            $curs
            [$y + $top_offset]  $x                      ### Right side Vertical Line
            [$line - 1]         [$column - 1]
        ];
    }
    default: {
        sets BufferCurs [
            curs-new-window
            $curs
            [$y + $top_offset]  [$x + 1]                ### Left side Vertical Line
            [$line - 1]         [$column - 1]
        ];
    }
    ;;

    if $TOP_OF_STATUS_BAR {
        sets StatusLineCurs [
            curs-new-window
            $curs
            $y                  $x
            1 	     		$column
        ];
    } {
        sets StatusLineCurs [
            curs-new-window
            $curs
            [$y + $line : - 1]  $x
            1 	     		$column
        ];
    };
    
    case $VERTICAL_WINDOW_SIDE
    LEFT {
        sets VerticalLineCurs [
            curs-new-window
            $curs
            [$y + $top_offset]  $x                      ### Left side Vertical Line
            [$line - 1] 	1
        ];
    }
    RIGHT {
        sets VerticalLineCurs [
            curs-new-window
            $curs
            [$y + $top_offset]  [$x + $column : - 1]    ### Right side Vertical Line
            [$line - 1]         1
        ];
    }
    default: {
        sets VerticalLineCurs [
            curs-new-window
            $curs
            [$y + $top_offset]  $x                      ### Left side Vertical Line
            [$line - 1] 	1
        ];
    }
    ;;

    sets Parent $main;
    sets Activate <nil>;
    sets FreeCursor <nil>;
    sets SearchSave <nil>;
    sets SearchResult ();
    sets SearchHilight <nil>;
    sets Mode <nil>;
    sets HILIGHT_REGEXP <nil>;
    sets HILIGHT_REGEXP_ML <nil>;

    sets PrefixList <nil>;
    sets PrefixName <nil>;
    sets PrefixKey <nil>;
    sets PrefixMap <nil>;       ### dict [( (Name . (key list) ... ))]
    sets PrefixDesc <nil>;
    sets Prefix ();
    sets LastPrefix ();
    load-keybind;
};

CombiWindow method get-window-size () {
    return [curs-get-screen-size $BufferCurs];
};

CombiWindow method activate () {
    set-window-color-default $BufferCurs EDIT_BUFFER;
    if [get-buffer : protect?] {
        set-window-color-default $StatusLineCurs ACTIVE_STATUS_LINE_PROTECT;
        set-window-color-default $VerticalLineCurs ACTIVE_VERT_LINE_PROTECT;
    } {
        set-window-color-default $StatusLineCurs ACTIVE_STATUS_LINE;
        set-window-color-default $VerticalLineCurs ACTIVE_VERT_LINE;
    };
    sets Activate <t>;
};

CombiWindow method diactivate () {
    set-window-color-default $BufferCurs INACTIVE_EDIT_BUFFER;
    set-window-color-default $StatusLineCurs INACTIVE_STATUS_LINE;
    set-window-color-default $VerticalLineCurs INACTIVE_VERT_LINE;
    sets Activate <nil>;
};

CombiWindow method active? () {
    return $Activate;
};

CombiWindow method refresh () {
    curs-set 0;
    curs-refresh $StatusLineCurs;
    curs-refresh $VerticalLineCurs;	    
    curs-refresh $BufferCurs;
};

CombiWindow method set-cursor () {
    geom ::= get-geom;
    curs-move $BufferCurs $geom,CursorLine $geom,CursorColumn;
};

CombiWindow method display (msg) {
    curs-print $BufferCurs $msg $DISPLAY_ENCODING 0 0;
};

CombiWindow method clear () {
    curs-clear $StatusLineCurs;
    curs-clear $VerticalLineCurs;	    
    curs-clear $BufferCurs;
};

CombiWindow method wipe () {
    curs-wipe $StatusLineCurs;
    curs-wipe $VerticalLineCurs;	    
    curs-wipe $BufferCurs;
};

CombiWindow method get-curs () {
    return $BufferCurs;
};

CombiWindow method render () {
    ### curs-set 0;
    clear;

    if $Activate {geom-trimming};
    if $Activate {activate};

    win ::= get-window-name;
    buff ::= get-buffer;
    buff-name ::= $buff get-buffer-name;
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;
    (cy cx) ::= get-source-index $buff $geom;

    if {$cy > [$buff get-buffer-length]} {
	$geom set! ViewLine 0;
	$geom set! CursorLine [$buff get-buffer-length];
	$geom set! ViewColumn 0;
	$geom set! CursorColumn 0;
	$geom set! IndexColumn.SAVE 0;
	(cy cx) ::= get-source-index $buff $geom;
    };

    render-status-line $win $buff $cy $cx $y $x $buff-name;
    render-vertical-line;

    i := 0;
    $buff buffer-select $geom,ViewLine [$geom,ViewLine + $y : - 1] {
	| src |
        try {
            curs-render-line
	        $BufferCurs
                $i $geom,ViewColumn 0 $src
                $DEFAULT_TAB_WIDTH $DISPLAY_ENCODING
            ;
        }
        catch: {| e |
            show-message :bell ["Error at curs-render-line, <" . [$e car] ">."];
            break;
        };
	$i ++;
    };

    set-eof-mark $geom $buff $y $x;

    ###
    ### if run word, search and region hilight at immediately, following this:
    ###
    set-word-hilight $buff $geom $geom,ViewLine [$geom,ViewLine + $y : - 1];
    set-word-hilight-ml $buff $geom $geom,ViewLine [$geom,ViewLine + $y : - 1];
    set-spot-color $buff $geom;
    set-search-hilight $buff $geom;
    set-region-hilight $buff $geom $y $x;
};

CombiWindow method set-eof-mark (geom buff y x) {
    if {[$geom,ViewLine + $y : - 1] >= [$buff get-buffer-length]} {
	if {[[$buff get-buffer-length] - $geom,ViewLine] < $y} {
	    curs-render-line
		$BufferCurs
		[[$buff get-buffer-length] - $geom,ViewLine] 0 0
		"[eof]"
		$DEFAULT_TAB_WIDTH $DISPLAY_ENCODING
            ;
	    apply-color $BufferCurs [[$buff get-buffer-length] - $geom,ViewLine] 0 5 EOF_MARK;
	};
    };
};

CombiWindow method get-source-index (buff geom) {
    y ::= $geom,ViewLine + $geom,CursorLine;
    x := $geom,IndexColumn.SAVE;
    src ::= $buff get-buffer-line $y;
    $src ?? {return ($y 0)};
    return ($y [curs-pos-to-index $src $x $DEFAULT_TAB_WIDTH]);
};

CombiWindow method get-cursor-index (buff sy sx) {
    src ::= $buff get-buffer-line $sy;
    $src ?? {return ($sy 0)};
    return ($sy [curs-index-to-pos $src $sx $DEFAULT_TAB_WIDTH]);
};

CombiWindow method geom-trimming () {
    geom ::= get-geom;
    buff ::= get-buffer;
    (l c) ::= curs-get-screen-size $BufferCurs;
    if {! $FreeCursor} {
	(cy cx) ::= get-source-index $buff $geom;
	(line col) ::= get-cursor-index $buff $cy $cx;
	new-col ::= $col - $geom,ViewColumn;
	if {$new-col < 0} {
	    $geom set! ViewColumn $col;
	    $geom set! CursorColumn 0;
	} {
	    $geom set! CursorColumn $new-col;
	};
    };

    fit-to-cursor $geom $l $c;
};

CombiWindow method render-status-line (win buff cy cx y x buff-name) {
    if {[$buff get-buffer-length] <= $cy} {
        code := "-EOF- ";
    } {
        c ::= $buff get-vector : at $cy $cx;
        if  {$c = ""} {
            code := "-EOL- ";
        } {
            code ::= "u+%04x" fmt [$c uexport : get 0];
        };
    };
    
    message ::=
        ### " %v%v[%v%v%v%v%v%v] (%d,%d)  <%v> {%v} %v %v"
        ### " %v%v[%v%v%v%v%v%v] (%d,%d)  <%v> {%v} "
        " %v%v[%v%v%v%v%v%v] %4d,%-3d %v <%v>"
        fmt
            [$buff get-encoding-digest]
            [[$buff includeCR?] ??? "d" "u"]
            [[$buff modify?] ??? "*" " "]
            [[$buff protect?] ??? "%" " "]
            [[$buff newfile?] ??? "?" " "]
            [[get-region] ??? "#" " "]
            [$FreeCursor ??? "+" " "]
            [[$Parent is-interp-busy] ??? "@" " "]
            $cy $cx
            $code
            ### $Mode
            $buff-name
            ### [[$buff get-path] ?? "*no file*"]
    ;;
    b2 ::= $message display-width;
    $message append! [" (" . $Mode "/" $KEYBIND_MODE ")"];
    ### $message append! [" (" . $KEYBIND_MODE ") "];
    ### $message append! ["-" repeat $x];
    
    curs-print $StatusLineCurs $message $DISPLAY_ENCODING 0 0;

    b ::= $message split sep: "<" : get 0 : display-width : + 0;
    if $Activate {
        if [get-buffer : protect?] {
            apply-color $StatusLineCurs 0 $b $x ACTIVE_STATUS_LINE_PROTECT;
            apply-color $StatusLineCurs 0 0 $b ACTIVE_STATUS_LINE_PROTECT_2;
            if {$b2 < $x} {
                apply-color $StatusLineCurs 0 $b2 $x ACTIVE_STATUS_LINE_PROTECT_2;
            };
        } {
            apply-color $StatusLineCurs 0 $b $x ACTIVE_STATUS_LINE;
            apply-color $StatusLineCurs 0 0 $b ACTIVE_STATUS_LINE_2;
            if {$b2 < $x} {
                apply-color $StatusLineCurs 0 $b2 $x ACTIVE_STATUS_LINE_2;
            };
        }
    } {
        apply-color $StatusLineCurs 0 $b $x INACTIVE_STATUS_LINE;
        apply-color $StatusLineCurs 0 0 $b INACTIVE_STATUS_LINE_2;
        if {$b2 < $x} {
            apply-color $StatusLineCurs 0 $b2 $x INACTIVE_STATUS_LINE_2;
        };
    };
};

CombiWindow method render-vertical-line () {
    win ::= get-window-name;
    buff ::= get-buffer;
    
    buff-name ::= $buff get-buffer-name;
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    curs-clear $VerticalLineCurs;
    len ::= $buff get-buffer-length;

    if {$len = 0} {
        lines := $y;
    } {
	lines ::= $y * $y : / $len;
	if {$lines < 0}  {lines := 0};
	if {$lines > $y} {lines := $y};
    };

    if {$len = 0} {
        start := 0;
    } {
	start ::= $y * $geom,ViewLine : / $len;
	if {$start < 0}   {start := 0};
	if {$start >= $y} {start := [$y - 1]};
    };

    0 each to: [$y - 1] do: {| i |
	curs-print $VerticalLineCurs " " $DISPLAY_ENCODING $i 0;
	if $Activate {
            if {$buff protect?} {
                apply-color $VerticalLineCurs $i 0 1 ACTIVE_VERT_LINE_PROTECT_HILIGHT;
            } {
                apply-color $VerticalLineCurs $i 0 1 ACTIVE_VERT_LINE_HILIGHT;
            }
	} {
            apply-color $VerticalLineCurs $i 0 1 INACTIVE_VERT_LINE_HILIGHT;
	};
    };
    
    0 each to: $lines do: {| i |
	curs-print $VerticalLineCurs $VERT_BAR_CHAR $DISPLAY_ENCODING [$i + $start] 0;
	if $Activate {
            if {$buff protect?} {
                apply-color $VerticalLineCurs [$i + $start] 0 1 ACTIVE_VERT_LINE_PROTECT_HILIGHT;
            } {
                apply-color $VerticalLineCurs [$i + $start] 0 1 ACTIVE_VERT_LINE_HILIGHT;
            }
	} {
            apply-color $VerticalLineCurs [$i + $start] 0 1 INACTIVE_VERT_LINE_HILIGHT;
	};
    };
};

CombiWindow method page-down () {
    sets FreeCursor $FREECURSOR_ENABLE;

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    new-y ::= $geom,ViewLine + $y;
    if {$new-y > [[$buff get-buffer-length] - $y : + 1]} {new-y ::= [$buff get-buffer-length] - $y : + 1};
    if {$new-y < 0} {new-y := 0};
    $geom set! ViewLine $new-y;
};

CombiWindow method page-up () {
    sets FreeCursor $FREECURSOR_ENABLE;

    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    new-y ::= $geom,ViewLine - $y;
    if {$new-y < 0} {new-y := 0};
    $geom set! ViewLine $new-y;
};

CombiWindow method move-down () {
    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    if {[$geom,ViewLine + $geom,CursorLine] >= [$buff get-buffer-length]} {return};

    acc ::= 1 * $KEY_REPEAT_ACCEL;
    set line [$geom,CursorLine + $acc];
    if {$line >= $y} {
#	set line [$line - $acc];
#	new-y ::= $geom,ViewLine + $acc;
	set line [$y - 1];
	new-y ::= $geom,ViewLine + $acc;
	if {$new-y > [[$buff get-buffer-length] - $y : + 1]} {
            new-y ::= [$buff get-buffer-length] - $y : + 1;
        };
        if {$new-y < 0} {
            new-y := 0;
        };
        $geom set! ViewLine $new-y;
    };
    $geom set! CursorLine $line;    
};

CombiWindow method move-up () {
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    acc ::= 1 * $KEY_REPEAT_ACCEL;
    set line [$geom,CursorLine - $acc];
    if {$line < 0} {
	set line 0;
	new-y ::= $geom,ViewLine - $acc;
	if {$new-y < 0} {new-y := 0};
	$geom set! ViewLine $new-y;
    };
    $geom set! CursorLine $line;
};

CombiWindow method move-screen-top () {
    geom ::= get-geom;
    $geom set! CursorLine 0; 
};

CombiWindow method move-screen-bottom () {
    geom ::= get-geom;
    buff ::= get-buffer;
    (y x) ::= curs-get-screen-size $BufferCurs;
    y ::= $y - 1;
    if {[$y + $geom,ViewLine] > [$buff get-buffer-length]} {
        y ::= [$buff get-buffer-length] - $geom,ViewLine
    };
    $geom set! CursorLine $y; 
};

CombiWindow method free-cursor-turn-off (geom buff) {
    if $FreeCursor {
	sets FreeCursor <nil>;
	$geom set! IndexColumn.SAVE  [$geom,CursorColumn + $geom,ViewColumn];
	(cy cx) ::= get-source-index $buff $geom;
	(line col) ::= get-cursor-index $buff $cy $cx;
	$geom set! CursorColumn [$col - $geom,ViewColumn];
	$geom set! IndexColumn.SAVE $col;
    };
};

CombiWindow method move-right () {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;
    (cy cx) ::= get-source-index $buff $geom;

    r ::= $buff get-buffer-line $cy;
    if $r {
	if {$cx >= [$r len]} {
            cx := 0;
	    cy ::= $cy + 1;
	} {
	    cx ::= $cx + 1;
	};
    };
    (line col) ::= get-cursor-index $buff $cy $cx;
    
    $geom set! CursorLine [$line - $geom,ViewLine];
    $geom set! CursorColumn [$col - $geom,ViewColumn];
    $geom set! IndexColumn.SAVE $col;
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method move-left () {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;
    (cy cx) ::= get-source-index $buff $geom;

    if {$cx > 0} {
	cx ::= $cx - 1;
    } {
	if {$cy > 0} {
	    cy ::= $cy - 1;
	    cx ::= $buff get-buffer-line $cy : len;
	};
    };
    (line col) ::= get-cursor-index $buff $cy $cx;

    $geom set! CursorLine [$line - $geom,ViewLine];
    $geom set! CursorColumn [$col - $geom,ViewColumn];
    $geom set! IndexColumn.SAVE $col;
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method insert-string (input) {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;

    (y x) ::= get-source-index $buff $geom;
    (y x) ::= $buff insert-string-at $input $y $x;
    (new-y new-x) ::= get-cursor-index $buff $y $x;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method delete-character () {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;

    (y x) ::= get-source-index $buff $geom;
    (iy ix c) ::= $buff delete-character-at $y $x;
    (new-y new-x) ::= get-cursor-index $buff $iy $ix;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method backdelete-character () {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;

    (y x) ::= get-source-index $buff $geom;
    (iy ix c) ::= $buff backdelete-character-at $y $x;
    (new-y new-x) ::= get-cursor-index $buff $iy $ix;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method fit-to-cursor (geom l c center: center) {
    if {$geom,CursorLine >= $l} {
	y ::= $geom,CursorLine - $l : + 1 : + $geom,ViewLine;
	if {$y < 0} {y := 0};
	$geom set! ViewLine $y;
	$geom set! CursorLine [$l - 1];
    };
    if {$geom,CursorLine < 0} {
	$geom set! ViewLine [$geom,ViewLine + $geom,CursorLine];
	$geom set! CursorLine 0;
    };
    
    if {set? center} {
        if {or [$geom,CursorLine <= 0] [$geom,CursorLine >= [$l - 1]]} {
            cl ::= $l / 2;
            d := $geom,CursorLine;
            $geom set! CursorLine $cl;
            $geom set! ViewLine [$geom,ViewLine - [$cl - $d]];
            if {$geom,ViewLine < 0} {
                $geom set! CursorLine [$geom,ViewLine + $geom,CursorLine];
                $geom set! ViewLine 0;
            };
        };
    };
    
    if {$geom,CursorColumn >= $c} {
	x ::= $geom,CursorColumn - $c : + 1 : + $geom,ViewColumn;
	if {$x < 0} {x := 0};
	$geom set! ViewColumn $x;
	$geom set! CursorColumn [$c - 1];
    };
    if {$geom,CursorColumn < 0} {
	$geom set! ViewColumn [$geom,ViewColumn + $geom,CursorColumn];
	$geom set! CursorColumn 0;
    };
};

CombiWindow method load-keybind () {
    if {nil? $PrefixMap} {
        set-prefix ();
    };
    
    $LIB_PATH each do: {| i |
	if {file exists? [$i . "/" $DEFAULT_KEYBINDFILE]} {
	    try {
	        load :notrace [$i . "/" $DEFAULT_KEYBINDFILE]
	    } catch: {| e |
		### throw ErrConfiguration ["Error at key-bind file: " . $DEFAULT_KEYBINDFILE ", <" [$e car] "># " [$e cdr]];
		show-message :bell ["Error at key-bind file: " . $DEFAULT_KEYBINDFILE ", <" [$e car] "># " [$e cdr]];
		return;
	    };
	    break;
	};
    };
};

CombiWindow method set-prefix (prefix-list) {
    ###
    ### prefix-list format is: ( ((prefix-key ...) . "name") ... )
    ###
    sets PrefixList $prefix-list;
    sets PrefixKey [dict $prefix-list];
    sets PrefixMap [dict];
    sets PrefixDesc [dict];
    $PrefixMap set DEFAULT [dict];
    sets PrefixName [dict];
    $prefix-list each do: {| i |
        $PrefixName set [$i cdr] [$i car];
        $PrefixMap set [$i cdr] [dict];
    };
};

CombiWindow method add-prefix (prefix-list) {
    $prefix-list each do: {| i |
        $PrefixList <<- $i;
        $PrefixName set [$i cdr] [$i car];
        $PrefixMap set [$i cdr] [dict];
    };
    sets PrefixKey [dict $PrefixList];
};

CombiWindow method set-prefix-desc (prefix-name desc) {
    $PrefixDesc set $prefix-name $desc;
};

CombiWindow method setkey (key command prefix: prefix) {
    if [set? prefix] else: {
        prefix := DEFAULT;
    };
    if [$PrefixMap set? $prefix] else: {
        show-message :bell ["No defined prefix name: '" . $prefix "'."];
        return;
    };
    map ::= $PrefixMap get $prefix;
    $map set $key $command;
};


CombiWindow method load-keybind-override (mode) {
    sets HILIGHT_REGEXP <nil>;
    sets HILIGHT_REGEXP_ML <nil>;
    load-keybind;
    key-path := $MODE_FILE,$mode;
    $key-path ?? {
        $Parent add-background after: 200 {
            show-message :bell ["No such mode: " . $mode];
            result ALL;
        };
	return <nil>;
    };
    
    $LIB_PATH each do: {| i |
	if {file exists? [$i . "/" $key-path]} {
	    try {
	        load :notrace [$i . "/" $key-path];
	    } catch: {| e |
                $Parent add-background after: 200 {
                    show-message :bell ["Error at mode file: " . $key-path ", <" [$e car] "># " [$e cdr]];
                    result ALL;
                };
		return <nil>;
            };
            ### read user config mode key file.
            read-user-conf-file $key-path;
	    return <t>;
	};
    };
    $Parent add-background after: 200 {
        show-message :bell ["No such mode file: " . $key-path];
        result ALL;
    };
    return <nil>;
};

CombiWindow method set-mode (mode) {
    sts ::= load-keybind-override $mode;
    $sts ?? {set mode $DEFAULT_MODE};
    
    sets Mode $mode;
    buff ::= get-buffer;
    if $buff {$buff set-buffer-mode $mode};
};

CombiWindow method get-mode () {
    return $Mode;
};

CombiWindow method cancel-prefix () {
    sets Prefix ();
    sets LastPrefix ();
};

CombiWindow method pop-prefix () {
    $LastPrefix ->>;
    sets Prefix [$LastPrefix clone];
    if {$PrefixDesc set? $PrefixKey,$Prefix} {
        show-message [$PrefixDesc get $PrefixKey,$Prefix];
    } {
        show-message [$PrefixKey get $Prefix];
    };
};

CombiWindow method apply-keybind (main window key) {
    show-message "";

    if {$PrefixKey set? [$Prefix . $key]} {
        sets Prefix [$Prefix . $key];
        if {$PrefixDesc set? $PrefixKey,$Prefix} {
            show-message [$PrefixDesc get $PrefixKey,$Prefix];
        } {
            show-message [$PrefixKey get $Prefix];
        };
        return;
    } {
        if {$Prefix null?} {
            map ::= $PrefixMap get DEFAULT;
            map-name := "";
            default-map := <t>;
        } {
            map-name := $PrefixKey,$Prefix;
            map ::= $PrefixMap get $map-name;
            default-map := <nil>;
        };
        sets LastPrefix [$Prefix clone];
        sets Prefix ();
    };
    
    n ::= $main get-repeat-times;
    
    if {and [string? $key] [! [get-buffer : protect?]] $default-map} {
	command ::= $map get KEY_INPUT_CHAR;
	body ::= get-command $command;
	if {block? $body} {
	    try {
                $main set-last-command $command;
                $main set-last-character $key;
                if {$n = 0} {
                    $main key-record $command $key;
                    result ::= yield $body $main $window $key;
                } {
                    result ::= do-repeat $main $window $n;
                };
	    }
	    catch: {| e |
		show-message :bell ["Error happend at editor command: " . $command ", <" [$e car] "># " [$e cdr]];
		return <nil>;
	    };
	    return $result;
        };
        if $command {
            show-message :bell ["Incorrect command at: " . $command];
        } {
            show-message :bell "No binding key.";
        };
	return <nil>;
    };

    if {and {string? $key} {[$key len] > 1}} {
        $main send-key-event ([$key sub 1]);
        key ::= $key at 0;
    };
    
    command ::= $map get $key;
    if {eq? <nil> $command} {
        show-message :bell ["No binding key: " . [$map-name . [[$map-name = ""] ??? "" " "] $key]];
	return <nil>;
    };
    body ::= get-command $command;
    if {block? $body} {
	try {
            $main set-last-command $command;
            if {$n = 0} {
                $main key-record $command <nil>;
                result ::= yield $body $main $window;
            } {
                result ::= do-repeat $main $window $n;
            };
	}
	catch: {| e |
	    show-message :bell ["Error happend at editor command: " . $command ", <" [$e car] "># " [$e cdr]];
	    return <nil>;
	};
	return $result;
    } {
	show-message :bell ["Editor command not defined: " . $command];
	return <nil>;
    };
    show-message :bell ["Incorrect command at: " . $command ", key map: " $map-name " " $key];
    return <nil>;
};

CombiWindow method get-prefix-list () {
    return [$PrefixList map {| i | $i cdr}];
};

CombiWindow method get-prefix-key (name) {
    return $PrefixName,$name;
};

CombiWindow method get-bind-map (prefix) {
    return [$PrefixMap get $prefix];
};

CombiWindow method get-keybind (prefix k) {
    map ::= $PrefixMap get $prefix;
    return [$map get $k];
};

CombiWindow method get-key-bindings (command) {
    result := ();
    map ::= get-bind-map DEFAULT;
    $map each do: {| k v |
        if {nil? $v} {continue};
        if {$command = $v} {
            $result <<- ["" . $k];
        };
    };
    maps ::= get-prefix-list;
    $maps each do: {| name |
        prefix ::= get-prefix-key $name;
        map ::= get-bind-map $name;
        $map ?? {continue};
        $map each do: {| k v |
            if {nil? $v} {continue};
            if {$command = $v} {
                $result <<- [$prefix . ["" . $k]];
            };
        };
    };
    return $result;
};

CombiWindow method get-key-desc () {
    return $KEY_DESC;
};

CombiWindow method apply-command (main window key command) {
    body ::= get-command $command;
    if {block? $body} {
	try {
	    if {eq? $command insert-character} {
		result ::= yield $body $main $window $key;
	    } {
		result ::= yield $body $main $window;
	    };
	}
	catch: {| e |
	    show-message :bell ["Error happend at editor command: " . $command ", <" [$e car] "># " [$e cdr]];
	    return <nil>;
	};
	return $result;
    } {
	show-message :bell ["Editor command not defined: " . $command];
	return <nil>;
    };
    show-message :bell ["Incorrect command at: " . $command];
    return <nil>;
};

CombiWindow method get-screen-size () {
    return [curs-get-screen-size $BufferCurs];
};

CombiWindow method set-freecursor (flag) {
    sets FreeCursor [and $flag $FREECURSOR_ENABLE];
};

CombiWindow method destroy () {
    curs-destroy-window $BufferCurs;
    curs-destroy-window $StatusLineCurs;
    curs-destroy-window $VerticalLineCurs;
    sets BufferCurs <nil>;
    sets StatusLineCurs <nil>;
    sets VerticalLineCurs <nil>;
};

CombiWindow method display-evaluation () {
    geom ::= get-geom;
    buff ::= get-buffer;

    if {eq? ScratchBuffer [$buff get @name]} {
        atomic {
            sts := <nil>;
            timeout ::= time-of-day :msec;
            try {sts ::= $PINTERP next} catch: {};
            while {$stdout in-pooling?} do: {
                if {[[time-of-day :msec] - $timeout] > 1000} {break};
                try {sts ::= $PINTERP next} catch: {};
            };
        };
	update-display := <nil>;

	$stdout close;
	$stdout each do: {| r |
            r ::= $r string;
            if {or [$r =~ '^Result\[FUNC\]=> '] [$r =~ '^Result\[CLOSURE\]=> ']} {
                r ::= [$r sub 0 80] . " ...";
                $buff append-string $r;
            } {
                if {eq? "auto" $INTERP_LIMIT_LEN} {
                    (dummy lim) ::= get-screen-size;
                    $lim -- 2;
                    if {$lim < 0} {lim := 0};
                } {
                    lim := $INTERP_LIMIT_LEN;
                    if {integer? $lim} else: {lim := 0};
                };

                $r split sep: "\n" : each do: {| r2 |
                    if {$lim > 0} {
                        while {[$r2 len] > $lim} do: {
                            r3 ::= [$r2 sub 0 $lim] . " \\";
                            $buff append-string $r3;
                            r2 ::= $r2 sub $lim;
                        };
                    };
                    $buff append-string $r2;
                };
            };
	    update-display := <t>;
	};
	$stdout clear;
        
	$stderr close;
	$stderr each do: {| r | r ::= $r string;
            $r split sep: "\n" : each do: {| r3 |
                $buff append-string ["ERR> " . $r3];
            };
            update-display := <t>;
	};
	$stderr clear;

	if $update-display {
            ### apply-command $MainWindow [self] "" bottom-of-buffer;
            cursor-move-to $geom [$buff get-buffer-length] 0;
	    render;
	    refresh;
	    set-cursor;
	};
	### if $update-display {apply-command $MainWindow [self] "" start-region};
    } {
	show-message "Evaled. See \'*Scratch*\' buffer.";
    };
};

CombiWindow method start-region (y x) {
    geom ::= get-geom;
    $geom set! Region ($y $x);
};

CombiWindow method end-region () {
    geom ::= get-geom;
    reg := $geom,Region;
    $geom set! Region <nil>;
    return $reg;
};

CombiWindow method exchange-region () {
    geom ::= get-geom;
    reg := $geom,Region;
    $reg ?? {return};

    buff ::= get-buffer;
    (cy cx) ::= get-source-index $buff $geom;
    $geom set! Region ($cy $cx);
    cursor-move-to $geom $reg,0 $reg,1;
};

CombiWindow method in-region? () {
    geom ::= get-geom;
    reg := $geom,Region;
    return $reg;
};

CombiWindow method get-region () {
    geom ::= get-geom;
    buff ::= get-buffer;
    $geom,Region ?? {return <nil>};
    (y x) := $geom,Region;
    if {[$buff get-buffer-length] < $y} {y ::= $buff get-buffer-length};
    src ::= $buff get-buffer-line $y;
    if $src {
	if {[$src len] < $x} {x ::= $src len};
    } {
        x := 0;
    };

    return ($y $x);
};

CombiWindow method copy-region (sy sx ey ex) {
    buff ::= get-buffer;
    setvar CopyBuffer [$buff get-region-string $sy $sx $ey $ex];
};

CombiWindow method get-region-string (sy sx ey ex) {
    buff ::= get-buffer;
    return [$buff get-region-string $sy $sx $ey $ex];
};

CombiWindow method cut-region (sy sx ey ex) {
    buff ::= get-buffer;
    ret ::= $buff cut-region $sy $sx $ey $ex;
    setvar CopyBuffer [$ret get 0];
    result ::= $ret get 1;
    if $result,0 {
	return ($result,2 $result,3);
    };
    return (0 0);
};

CombiWindow method delete-region (sy sx ey ex) {
    if {$sy > $ey} {
        (sy ey) := ($ey $sy);
        (sx ex) := ($ex $sx);
    } {
        if {$sx > $ex} {
            (sx ex) := ($ex $sx);
        };
    };
    buff ::= get-buffer;
    ret ::= $buff cut-region $sy $sx $ey $ex;
    result ::= $ret get 1;
    if $result,0 {
	return ($result,2 $result,3);
    };
    return (0 0);
};

CombiWindow method get-copy-buffer () {
    ### CAUTION: this variable CopyBuffer is global.
    return $CopyBuffer;
};

CombiWindow method set-copy-buffer (str) {
    ### CAUTION: this variable CopyBuffer is global.
    setvar CopyBuffer $str;
};

CombiWindow method get-search-string () {
    ### CAUTION: this variable SearchString is global.
    return $SearchString;
};

CombiWindow method start-search () {
    buff ::= get-buffer;
    geom ::= get-geom;
    sets SearchSave [$geom clone];
};

CombiWindow method cancel-search (str) {
    geom ::= get-geom;
    if $SearchSave {
	$geom restore-geom $SearchSave;
    };
    setvar SearchString $str;
    sets SearchSave <nil>;
    sets SearchResult ();
    sets SearchHilight <nil>;
};

CombiWindow method reset-search () {
    geom ::= get-geom;
    if $SearchSave {
	$geom restore-geom $SearchSave;
    };
    sets SearchResult ();
    sets SearchHilight <nil>;
};

CombiWindow method end-search (str) {
    buff ::= get-buffer;
    geom := $SearchSave;
    if $geom {
        (y x) ::= get-source-index $buff $geom;
        $buff mark $y $x;
    };
    setvar SearchString $str;
    sets SearchSave <nil>;
    sets SearchResult ();
    sets SearchHilight <nil>;
};

CombiWindow method set-search-result (list) {
    sets SearchResult $list;
};

CombiWindow method move-to-next-search () {
    $SearchResult ?? {return <nil>};

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    (sy sx) ::= get-screen-size;
    start := $geom,ViewLine;
    end ::= $start + $sy;
    l ::= $SearchResult filter {| i | and {[$i car] >= $start} {[$i car] <= $end}};

    elem := <nil>; ### $elem is search and move target element
    if {$l null?} {
	l ::= $SearchResult filter {| i | [$i car] > $end};
	elem ::= $l car;
    } {
        elem := <nil>;
	$l each do: {| i |
	    if {[$i car] = $y} {
		if {[$i cdr : car : car] > $x} {
		    elem := $i;
		    break;
		};
	    };
	    if {[$i car] > $y} {
	        elem := $i;
		break;
	    };
	};
	$elem ?? {
	    l ::= $SearchResult filter {| i | [$i car] > $end};
	    elem ::= $l car;
	};
    };
    if $elem {
	ey ::= $elem car;
	ex ::= $elem cdr : car : car;
	cursor-move-to-fit-center $geom $ey $ex;
    };

    ### search result hilight
    start := $geom,ViewLine;
    end ::= $start + $sy;
    sets SearchHilight [$SearchResult filter {| i | and {[$i car] >= $start} {[$i car] < $end}}];
};

CombiWindow method stay-search () {
    $SearchResult ?? {return <nil>};

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    (sy sx) ::= get-screen-size;
    start := $geom,ViewLine;
    end ::= $start + $sy;
    l ::= $SearchResult filter {| i | and {[$i car] >= $start} {[$i car] <= $end}};

    elem := <nil>; ### $elem is search and move target element
    if {$l null?} {
	l ::= $SearchResult filter {| i | [$i car] > $end};
	elem ::= $l car;
    } {
        elem := <nil>;
	$l each do: {| i |
	    if {[$i car] = $y} {
		if {[$i cdr : car : car] >= $x} {
		    elem := $i;
		    break;
		};
	    };
	    if {[$i car] > $y} {
	        elem := $i;
		break;
	    };
	};
	$elem ?? {
	    l ::= $SearchResult filter {| i | [$i car] > $end};
	    elem ::= $l car;
	};
    };
    if $elem {
	ey ::= $elem car;
	ex ::= $elem cdr : car : car;
        # cursor-move-to $geom $ey $ex;
    };

    ### search result hilight
    start := $geom,ViewLine;
    end ::= $start + $sy;
    sets SearchHilight [$SearchResult filter {| i | and {[$i car] >= $start} {[$i car] < $end}}];
};

CombiWindow method move-to-previous-search () {
    $SearchResult ?? {return <nil>};

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    (sy sx) ::= get-screen-size;
    start := $geom,ViewLine;
    end ::= $start + $sy;
    l ::= $SearchResult filter {| i | and {[$i car] >= $start} {[$i car] <= $end}} : reverse;

    elem := <nil>; ### $elem is search and move target element
    if {$l null?} {
	l ::= $SearchResult filter {| i | [$i car] < $start};
	elem ::= $l last : car;
    } {
        elem := <nil>;
	$l each do: {| i |
	    if {[$i car] = $y} {
		if {[$i cdr : car : car] < $x} {
		    elem := $i;
		    break;
		};
	    };
	    if {[$i car] < $y} {
	        elem := $i;
		break;
	    };
	};
	$elem ?? {
	    l ::= $SearchResult filter {| i | [$i car] < $start};
	    elem ::= $l last : car;
	};
    };
    if $elem {
	ey ::= $elem car;
	ex ::= $elem cdr : car : car;
	cursor-move-to-fit-center $geom $ey $ex;
    };

    ### search result hilight
    start := $geom,ViewLine;
    end ::= $start + $sy;
    sets SearchHilight [$SearchResult filter {| i | and {[$i car] >= $start} {[$i car] < $end}}];
};

CombiWindow method cursor-move-to (geom y x) {
    sets FreeCursor <nil>;
    
    buff ::= get-buffer;
    (new-y new-x) ::= get-cursor-index $buff $y $x;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= get-screen-size;
    ### fit-to-cursor $geom $sy $sx :center;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method cursor-move-to-fit-center (geom y x) {
    sets FreeCursor <nil>;
    
    buff ::= get-buffer;
    (new-y new-x) ::= get-cursor-index $buff $y $x;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= get-screen-size;
    fit-to-cursor $geom $sy $sx :center;
};

CombiWindow method cursor-fit-to-top (geom) {
    sets FreeCursor <nil>;
    
    view := $geom,ViewLine;
    cursor := $geom,CursorLine;
    view ::= $view + $cursor;
    cursor := 0;
    $geom set! ViewLine $view;
    $geom set! CursorLine $cursor;
};

CombiWindow method cursor-fit-to-bottom (geom) {
    sets FreeCursor <nil>;

    (sy sx) ::= get-screen-size;
    view := $geom,ViewLine;
    cursor := $geom,CursorLine;
    d ::= [$sy - 1] - $cursor;
    cursor ::= $sy - 1;
    view ::= $view - $d;
    if {$view < 0} {
        cursor ::= $cursor + $view;
        view := 0;
    };

    $geom set! ViewLine $view;
    $geom set! CursorLine $cursor;
};

CombiWindow method set-region-hilight (buff geom y x) {
    region ::= get-region;
    if {and $region $Activate} {
	(sy sx) := $region;
	(ey ex) ::= get-source-index $buff $geom;
	if {$sy > $ey} {
	    (sy ey sx ex) := ($ey $sy $ex $sx);
	};
	i := 0;
	line := $geom,ViewLine;
	$buff buffer-select $geom,ViewLine [$geom,ViewLine + $y : - 1] {
	    | src |
	    in-region := <nil>;
	    cond
                {and {$line = $sy} {$line = $ey}} {
                    start-col ::= curs-index-to-pos $src $sx $DEFAULT_TAB_WIDTH;
                    end-col ::= curs-index-to-pos $src $ex $DEFAULT_TAB_WIDTH;
                    in-region := <t>;
                    break;
                }
                {$line = $sy} {
                    start-col ::= curs-index-to-pos $src $sx $DEFAULT_TAB_WIDTH;
                    end-col ::= curs-index-to-pos $src [$src len] $DEFAULT_TAB_WIDTH;
                    in-region := <t>;
                    break;
                }
                {$line = $ey} {
                    start-col ::= curs-index-to-pos $src 0 $DEFAULT_TAB_WIDTH;
                    end-col ::= curs-index-to-pos $src $ex $DEFAULT_TAB_WIDTH;
                    in-region := <t>;
                    break;
                }
                {and {$line > $sy} {$line < $ey}} {
                    start-col ::= curs-index-to-pos $src 0 $DEFAULT_TAB_WIDTH;
                    end-col ::= curs-index-to-pos $src [$src len] $DEFAULT_TAB_WIDTH;
                    in-region := <t>;
                    break;
                }
            ;;

	    if $in-region {
		start-col ::= $start-col - $geom,ViewColumn;
		end-col ::= $end-col - $geom,ViewColumn;
		if {$start-col > $end-col} {
		    (start-col end-col) := ($end-col $start-col);
		};
		if {$start-col < 0} {start-col := 0};
		if {$start-col >= $x} {start-col := $x};
		if {$end-col < 0} {start-col := 0};
		if {$end-col >= $x} {end-col := $x};
		if {[$end-col - $start-col] > 0} {
		    apply-color $BufferCurs $i $start-col [$end-col - $start-col] REGION_HILIGHT;
		} {
                    if {[$src len] = 0} {
                        apply-color $BufferCurs $i $start-col 1 REGION_HILIGHT;
                    };
                };
                if {[$end-col - $start-col] < 0} {
                    apply-color $BufferCurs $i $start-col 1 REGION_HILIGHT;
                };
	    };

	    $i ++;
	    $line ++;
	};
    };
};

CombiWindow method set-search-hilight (buff geom) {
    $Activate ?? {return};
    
    list := $SearchHilight;
    $list ?? {return};

    (scr-y scr-x) ::= get-screen-size;
    (idx-y idx-x) ::= get-source-index $buff $geom;
    $list each do: {| e |
	py ::= $e car;
	pxs ::= $e cdr : car : car;
	pxe ::= $e cdr : car : cdr : car;
	y ::= $py - $geom,ViewLine;

	src ::= $buff get-buffer-line $py;
	start-x ::= curs-index-to-pos $src $pxs $DEFAULT_TAB_WIDTH : - $geom,ViewColumn;
	if {$start-x < 0} {start-x := 0};
	end-x ::= curs-index-to-pos $src $pxe $DEFAULT_TAB_WIDTH : - $geom,ViewColumn;
	if {$end-x <= 0} {continue};
	len ::= $end-x - $start-x;
	if {$start-x > $scr-x} {continue};
	if {$end-x >= $scr-x} {end-x := $scr-x};
	if {$len <= 0} {continue};

	if {and {$idx-y = $py} {$idx-x = $pxs}} {
	    apply-color $BufferCurs $y $start-x $len SEARCH_CURRENT_HILIGHT;
	} {
            apply-color $BufferCurs $y $start-x $len SEARCH_HILIGHT;
	};
    };
};

CombiWindow method set-word-hilight (buff geom start end) {
    if {nil? $HILIGHT_REGEXP} {return};

    $HILIGHT_REGEXP each do: {| i |
	regex ::= $i car;
	color ::= $i cdr : car;
	result := ();
	last := $result;
	line := $start;
	$buff buffer-select $start $end {| src |
	    l ::= $src =~ :all $regex;
	    if $l {
		$l each do: {| m |
		    $last append! ($line $m);
		};
	    };
	    line ::= $line + 1;
	};
        try {
            set-word-hilight-color $geom $buff $result $color;
        } catch: {| e |
            show-message ["ERR: " . $e];
        };
    };
};

CombiWindow method set-word-hilight-ml (buff geom start end) {
    if {nil? $HILIGHT_REGEXP_ML} {return};

    bstart ::= $start - 50;
    if {$bstart < 0} {bstart := 0};
    bend ::= $end + 50;
    len ::= $buff get-buffer-length;
    if {$bend > $len} {bend := $len};
    target-src := "";
    sum-len := 0;
    len-index ::= vector;
    $buff buffer-select $bstart $bend {| src |
        $target-src append! [$src . "\n"];
        $len-index append! $sum-len;
        sum-len ::= $sum-len + [$src len] : + 1;
    };
    if {[$len-index len] <= 0} {return};

    $HILIGHT_REGEXP_ML each do: {| i |
	regex ::= $i car;
	color ::= $i cdr : car;
        l ::= $target-src =~ :all $regex;
        if $l {
            result := ();
            last := $result;
            $l each do: {| m |
                (ts te tt) := $m;
                sline := 0;
                eline := 0;
                scol := 0;
                ecol := 0;
                [$len-index len : - 1] each to: 0 do: {| j |
                    if {$len-index,$j <= $ts} {
                        sline := $j;
                        scol ::= $ts - $len-index,$j;
                        break;
                    };
                };
                [$len-index len : - 1] each to: 0 do: {| k |
                    if {$len-index,$k <= $te} {
                        eline := $k;
                        ecol ::= $te - $len-index,$k;
                        break;
                    };
                };
                if {$sline = $eline} {
                    $last append! ([$sline + $bstart] ($scol $ecol));
                } {
                    line ::= $sline + $bstart;
                    llen ::= [[$buff get-buffer-line $line] ?? ""] len;
                    $last append! ($line ($scol $llen));
                    line ::= $eline + $bstart;
                    $last append! ($line (0 $ecol));
                    if {[$eline - $sline] >= 2} {
                        [$sline + 1] each to: [$eline - 1] do: {| m |
                            line ::= $m + $bstart;
                            llen ::= [[$buff get-buffer-line $line] ?? ""] len;
                            $last append! ($line (0 $llen));
                        };
                    };
                };
            };
            try {
                set-word-hilight-color $geom $buff $result $color;
            } catch: {| e |
                show-message ["ERR: " . $e];
            };
        };
    };
};

CombiWindow method set-spot-color (buff geom) {
    $geom,SpotColor each do: {| k v | 
        try {
            l ::= $v car : car;
            set-word-hilight-color $geom $buff ([$v car]) [$v cdr : car];
        } catch: {| e |
            show-message ["ERR: " . ([$v car]) ", " $e];
        };
    };
};

###
### list structure
### ( 
###   ( line ( start end [optional-string-match-text] ))
###   ....
### )
###
CombiWindow method set-word-hilight-color (geom buff list color) {
    (scr-y scr-x) ::= get-screen-size;

    $list each do: {| e |
	py ::= $e car;
	pxs ::= $e cdr : car : car;
	pxe ::= $e cdr : car : cdr : car;
	y ::= $py - $geom,ViewLine;
        if {$y < 0} {continue};
        if {$y >= $scr-y} {continue};

	src ::= $buff get-buffer-line $py;
	start-x ::= curs-index-to-pos $src $pxs $DEFAULT_TAB_WIDTH : - $geom,ViewColumn;
	if {$start-x < 0} {start-x := 0};
	end-x ::= curs-index-to-pos $src $pxe $DEFAULT_TAB_WIDTH : - $geom,ViewColumn;
	if {$end-x <= 0} {continue};
	len ::= $end-x - $start-x;
	if {$start-x > $scr-x} {continue};
	if {$end-x >= $scr-x} {end-x := $scr-x};
	if {$len <= 0} {continue};

        apply-color $BufferCurs $y $start-x $len $color;
    };
};

CombiWindow method mark () {
    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    $buff mark $y $x;
    show-message "Marked.";
};

CombiWindow method pop-mark () {
    buff ::= get-buffer;
    $buff pop-mark;
};

CombiWindow method goto-mark () {
    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    result ::= $buff get-mark $y $x;
    $result ?? {
        show-message :bell "No mark buffer.";
        return;
    };
    cursor-move-to-fit-center $geom [$result get 0] [$result get 1];
};

CombiWindow method unmark () {
    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    result ::= $buff un-mark $y $x;
    $result ?? {
        show-message :bell "No unmark buffer.";
        return;
    };
    cursor-move-to-fit-center $geom [$result get 0] [$result get 1];
};

CombiWindow method get-cursor-position () {
    curs-get-cursor [get-curs];
};

CombiWindow method set-color (line column length color-name attr) {
    apply-color $BufferCurs $line $column $length $color-name;
};

CombiWindow method set-spot-color-item (key y x len color) {
    geom ::= get-geom;
    $geom,SpotColor set $key (($y ($x [$x + $len])) $color);
};

CombiWindow method remove-spot-color-item (key) {
    geom ::= get-geom;
    $geom,SpotColor unset $key;
};

CombiWindow method remove-spot-color-all () {
    geom ::= get-geom;
    $geom set! SpotColor [dict()];
};

CombiWindow method set-buffer-tab-width () {
    unsets DEFAULT_TAB_WIDTH;
    buff ::= get-buffer;
    width ::= $buff get-buffer-tab-width;
    if $width {
        sets DEFAULT_TAB_WIDTH $width;
    };
};
