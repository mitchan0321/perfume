class CombiWindow WindowBase;

CombiWindow method init (main y x line column) {
    apply {WindowBase method? init :};
    
    curs ::= $main get-curs;

    sets BufferCurs	  [curs-new-window
			   $curs
#			   $y 		 	$x
			   $y 		 	[$x + 1]
			   [$line - 1]  	[$column - 1]
	];

    sets StatusLineCurs	  [curs-new-window
			   $curs
			   [$y + $line : - 1]   $x
			   1 	     		$column
	];
    
    sets VerticalLineCurs [curs-new-window
			   $curs
#			   $y 		 	[$x + $column : - 1]
			   $y 		 	$x
			   [$line - 1] 		1
	];

    sets Parent $main;
    sets Activate <nil>;
    sets FreeCursor <nil>;
    sets KeyBinding [dict()];
    sets SearchSave <nil>;
    sets SearchResult ();
    sets SearchHilight <nil>;
    load-keybind;
    sets Mode <nil>;
    sets HILIGHT_REGEXP <nil>;
};

CombiWindow method activate () {
    set-window-color-default $BufferCurs EDIT_BUFFER;
    set-window-color-default $StatusLineCurs ACTIVE_STATUS_LINE;
    set-window-color-default $VerticalLineCurs ACTIVE_VERT_LINE;
    sets Activate <t>;
};

CombiWindow method diactivate () {
    set-window-color-default $BufferCurs INACTIVE_EDIT_BUFFER;
    set-window-color-default $StatusLineCurs INACTIVE_STATUS_LINE;
    set-window-color-default $VerticalLineCurs INACTIVE_VERT_LINE;
    sets Activate <nil>;
};

CombiWindow method refresh () {
    curs-refresh $StatusLineCurs;
    curs-refresh $VerticalLineCurs;	    
    curs-refresh $BufferCurs;
};

CombiWindow method set-cursor () {
    geom ::= get-geom;
    curs-move $BufferCurs $geom,CursorLine $geom,CursorColumn;
};

CombiWindow method display (msg) {
    curs-print $BufferCurs $msg $DISPLAY_ENCODING 0 0;
};

CombiWindow method clear () {
    curs-clear $StatusLineCurs;
    curs-clear $VerticalLineCurs;	    
    curs-clear $BufferCurs;
};

CombiWindow method get-curs () {
    return $BufferCurs;
};

CombiWindow method render () {
    clear;

    if $Activate {geom-trimming};
    
    (y x) ::= curs-get-screen-size $BufferCurs;
    win ::= get-window-name;
    buff ::= get-buffer;
    buff-name ::= $buff get-buffer-name;
    geom ::= get-geom;
    ### debug-message ["%v, %v, %v" fmt $win $buff-name $geom] wait: 3000;
    (cy cx) ::= get-source-index $buff $geom;

    curs-print $StatusLineCurs [
	  " -- [%v%v%v%v]#%v - (%d,%d) - <%v> {%v} %v %v" fmt
	  [[$buff modify?] ??? "*" " "]
	  [[$buff newfile?] ??? "N" " "]
	  [$FreeCursor ??? "F" " "]
	  [[get-region] ??? "R" " "]
	  [$win split sep: "#" : get 1]
	  $cy $cx
	  $buff-name
	  $Mode
	  [[$buff get-path] ?? "*no file*"]
	  ["-" repeat $x]
#	  $cy $cx
#	  $geom,CursorLine $geom,CursorColumn $geom,IndexColumn.SAVE
	]
	$DISPLAY_ENCODING 0 0;
    
    render-vertical-line;

    i := 0;
    $buff buffer-select $geom,ViewLine [$geom,ViewLine + $y : - 1] {
	| src |
	curs-render-line
	    $BufferCurs
	    $i $geom,ViewColumn 0 $src
	    $DEFAULT_TAB_WIDTH $DISPLAY_ENCODING;
	$i ++;
    };

    if {[$geom,ViewLine + $y : - 1] >= [$buff get-buffer-length]} {
	if {[[$buff get-buffer-length] - $geom,ViewLine] < $y} {
	    curs-render-line
		$BufferCurs
		[[$buff get-buffer-length] - $geom,ViewLine] 0 0
		"[eof]"
		$DEFAULT_TAB_WIDTH $DISPLAY_ENCODING;
	    curs-color $BufferCurs [[$buff get-buffer-length] - $geom,ViewLine] 0 5 $ColorDB,EOF_MARK 0;
	};
    };


    ###
    ### if run word and search hilight at background, following this:
    ###
    REM {
    job-id ::= "ZH" . [$win split sep: "#" : get 1];
    $Parent add-background job-id: $job-id {
	| main window |
	target-win ::= $main get-window-by-name $win;
	if $target-win {
	    $target-win set-word-hilight;
	    $target-win set-search-hilight;
	};
	result REFRESH-ONLY;
    };
    }; ### END REM

    ###
    ### if run word and search hilight at immediately, following this:
    ###
    set-word-hilight;
    set-search-hilight;

    ###
    ### region selection hilight
    ###
    region ::= get-region;
    if {and $region $Activate} {
	(sy sx) := $region;
	(ey ex) ::= get-source-index $buff $geom;
	if {$sy > $ey} {
	    (sy ey sx ex) := ($ey $sy $ex $sx);
	};
	i := 0;
	line := $geom,ViewLine;
	$buff buffer-select $geom,ViewLine [$geom,ViewLine + $y : - 1] {
	    | src |
	    in-region := <nil>;
	    cond
	    {and {$line = $sy} {$line = $ey}} {
		start-col ::= curs-index-to-pos $src $sx $DEFAULT_TAB_WIDTH;		
		end-col ::= curs-index-to-pos $src $ex $DEFAULT_TAB_WIDTH;
		in-region := <t>;
		break;
	    }
	    {$line = $sy} {
		start-col ::= curs-index-to-pos $src $sx $DEFAULT_TAB_WIDTH;
		end-col ::= curs-index-to-pos $src [$src len] $DEFAULT_TAB_WIDTH;
		in-region := <t>;
		break;
	    }
	    {$line = $ey} {
		start-col ::= curs-index-to-pos $src 0 $DEFAULT_TAB_WIDTH;
		end-col ::= curs-index-to-pos $src $ex $DEFAULT_TAB_WIDTH;
		in-region := <t>;
		break;
	    }
	    {and {$line > $sy} {$line < $ey}} {
		start-col ::= curs-index-to-pos $src 0 $DEFAULT_TAB_WIDTH;
		end-col ::= curs-index-to-pos $src [$src len] $DEFAULT_TAB_WIDTH;
		in-region := <t>;
		break;
	    };

	    if $in-region {
		start-col ::= $start-col - $geom,ViewColumn;
		end-col ::= $end-col - $geom,ViewColumn;
		if {$start-col > $end-col} {
		    (start-col end-col) := ($end-col $start-col);
		};
		if {$start-col < 0} {start-col := 0};
		if {$start-col >= $x} {start-col := $x};
		if {$end-col < 0} {start-col := 0};
		if {$end-col >= $x} {end-col := $x};
		if {[$end-col - $start-col] > 0} {
		    curs-color $BufferCurs $i $start-col [$end-col - $start-col] $ColorDB,REGION_HILIGHT 0;
		};
	    };

	    $i ++;
	    $line ++;
	};
    };
};

CombiWindow method get-source-index (buff geom) {
    y ::= $geom,ViewLine + $geom,CursorLine;
    x := $geom,IndexColumn.SAVE;
    src ::= $buff get-buffer-line $y;
    $src ?? {return ($y 0)};
    return ($y [curs-pos-to-index $src $x $DEFAULT_TAB_WIDTH]);
};

CombiWindow method get-cursor-index (buff sy sx) {
    src ::= $buff get-buffer-line $sy;
    $src ?? {return ($sy 0)};
    return ($sy [curs-index-to-pos $src $sx $DEFAULT_TAB_WIDTH]);
};

CombiWindow method geom-trimming () {
    geom ::= get-geom;
    buff ::= get-buffer;
    (l c) ::= curs-get-screen-size $BufferCurs;
    if {! $FreeCursor} {
	(cy cx) ::= get-source-index $buff $geom;
	(line col) ::= get-cursor-index $buff $cy $cx;
	new-col ::= $col - $geom,ViewColumn;
	if {$new-col < 0} {
	    $geom set! ViewColumn $col;
	    $geom set! CursorColumn 0;
	} {
	    $geom set! CursorColumn $new-col;
	};
    };

    fit-to-cursor $geom $l $c;
};

CombiWindow method render-vertical-line () {
    win ::= get-window-name;
    buff ::= get-buffer;
    
    buff-name ::= $buff get-buffer-name;
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    curs-clear $VerticalLineCurs;
    len ::= $buff get-buffer-length;

    if {$len = 0} {
        lines := $y;
    } {
	lines ::= $y * $y : / $len;
	if {$lines < 0}  {lines := 0};
	if {$lines > $y} {lines := $y};
    };

    if {$len = 0} {
        start := 0;
    } {
	start ::= $y * $geom,ViewLine : / $len;
	if {$start < 0}   {start := 0};
	if {$start >= $y} {start := [$y - 1]};
    };

    0 each to: $lines do: {| i |
	curs-print $VerticalLineCurs "|" $DISPLAY_ENCODING [$i + $start] 0;
	if $Activate {
	    curs-color $VerticalLineCurs [$i + $start] 0 1 $ColorDB,ACTIVE_VERT_LINE_HILIGHT 0;
	} {
	    curs-color $VerticalLineCurs [$i + $start] 0 1 $ColorDB,INACTIVE_VERT_LINE_HILIGHT 0;
	};
    };
};

CombiWindow method page-down () {
    sets FreeCursor <t>;

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    new-y ::= $geom,ViewLine + $y;
    if {$new-y > [[$buff get-buffer-length] - $y : + 1]} {new-y ::= [$buff get-buffer-length] - $y : + 1};
    if {$new-y < 0} {new-y := 0};
    $geom set! ViewLine $new-y;
};

CombiWindow method page-up () {
    sets FreeCursor <t>;

    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    new-y ::= $geom,ViewLine - $y;
    if {$new-y < 0} {new-y := 0};
    $geom set! ViewLine $new-y;
};

CombiWindow method move-down () {
    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    if {[$geom,ViewLine + $geom,CursorLine] >= [$buff get-buffer-length]} {return};
    set line [$geom,CursorLine + 1];
    if {$line >= $y} {
	set line [$line - 1];
	new-y ::= $geom,ViewLine + 1;
	if {$new-y > [$buff get-buffer-length]} {new-y ::= $buff get-buffer-length};
	$geom set! ViewLine $new-y;
    };
    $geom set! CursorLine $line;    
};

CombiWindow method move-up () {
    geom ::= get-geom;
    (y x) ::= curs-get-screen-size $BufferCurs;

    set line [$geom,CursorLine - 1];
    if {$line < 0} {
	set line 0;
	new-y ::= $geom,ViewLine - 1;
	if {$new-y < 0} {new-y := 0};
	$geom set! ViewLine $new-y;
    };
    $geom set! CursorLine $line;
};

CombiWindow method free-cursor-turn-off (geom buff) {
    if $FreeCursor {
	sets FreeCursor <nil>;
	$geom set! IndexColumn.SAVE  [$geom,CursorColumn + $geom,ViewColumn];
	(cy cx) ::= get-source-index $buff $geom;
	(line col) ::= get-cursor-index $buff $cy $cx;
	$geom set! CursorColumn [$col - $geom,ViewColumn];
	$geom set! IndexColumn.SAVE $col;
    };
};

CombiWindow method move-right () {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;
    (cy cx) ::= get-source-index $buff $geom;

    r ::= $buff get-buffer-line $cy;
    if $r {
	if {$cx >= [$r len]} {
            cx := 0;
	    cy ::= $cy + 1;
	} {
	    cx ::= $cx + 1;
	};
    };
    (line col) ::= get-cursor-index $buff $cy $cx;
    
    $geom set! CursorLine [$line - $geom,ViewLine];
    $geom set! CursorColumn [$col - $geom,ViewColumn];
    $geom set! IndexColumn.SAVE $col;
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method move-left () {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;
    (cy cx) ::= get-source-index $buff $geom;

    if {$cx > 0} {
	cx ::= $cx - 1;
    } {
	if {$cy > 0} {
	    cy ::= $cy - 1;
	    cx ::= $buff get-buffer-line $cy : len;
	};
    };
    (line col) ::= get-cursor-index $buff $cy $cx;

    $geom set! CursorLine [$line - $geom,ViewLine];
    $geom set! CursorColumn [$col - $geom,ViewColumn];
    $geom set! IndexColumn.SAVE $col;
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method insert-string (input) {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;

    (y x) ::= get-source-index $buff $geom;
    (y x) ::= $buff insert-string-at $input $y $x;
    (new-y new-x) ::= get-cursor-index $buff $y $x;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method delete-character () {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;

    (y x) ::= get-source-index $buff $geom;
    (iy ix c) ::= $buff delete-character-at $y $x;
    (new-y new-x) ::= get-cursor-index $buff $iy $ix;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method backdelete-character () {
    geom ::= get-geom;
    buff ::= get-buffer;
    free-cursor-turn-off $geom $buff;

    (y x) ::= get-source-index $buff $geom;
    (iy ix c) ::= $buff backdelete-character-at $y $x;
    (new-y new-x) ::= get-cursor-index $buff $iy $ix;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= curs-get-screen-size $BufferCurs;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method fit-to-cursor (geom l c) {
    if {$geom,CursorLine >= $l} {
	y ::= $geom,CursorLine - $l : + 1 : + $geom,ViewLine;
	if {$y < 0} {y := 0};
	$geom set! ViewLine $y;
	$geom set! CursorLine [$l - 1];
    };
    if {$geom,CursorLine < 0} {
	$geom set! ViewLine [$geom,ViewLine + $geom,CursorLine];
	$geom set! CursorLine 0;
    };
	    
    if {$geom,CursorColumn >= $c} {
	x ::= $geom,CursorColumn - $c : + 1 : + $geom,ViewColumn;
	if {$x < 0} {x := 0};
	$geom set! ViewColumn $x;
	$geom set! CursorColumn [$c - 1];
    };
    if {$geom,CursorColumn < 0} {
	$geom set! ViewColumn [$geom,ViewColumn + $geom,CursorColumn];
	$geom set! CursorColumn 0;
    };
};

CombiWindow method load-keybind () {
    sets KeyBinding [dict()];
    $LIB_PATH each do: {| i |
	if {file exists? [$i . "/" $COMBIWINDOW_KEYBINDFILE]} {
	    try {
	        load :notrace [$i . "/" $COMBIWINDOW_KEYBINDFILE]
	    } catch: {| e |
		throw ErrConfiguration ["Error at key-bind file: " . $COMBIWINDOW_KEYBINDFILE ", <" [$e car] "># " [$e cdr]];
	    };
	    break;
	};
    };
};

CombiWindow method setkey (key command) {
    $KeyBinding set $key $command;
};

CombiWindow method load-keybind-override (mode) {
    sets HILIGHT_REGEXP <nil>;
    load-keybind;
    key-path := $MODE_FILE,$mode;
    $key-path ?? {
	show-message ["No such mode: " . $mode];
	return;
    };
    
    $LIB_PATH each do: {| i |
	if {file exists? [$i . "/" $key-path]} {
	    try {
	        load :notrace [$i . "/" $key-path];
	    } catch: {| e |
		show-message ["Error at mode file: " . $key-path ", <" [$e car] "># " [$e cdr]];
		return;
	    };
	    return;
	};
    };
    show-message ["No such mode file: " . $key-path];
};

CombiWindow method set-mode (mode) {
    sets Mode $mode;
    load-keybind-override $mode;
};

CombiWindow method get-mode () {
    return $Mode;
};

CombiWindow method apply-keybind (main window key) {
    show-message "";
    if {string? $key} {
	command ::= $KeyBinding get KEY_INPUT_CHAR;
	body ::= get-command $command;
	if {block? $body} {
	    try {
		result ::= yield $body $main $window $key;
	    }
	    catch: {| e |
		show-message ["Error happend at editor command: " . $command ", <" [$e car] "># " [$e cdr]];
		return <nil>;
	    };
	    return $result;
	};
	show-message ["Incorrect command at: " . $command];
	return <nil>;
    };

    command ::= $KeyBinding get $key;
    if {eq? <nil> $command} {
	show-message ["No binding key: " . $key];
	return <nil>;
    };
    body ::= get-command $command;
    if {block? $body} {
	try {
	    result ::= yield $body $main $window;
	}
	catch: {| e |
	    show-message ["Error happend at editor command: " . $command ", <" [$e car] "># " [$e cdr]];
	    return <nil>;
	};
	return $result;
    } {
	show-message ["Editor command not defined: " . $command];
	return <nil>;
    };
    show-message ["Incorrect command at: " . $command];
    return <nil>;
};

CombiWindow method apply-command (main window key command) {
    body ::= get-command $command;
    if {block? $body} {
	try {
	    if {eq? $command insert-character} {
		result ::= yield $body $main $window $key;
	    } {
		result ::= yield $body $main $window;
	    };
	}
	catch: {| e |
	    show-message ["Error happend at editor command: " . $command ", <" [$e car] "># " [$e cdr]];
	    return <nil>;
	};
	return $result;
    } {
	show-message ["Editor command not defined: " . $command];
	return <nil>;
    };
    show-message ["Incorrect command at: " . $command];
    return <nil>;
};

CombiWindow method get-screen-size () {
    return [curs-get-screen-size $BufferCurs];
};

CombiWindow method set-freecursor (flag) {
    sets FreeCursor $flag;
};

CombiWindow method destroy () {
    curs-destroy-window $BufferCurs;
    curs-destroy-window $StatusLineCurs;
    curs-destroy-window $VerticalLineCurs;
    sets BufferCurs <nil>;
    sets StatusLineCurs <nil>;
    sets VerticalLineCurs <nil>;
};

CombiWindow method display-evaluation () {
    buff ::= get-buffer;
    if {eq? ScratchBuffer [$buff get @name]} {
        try {$PINTERP next} catch: {};

	update-display := <nil>;

	$stderr close;
	$stderr each do: {| r |
	    $buff append-string ["ERR> " . $r];
	    update-display := <t>;
	};
	$stderr clear;

	$stdout close;
	$stdout each do: {| r |
	    $buff append-string ["" . $r];
	    update-display := <t>;
	};
	$stdout clear;

	if $update-display {
	    apply-command $MainWindow [self] "" bottom-of-buffer;
	    render;
	    refresh;
	    set-cursor;
	};
	### if $update-display {apply-command $MainWindow [self] "" start-region};
    } {
	show-message "Evaled. See \'*Scratch*\' buffer.";
    };
};

CombiWindow method start-region (y x) {
    geom ::= get-geom;
    $geom set! Region ($y $x);
};

CombiWindow method end-region () {
    geom ::= get-geom;
    reg := $geom,Region;
    $geom set! Region <nil>;
    return $reg;
};

CombiWindow method get-region () {
    geom ::= get-geom;
    return $geom,Region;
};


CombiWindow method copy-region (sy sx ey ex) {
    buff ::= get-buffer;
    setvar CopyBuffer [$buff get-region-string $sy $sx $ey $ex];
};

CombiWindow method get-region-string (sy sx ey ex) {
    buff ::= get-buffer;
    return [$buff get-region-string $sy $sx $ey $ex];
};

CombiWindow method cut-region (sy sx ey ex) {
    buff ::= get-buffer;
    ret ::= $buff cut-region $sy $sx $ey $ex;
    setvar CopyBuffer [$ret get 0];
    result ::= $ret get 1;
    if $result,0 {
	return ($result,2 $result,3);
    };
    return (0 0);
};

CombiWindow method get-copy-buffer () {
    ### CAUTION: this variable CopyBuffer is global.
    return $CopyBuffer;
};

CombiWindow method get-search-string () {
    ### CAUTION: this variable SearchString is global.
    return $SearchString;
};

CombiWindow method start-search () {
    buff ::= get-buffer;
    geom ::= get-geom;
    sets SearchSave [$geom clone];
};

CombiWindow method cancel-search (str) {
    geom ::= get-geom;
    if $SearchSave {
	$geom restore-geom $SearchSave;
    };
    sets SearchSave <nil>;
    sets SearchResult ();
    sets SearchHilight <nil>;
};

CombiWindow method reset-search () {
    geom ::= get-geom;
    if $SearchSave {
	$geom restore-geom $SearchSave;
    };
    sets SearchResult ();
    sets SearchHilight <nil>;
};

CombiWindow method end-search (str) {
    setvar SearchString $str;
    sets SearchSave <nil>;
    sets SearchResult ();
    sets SearchHilight <nil>;
};

CombiWindow method set-search-result (list) {
    sets SearchResult $list;
};

CombiWindow method move-to-next-search () {
    $SearchResult ?? {return <nil>};

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    (sy sx) ::= get-screen-size;
    start := $geom,ViewLine;
    end ::= $start + $sy;
    l ::= $SearchResult filter {| i | and {[$i car] >= $start} {[$i car] <= $end}};

    elem := <nil>; ### $elem is search and move target element
    if {$l null?} {
	l ::= $SearchResult filter {| i | [$i car] > $end};
	elem ::= $l car;
    } {
        elem := <nil>;
	$l each do: {| i |
	    if {[$i car] = $y} {
		if {[$i cdr : car : car] > $x} {
		    elem := $i;
		    break;
		};
	    };
	    if {[$i car] > $y} {
	        elem := $i;
		break;
	    };
	};
	$elem ?? {
	    l ::= $SearchResult filter {| i | [$i car] > $end};
	    elem ::= $l car;
	};
    };
    if $elem {
	ey ::= $elem car;
	ex ::= $elem cdr : car : car;
	cursor-move-to $geom $ey $ex;
    };

    ### search result hilight
    start := $geom,ViewLine;
    end ::= $start + $sy;
    sets SearchHilight [$SearchResult filter {| i | and {[$i car] >= $start} {[$i car] < $end}}];
};

CombiWindow method stay-search () {
    $SearchResult ?? {return <nil>};

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    (sy sx) ::= get-screen-size;
    start := $geom,ViewLine;
    end ::= $start + $sy;
    l ::= $SearchResult filter {| i | and {[$i car] >= $start} {[$i car] <= $end}};

    elem := <nil>; ### $elem is search and move target element
    if {$l null?} {
	l ::= $SearchResult filter {| i | [$i car] > $end};
	elem ::= $l car;
    } {
        elem := <nil>;
	$l each do: {| i |
	    if {[$i car] = $y} {
		if {[$i cdr : car : car] >= $x} {
		    elem := $i;
		    break;
		};
	    };
	    if {[$i car] > $y} {
	        elem := $i;
		break;
	    };
	};
	$elem ?? {
	    l ::= $SearchResult filter {| i | [$i car] > $end};
	    elem ::= $l car;
	};
    };
    if $elem {
	ey ::= $elem car;
	ex ::= $elem cdr : car : car;
	cursor-move-to $geom $ey $ex;
    };

    ### search result hilight
    start := $geom,ViewLine;
    end ::= $start + $sy;
    sets SearchHilight [$SearchResult filter {| i | and {[$i car] >= $start} {[$i car] < $end}}];
};

CombiWindow method move-to-previous-search () {
    $SearchResult ?? {return <nil>};

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    (sy sx) ::= get-screen-size;
    start := $geom,ViewLine;
    end ::= $start + $sy;
    l ::= $SearchResult filter {| i | and {[$i car] >= $start} {[$i car] <= $end}} : reverse;

    elem := <nil>; ### $elem is search and move target element
    if {$l null?} {
	l ::= $SearchResult filter {| i | [$i car] < $start};
	elem ::= $l last : car;
    } {
        elem := <nil>;
	$l each do: {| i |
	    if {[$i car] = $y} {
		if {[$i cdr : car : car] < $x} {
		    elem := $i;
		    break;
		};
	    };
	    if {[$i car] < $y} {
	        elem := $i;
		break;
	    };
	};
	$elem ?? {
	    l ::= $SearchResult filter {| i | [$i car] < $start};
	    elem ::= $l last : car;
	};
    };
    if $elem {
	ey ::= $elem car;
	ex ::= $elem cdr : car : car;
	cursor-move-to $geom $ey $ex;
    };

    ### search result hilight
    start := $geom,ViewLine;
    end ::= $start + $sy;
    sets SearchHilight [$SearchResult filter {| i | and {[$i car] >= $start} {[$i car] < $end}}];
};

CombiWindow method cursor-move-to (geom y x) {
    sets FreeCursor <nil>;
    
    buff ::= get-buffer;
    (new-y new-x) ::= get-cursor-index $buff $y $x;
    $geom set! IndexColumn.SAVE $new-x;
    $geom set! CursorLine [$new-y - $geom,ViewLine];
    $geom set! CursorColumn [$new-x - $geom,ViewColumn];
    (sy sx) ::= get-screen-size;
    fit-to-cursor $geom $sy $sx;
};

CombiWindow method set-search-hilight () {
    $Activate ?? {return};
    
    list := $SearchHilight;
    $list ?? {return};
    geom ::= get-geom;
    buff ::= get-buffer;

    (scr-y scr-x) ::= get-screen-size;
    (idx-y idx-x) ::= get-source-index $buff $geom;
    $list each do: {| e |
	py ::= $e car;
	pxs ::= $e cdr : car : car;
	pxe ::= $e cdr : car : cdr : car;
	y ::= $py - $geom,ViewLine;

	src ::= $buff get-buffer-line $py;
	start-x ::= curs-index-to-pos $src $pxs $DEFAULT_TAB_WIDTH : - $geom,ViewColumn;
	if {$start-x < 0} {start-x := 0};
	end-x ::= curs-index-to-pos $src $pxe $DEFAULT_TAB_WIDTH : - $geom,ViewColumn;
	if {$end-x <= 0} {continue};
	len ::= $end-x - $start-x;
	if {$start-x > $scr-x} {continue};
	if {$end-x >= $scr-x} {end-x := $scr-x};
	if {$len <= 0} {continue};

	if {and {$idx-y = $py} {$idx-x = $pxs}} {
	    curs-color $BufferCurs $y $start-x $len $ColorDB,SEARCH_CURRENT_HILIGHT 0;
	} {
	    curs-color $BufferCurs $y $start-x $len $ColorDB,SEARCH_HILIGHT 0;
	};
    };
};

CombiWindow method set-word-hilight () {
    if {false? HILIGHT_REGEXP} {return};

    buff ::= get-buffer;
    geom ::= get-geom;
    (y x) ::= get-source-index $buff $geom;
    (sy sx) ::= get-screen-size;
    start := $geom,ViewLine;
    end ::= $start + $sy : - 1;

    $HILIGHT_REGEXP each do: {| i |
	regex ::= $i car;
	color ::= $i cdr : car;
	result := ();
	last := $result;
	line := $start;
	$buff buffer-select $start $end {| src |
	    l ::= $src =~ :all $regex;
	    if $l {
		$l each do: {| m |
		    $last append! ([$line + 0] $m);
		};
	    };
	    $line ++;
	};
	set-word-hilight-color $geom $buff $result $color;
    };
};

CombiWindow method set-word-hilight-color (geom buff list color) {
    (scr-y scr-x) ::= get-screen-size;

    $list each do: {| e |
	py ::= $e car;
	pxs ::= $e cdr : car : car;
	pxe ::= $e cdr : car : cdr : car;
	y ::= $py - $geom,ViewLine;

	src ::= $buff get-buffer-line $py;
	start-x ::= curs-index-to-pos $src $pxs $DEFAULT_TAB_WIDTH : - $geom,ViewColumn;
	if {$start-x < 0} {start-x := 0};
	end-x ::= curs-index-to-pos $src $pxe $DEFAULT_TAB_WIDTH : - $geom,ViewColumn;
	if {$end-x <= 0} {continue};
	len ::= $end-x - $start-x;
	if {$start-x > $scr-x} {continue};
	if {$end-x >= $scr-x} {end-x := $scr-x};
	if {$len <= 0} {continue};

	curs-color $BufferCurs $y $start-x $len $ColorDB,$color 0;
    };
};
