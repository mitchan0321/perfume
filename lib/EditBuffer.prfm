class EditBuffer BufferBase;

EditBuffer method init () {
    base-constructor;
    init-constructor;
};

EditBuffer method init-constructor () {
    sets Src [vector];
    sets File <nil>;
    sets BufferName "*no named*";
    sets Modify <nil>;
    sets NewFile <nil>;
    sets UndoBuffer ();
    sets RedoBuffer ();
    sets MarkBuffer ();
    sets UnmarkBuffer ();
    sets Protect <nil>;
    sets ContentPath <nil>;
    sets PreviousBuffer <nil>;
    sets LastTimestamp 0;
    sets IncludeCR <nil>;
    sets EncError <nil>;
    sets BufferTabWidth <nil>;
    if {defvar? DEFAULT_EDIT_ENCODING} {
        sets Encoding $DEFAULT_EDIT_ENCODING;
    } {
        sets Encoding UTF-8F;
    };
};

EditBuffer method string () {
    return ["name=" . $BufferName ", path=" $File];
};

EditBuffer method get-vector () {
    return $Src;
};

EditBuffer method load-content (path init-only: init-flag buffer-name: buff-name) {
    result := (<nil> "");
    f ::= new File;
    $f set-encoding $Encoding;
    $f set-ignore-cr $FILE_IGNORE_CR;
    sets EncError <nil>;

    sets NewFile <nil>;
    sets Src [vector];
    if {[$path sub 0 1] = "/"} {path ::= path-adjust $path};
    if {and {! [set? buff-name]} {$path len : > 0}} {
        buff-name ::= $path split sep: "/" : last : car;
    };
    if {or {! [set? buff-name]} {! $buff-name} {$buff-name = ""}} {
	buff-name := "*no named*";
    };

    if {! [set? init-flag]} {
	try {
	    if {or {file dir? $path} {and {file exists? $path} {! [file read? $path]}}} {
		throw ErrFileSpec "File is directory or unreadable.";
            };
            if {and {file exists? $path} {! [regular-file? $path]}} {
                throw ErrFileSpec "Not regular file.";
            };
            if {file exists? $path} {
                path ::= path-adjust [get-real-path $path];
            };
            sets File $path;

            if {file read? $path} {
                enc ::= auto-encoding $path;
		if [nil? $enc] {enc := RAW};
		$f open $path mode: i;
                $f set-encoding $enc;
                sets Encoding $enc;
		$f each do: {| r |
		    $Src append! $r;
                };
                if {dict [$f stat] : get include-cr} {
                    sets IncludeCR <t>;
                };
                if {dict [$f stat] : get encode-error} {
                    sets EncError <t>;
                    set-protect;
                } {
                    no-protect;
                };
		$f close;
                if {! [file write? $path]} {
                    set-protect;
                };
                inode ::= dict [file stat $path];
                sets LastTimestamp $inode,mtime;
	        result := (<t> "");
	    } {
		sets NewFile <t>;
	        result := (<t> "");		
	    };
	}
	catch: {| e |
	    result := (<nil> ["<" . [$e car] "># " [$e cdr]]);
	}
        fin: {
	    $f close;
	};
    } {
        result := (<t> "");
	sets NewFile <nil>;
	sets File <nil>;
    };

    if {$path = ""} {sets File "EDITOR_SAVE.pmacs"};
    BufferManager regist-buffer [self] $buff-name;

    sets UndoBuffer ();
    sets RedoBuffer ();
    sets Modify <nil>;
    return $result;
};

EditBuffer method set-encoding (enc) {
    if [("EUC-JP" "Shift-JIS" "UTF-8" "UTF-8F" "RAW") find $enc] else: {return <nil>};
    sets Encoding [symbol $enc];
};

EditBuffer method get-encoding () {
    return $Encoding;
};

EditBuffer method reload-content () {
    f ::= new File;
    $f set-encoding $Encoding;
    $f set-ignore-cr $FILE_IGNORE_CR;
    path := $File;
    if $path else: {
        throw ErrFileSpec "File not set.";
    };
    if {or {file dir? $path} {and {file exists? $path} {! [file read? $path]}}} {
        throw ErrFileSpec "File is directory or unreadable.";
    };
    if {and {file exists? $path} {! [regular-file? $path]}} {
        throw ErrFileSpec "Not regular file.";
    };
    sets Src [vector];
    $f open $path mode: i;
    $f each do: {| r |
        $Src append! $r;
    };
    if {dict [$f stat] : get include-cr} {
        sets IncludeCR <t>;
    };
    sets EncError <nil>;
    if {dict [$f stat] : get encode-error} {
        sets EncError <t>;
        set-protect;
    } {
        no-protect;
    };
    $f close;
    if {! [file write? $path]} {
        set-protect;
    };
    inode ::= dict [file stat $path];
    sets LastTimestamp $inode,mtime;
    return (<t> "");
};

EditBuffer method save-content (path: path) {
    if {protect?} {
        return (<nil> "Buffer is protected, try after no-protect command executed.");
    };
    
    if {! [set? path]} {
	path ::= get-path;
    };
    if {or {nil? $path} {$path = ""}} {return (<nil> ErrNoPathSpacified)};
    if {[$path sub 0 1] = "/"} {path ::= path-adjust $path};
    sets File $path;
    
    l ::= $path split sep: "/";
    backup-path ::= $l <<- ["%" . [$l ->>] "%"] : join sep: "/";
    mode := $DEFAULT_FILE_MODE;
    if {file exists? $path} {
	try {
	    d ::= dict [file stat $path];
	    mode ::= $d get mode;
	} catch: {| e |
	    return (<nil>
		["<" . [$e car] "># " [$e cdr] ", at file mode get."]);
	};
    } {
	backup-path := <nil>;
    };
    
    f ::= new File;
    $f set-encoding $Encoding;
    $f set-ignore-cr $FILE_IGNORE_CR;
    try {
	if $backup-path {
	    $f open $backup-path mode: o;
	} {
	    $f open $path mode: o;
	};
    } catch: {| e |
	$f close;
	return (<nil>
	    ["<" . [$e car] "># " [$e cdr] ", at create new file, "
	     [$backup-path ??? $backup-path $path] "."]);
    };

    try {
	if $Src {
            if $IncludeCR {
                $Src each do: {| r |
                    $f puts [$r . "\r"];
                }
            } {
                $Src each do: {| r |
                    $f puts $r;
                }
            };
	};
	$f close;
	if $backup-path {
	    file chmod $backup-path $mode;
        };
    } catch: {| e |
	$f close;
	return (<nil>
	    ["<" . [$e car] "># " [$e cdr] ", at file write."]);
    };

    if $backup-path {
        try {
	    file rm $path;
	    file rename $backup-path $path;
	} catch: {| e |
            return (<nil>
                ["<" . [$e car] "># " [$e cdr] ", at file write."]);
	};
    };

    ### sets UndoBuffer ();
    ### sets RedoBuffer ();
    try {
        inode ::= dict [file stat $path];
        sets LastTimestamp $inode,mtime;
    } catch: {
        sets LastTimestamp 0;
    };
    sets Modify <nil>;
    sets NewFile <nil>;
    return (<t> Success);
};

EditBuffer method modified-by-another-process () {
    if $NewFile {
        if [file exists? $File] {
            return <t>;
        };
        return <nil>;
    };
    
    if [file exists? $File] else: {return <nil>};
    
    try {
        inode ::= dict [file stat $File];
    } catch: {
        return <t>;
    };
    if {$LastTimestamp = $inode,mtime} {
        return <nil>;
    };
    
    return <t>;
};

EditBuffer method clear-all () {
    sets Src [vector];
};

EditBuffer method unregist-buffer () {
    BufferManager unregist-buffer $BufferName;
};

EditBuffer method get-path () {
    return $File;
};

EditBuffer method buffer-select (from to block) {
    $from each to: $to do: {| i |
	if {and [$i < [$Src len]] [$i >= 0]}
	then: {
	    result := ([yield $block $Src,$i $i]);
            if {control? [$result car]} {return};
	}
	else: {
	    result := ([yield $block "" $i]);
            if {control? [$result car]} {return};
	};
    };
};

EditBuffer method get-buffer-line (line) {
    $Src ?? {return <nil>};
    if {$line < 0} {return <nil>};
    if {$line >= [$Src len]} {
 	return <nil>;
    } {
 	if {[$Src len] <= 0} {return <nil>};
 	return [$Src get $line];
    };
};

EditBuffer method get-buffer-length () {
    return [$Src ??? [$Src len] 0];
};

EditBuffer method insert-string-at (input y x) {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    sets Modify <t>;
    if {true? Src} {
        if {$y >= [$Src len]} {
            # $UndoBuffer << (backdelete-character-at [$Src len : + 1] 0);
            $UndoBuffer << (backdelete-character-at [$Src len] 0);
        };
	result ::= $Src insert-string-at $input $y $x;
	if $result,0 {$UndoBuffer << $result; sets RedoBuffer ()};
	return ($result,3 $result,4);
    };
    return (0 0);
};

EditBuffer method delete-character-at (y x) {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    sets Modify <t>;
    if {true? Src} {
	result ::= $Src delete-character-at $y $x;
	if $result,0 {$UndoBuffer << $result; sets RedoBuffer ()};
	return ($result,2 $result,3 $result,1);
    };
    return (0 0 "");
};

EditBuffer method backdelete-character-at (y x) {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    sets Modify <t>;
    if {true? Src} {
	result ::= $Src backdelete-character-at $y $x;
	if $result,0 {$UndoBuffer << $result; sets RedoBuffer ()};
	return ($result,2 $result,3 $result,1);
    };
    return (0 0 "");
};

EditBuffer method append-string (str) {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    sets Modify <t>;
    if {true? Src} {
	result ::= $Src append-string $str;
	if $result,0 {$UndoBuffer << $result; sets RedoBuffer ()};
	return ($result,1 $result,2)
    };
    return (0 0);
};

EditBuffer method line-update (str y) {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};

    sets Modify <t>;
    if {and {true? Src} {$y >= 0} {$y < [$Src len]}} {
        result ::= $Src line-update $str $y;
        $UndoBuffer << $result; sets RedoBuffer ();
        return $result;
    } {
        if {$y >= [$Src len]} {
            result ::= $Src append-string $str;
            return $result;
        };
    };
    return (<nil> 0 0);
};

EditBuffer method undo () {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    if {true? Src} {
	if {! [$UndoBuffer null?]} {
	    o ::= $UndoBuffer >>;
            if {$UndoBuffer null?} {
                sets Modify <nil>;
	    };
	    result ::= call $Src $o;
	    $RedoBuffer << $result;
	    
	    cmd := $o,0;
            sets Modify <t>;

	    cond
	        {eq? $cmd delete-region} {
                    return ($o,1 $o,2);
                }
                {eq? $cmd insert-string-at} {
                    return ($o,2 $o,3);
                }
                {eq? $cmd insert-string-at-next} {
                    line := $o,2;
                    col ::= $o,3 + 1;
                    if {$col > [$Src get $line : len]} {
                        col := 0;
                        line ::= $line + 1;
                    };
                    return ($line $col);
                }
                {eq? $cmd backdelete-character-at} {
                    return ($o,1 $o,2);
                }
                {eq? $cmd line-update} {
                    return ($o,2 0);
                }
            ;;
	};
    };
    return (<nil> <nil>);
};

EditBuffer method undo-empty? () {
    return [$UndoBuffer null?];
};

EditBuffer method redo () {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    if {true? Src} {
	if {! [$RedoBuffer null?]} {
	    o ::= $RedoBuffer >>;
	    result ::= call $Src $o;
	    $UndoBuffer << $result;
	    
	    cmd := $o,0;
	    sets Modify <t>;

	    cond
                {eq? $cmd delete-region} {
                    return ($o,1 $o,2);
                }
                {eq? $cmd insert-string-at} {
                    return ($o,2 $o,3);
                }
                {eq? $cmd insert-string-at-next} {
                    line := $o,2;
                    col ::= $o,3 + 1;
                    if {$col > [$Src get $line : len]} {
                        col := 0;
                        line ::= $line + 1;
                    };
                    return ($line $col);
                }
                {eq? $cmd backdelete-character-at} {
                    return ($o,1 $o,2);
                }
                {eq? $cmd line-update} {
                    return ($o,2 0);
                }
            ;;
	};
    };
    return (<nil> <nil>);
};

EditBuffer method modify? () {
    return $Modify;
};

EditBuffer method no-modify () {
    sets Modify <nil>;
};

EditBuffer method newfile? () {
    return $NewFile;
};

EditBuffer method includeCR? () {
    return $IncludeCR;
};

EditBuffer method set-includeCR (dos) {
    $dos ??? {sets IncludeCR <t>} {sets IncludeCR <nil>};
};

EditBuffer method enc-error? () {
    return $EncError;
};

EditBuffer method get-region-string (sy sx ey ex) {
    if {true? Src} {
        len ::= $Src len;
        if {and [$ey >= $len] [$sy >= $len]} {
            return "";
        };
	return [[$Src copy-region $sy $sx $ey $ex] get 1];
    };
    return <nil>;
};

EditBuffer method cut-region (sy sx ey ex) {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    sets Modify <t>;
    if {true? Src} {
        len ::= $Src len;
        if {and [$ey >= $len] [$sy >= $len]} {
            return ("" (insert-string-at "" $ey 0));
        };
	str ::= [$Src copy-region $sy $sx $ey $ex] get 1;
	result ::= $Src delete-region $sy $sx $ey $ex;
	if $result,0 {$UndoBuffer << $result};
	return ($str $result);
    };
    return ("" (<nil> 0 0));
};

EditBuffer method search (str) {
    if {$str = ""} {return ()};
    
    result := ();
    last := $result;
    i := -1;
    rstr ::= $str rquote;
    if {[get-buffer-length] = 0} {return $result};
    $Src each do: {| r |
	i ::= $i + 1;
	try {
            if {eq? $SEARCH_MODE text} {
                slist ::= $r =~ $rstr :all :text :nocase;
            } {
                slist ::= $r =~ $rstr :all;
            };
	} catch: {
	    return ();
	};
	$slist ?? {continue};
	$slist each do: {| e |
	    last ::= $last append! ($i $e);
	};
    };
    return $result;
};

EditBuffer method mark (y x) {
    $MarkBuffer << ($y $x);
};

EditBuffer method get-mark (y x) {
    result ::= $MarkBuffer >>;
    $result ?? {return <nil>};
    $UnmarkBuffer << ($y $x);
    return $result;
};

EditBuffer method un-mark (y x) {
    result ::= $UnmarkBuffer >>;
    $result ?? {return <nil>};
    $MarkBuffer << ($y $x);
    return $result;
};

EditBuffer method replace-buffer (froms tos) {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    $Src ?? {return 0};
    if {[$Src len] = 0} {return 0};
    
    c := 0;
    0 each to: [$Src len : - 1] do: {| i |
        s ::= $Src get $i;
        if {$s = ""} {continue};
        
        (result n) ::= $s replace-return-times :all $froms $tos;
        if {$n = 0} {continue};
        [self] line-update $result $i;
        $c ++ $n;
    };
    return $c;
};

EditBuffer method replace-region (froms tos start end) {
    if {true? Protect} {throw ErrReadOnly "Buffer is protected."};
    
    $Src ?? {return 0};
    blen ::= $Src len;
    if {$blen = 0} {return 0};
    if {$start < 0} {start := 0};
    if {$start >= $blen} {return 0};
    if {$end >= $blen} {end ::= $blen - 1};
    
    c := 0;
    $start each to: $end do: {| i |
        s ::= $Src get $i;
        if {$s = ""} {continue};
        
        (result n) ::= $s replace-return-times :all $froms $tos;
        if {$n = 0} {continue};
        [self] line-update $result $i;
        $c ++ $n;
    };
    return $c;
};

EditBuffer method protect? () {
    return $Protect;
};

EditBuffer method set-protect () {
    sets Protect <t>;
};

EditBuffer method no-protect () {
    sets Protect <nil>;
};

EditBuffer method set-content (path) {
    sets ContentPath $path;
};

EditBuffer method get-content () {
    if $ContentPath {return $ContentPath};
    if $File        {return $File};
    return [pwd];
};

EditBuffer method get-content-dir () {
    dir ::= path-adjust [get-content];
    if [file dir? $dir] {return $dir};
    dir ::= path-adjust [$dir . "/.."];
    return $dir;
};

EditBuffer method set-previous-buffer (buffer-name) {
    sets PreviousBuffer $buffer-name;
};

EditBuffer method get-previous-buffer () {
    return $PreviousBuffer;
};


EditBuffer method set-buffer-tab-width (width) {
    sets BufferTabWidth $width;
};

EditBuffer method get-buffer-tab-width () {
    return $BufferTabWidth;
};
