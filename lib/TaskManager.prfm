class TaskManager;

TaskManager method init () {
    if {sets? TaskList} {
        $TaskList each do: {| i |
            try {$i release} catch: {};
        };
    };
    sets TaskList ();
    sets LastDispatch [time-of-day];
    
    sets Task_stdout [new EditStream];
    $Task_stdout open "*Console*";
};

TaskManager method add (task name) {
    if {$task instance? Task} else: {
        throw ErrBadType "Not a Task object.";
    };
    if {$TaskList find $task} {
        throw ErrDuplicateTask "Already registerd task.";
    };
    n := 1;
    name ::= "" . $name;
    sname := $name;
    tlist ::= $TaskList map {| i | $i get-name};
    while {$tlist find $sname} do: {
        n ::= $n + 1;
        sname ::= $name . ":" $n;
    };
    $TaskList <<- $task;
    $task set-name $sname;
    in ::= new Stream;
    $task set-stdio $in $Task_stdout $Task_stdout;
    return $sname;
};

TaskManager method get (name) {
    $TaskList each do: {| i |
        if {[$i get-name] = $name} {
            return $i;
        };
    };
    return <nil>;
};

TaskManager method get-task-list () {
    return $TaskList;
};

TaskManager method get-task (name) {
    $TaskList each do: {| t |
        if {$t get-name : = $name} {
            return $t;
        };
    };
    return <nil>;
};

TaskManager method dispatch () {
    now ::= time-of-day :msec;
    tick ::= $now - $LastDispatch;
    sets LastDispatch $now;
    
    min-wait := 0;
    min-task := <nil>;
    $TaskList each do: {| t |
        if {$t tickable?} {
            wait ::= $t time-elapsed $tick;
            
            if {$wait < 0} {
                if {$wait < $min-wait} {
                    min-wait := $wait;
                    min-task := $t;     # run task candidate
                };
            };
        };
    };
    if $min-task {
        $min-task run;     # dispatch to min task
        if {$min-task exit?} {
            $Task_stdout puts ["Task [" . [$min-task get-name] "] end, status= " [$min-task get-exit-status] "."];
            idx ::= $TaskList find $min-task;
            if {$idx >= 0} {
                $TaskList delete! $idx
            };
        };
        return <t>;
    };
    return <nil>;
};
